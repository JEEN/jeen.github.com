<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[JEEN's techlog]]></title>
  <link href="http://jeen.github.io/atom.xml" rel="self"/>
  <link href="http://jeen.github.io/"/>
  <updated>2013-07-12T07:59:54+00:00</updated>
  <id>http://jeen.github.io/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Apply MoeEmotional Hudson Plugin on Jenkins]]></title>
<link href="http://jeen.github.io/2013/07/10/apply-moeemotional-hudson-plugin-on-jenkins/"/>
<updated>2013-07-10T13:28:59+00:00</updated>
<id>http://jeen.github.io/2013/07/10/apply-moeemotional-hudson-plugin-on-jenkins</id>
<category term="jenkins" />

      <content type="html"><![CDATA[<blockquote class="twitter-tweet"><p>젠킨스에서 대머리 아저씨 얼굴 보기가 싫어서, 급하게 테마 하나 제작했습니다. <a href="https://t.co/FcNPdqMjlO">https://t.co/FcNPdqMjlO</a> 앞으로 플랫플랫하게 해볼 예정.</p>&mdash; Park Hyun-woo (@lqez) <a href="https://twitter.com/lqez/statuses/354925228079579138">July 10, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>이 모든 원인은 @lqez 님의 트윗에서 시작했습니다.</p>

<p>이 트윗을 보고 예전에&hellip; 그러니까 일본에서 일하고 있을 당시 CI 에는 별로 신경도 쓰지도 않던 시절에 Hatena bookmark 에서 모에짙은 플러그인에 대한 기사를 떠올렸습니다.</p>

<ul>
<li><a href="http://d.hatena.ne.jp/kanu-orz/20090803/1249225200">Hudsonの萌え化、もしくは痛Hudson化</a></li>
</ul>

<p>　그러니까 당시 Jenkins 가 Hudson 이던 시절에 수염난 아저씨를 눈뜨고 쳐다볼 수 없었던 Hudson 사용자들은 <code>moeemotional-hudson</code> 이라는 플러그인을 만들어 냅니다.
　그와 관련된 링크는 아래와 같습니다.</p>

<ul>
<li><a href="http://d.hatena.ne.jp/torazuka/20090731/1248970549">hud子「継続的インテグレーションを、あなたに」</a></li>
<li><a href="http://d.hatena.ne.jp/torazuka/20090802/hudmis">RED_LAMP用のhud美を追加</a></li>
<li><p><a href="http://d.hatena.ne.jp/kanu-orz/20090802/1249182957">萌えよHudson(hud子バージョン公開)</a></p>

<p>그리고 모에말고 일반적인 Emotional Jenkins 플러그인도 존재합니다. -_-;</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Emotional+Jenkins+Plugin">https://wiki.jenkins-ci.org/display/JENKINS/Emotional+Jenkins+Plugin</a></li>
</ul>

<p>뭐 결론은 Stable, Unstable 에 따라서 각각의 상황에 맞는 그림을 대신 표시해주는 것이지요.</p></li>
</ul>

<blockquote class="twitter-tweet"><p>그러니까 그런 노력의 결과로&hellip; 이런 아저씨가&hellip; <a href="http://t.co/1d1TuMWbJs">pic.twitter.com/1d1TuMWbJs</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/354939083795083265">July 10, 2013</a></blockquote>

<blockquote class="twitter-tweet"><p>이런 OL 이 된다는 것입니다. <a href="http://t.co/c3Wu2plYAT">pic.twitter.com/c3Wu2plYAT</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/354939140883742720">July 10, 2013</a></blockquote>

<p>이 플러그인은 각 Job 단위로 설정이 가능합니다. 플러그인을 설치하고 post-build action 에서 Moeemotional Hudson 을 추가해줍니다. <strike>그러니까 Job 단위로 설정이 가능한게 Job A 페이지에서만 표시되고 해당 Job 의 빌드 결과에 따른 그림변화는 없었습니다.</strike> 아&hellip; 캐쉬에 의한 착각이었습니다. 각 빌드 페이지에서도 정상적으로 출력됩니다.</p>

<p>아무튼 플랫플랫하게 나올 결과물을 기대해봅니다.</p>

<ul>
<li><a href="https://github.com/lqez/flat-jenkins">Github - lqez/flat-jenkins</a></li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Released DBIx::Class::InflateColumn::Serializer::Hstore]]></title>
<link href="http://jeen.github.io/2013/07/07/released-dbix-class-inflatecolumn-serializer-hstore/"/>
<updated>2013-07-07T10:05:31+00:00</updated>
<id>http://jeen.github.io/2013/07/07/released-dbix-class-inflatecolumn-serializer-hstore</id>
<category term="perl" /><category term="pg" />

      <content type="html"><![CDATA[<p>예전에는 그냥 Pg 를 사용한 만들어진 웹서비스를 유지보수하는 수준에서 밖에 Pg 를 접하지 않았는데&hellip;
 최근의 한 프로젝트에서 Postgres 를 도입하기로 결정이 났습니다. </p>

<p>이전부터 Pg 의 hstore나 Array 타입이라든가 이런저런 유의미한 기능에 대해서는 기대하고 있었고, 약간 설레임이 있었습니다.</p>

<p>작업을 하면서 살펴보니 hstore 의 경우는 Postgre Extension 으로 존재하며, DBIx::Class 는 아마도 DB 의 특정 Extension 까지 보살펴주지는 않겠지 하고 생각했습니다.</p>

<p>결국 기본적으로 DBIx::Class에서 컬럼의 참조/등록시에 Serialization/Deserialization 하면서 쓰고, hstore 에 대해서 참조쿼리를 발생시킬 때는 적절한 스칼라레퍼런스로 사용할 수 밖에 없지 않겠는가 싶었습니다.</p>

<p>그래서 뭐 결국은 DBIx::Class::InflateColumn::Serializer 모듈에 그냥 끼워넣기로 DBIx::Class::InflateColumn::Serializer::Hstore 라는 모듈을 추가해서 CPAN 에 올렸습니다.</p>

<p>사용법은 CPAN 문서의 SYNOPSIS 를 참조하면 됩니다. :-)</p>

<p>DBD::Pg 에서 UTF8 사용을 위해서 <code>pg_enable_utf8</code> 과 <code>Pg::hstore</code> 를 병용할 때 UTF8 표시문제가 있어서 기존 <code>DBIx::Class::InflateColumn::Serializer</code> 에는 없던 옵션인 <code>recursive_encode</code> 를 추가했습니다.</p>

<p>UTF8 을 포함한 hstore 컬럼과 그렇지 않은 것들을 구분해서 사용하면 되지 않을까 싶습니다만&hellip; </p>

<p>뭐 아무튼 결론은 요 1주일 정도 Pg 로 옮기면서 되던 게 안된다든가, 이런게 된다든가 하는 다양한 문제를 접하며 즐거운 비명을 지르고 있습니다.</p>

<p><blockquote class="twitter-tweet"><p>Pg::hstore w/ pg_enable_utf8 = oops</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353168251531956225">July 5, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></p>

<blockquote class="twitter-tweet"><p>Pg 의 ㅅㅂ함을 만끽하고 있음 :-)</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353050682095443969">July 5, 2013</a></blockquote>

<blockquote class="twitter-tweet"><p>신비함.. 신비함..</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353050712432840704">July 5, 2013</a></blockquote>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using MSSQL in Perl(Linux)]]></title>
<link href="http://jeen.github.io/2013/06/18/using-mssql-in-perl-linux/"/>
<updated>2013-06-18T13:33:40+00:00</updated>
<id>http://jeen.github.io/2013/06/18/using-mssql-in-perl-linux</id>
<category term="db" /><category term="perl" />

      <content type="html"><![CDATA[<p>오늘은 IRC 상에서 리눅스 환경에서 Perl 로 MS-SQL 에 접속하는 최선의 방법에 대한 이야기가 있었습니다. 그냥 흘리기에는 아쉬운 얘기들이 많아서 긁어서 정리해봅니다. </p>

<p><script src="//storify.com/jeen_lee/using-mssql-in-perl-linux.js" type="text/javascript" language="javascript"></script><noscript>[<a href="//storify.com/jeen_lee/using-mssql-in-perl-linux" target="_blank">View the story &ldquo;Using MSSQL in Perl(Linux)&rdquo; on Storify</a>]</noscript></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[PullReq on MojoX::Validator]]></title>
<link href="http://jeen.github.io/2013/06/07/pullreq-on-mojox-validator/"/>
<updated>2013-06-07T08:53:47+00:00</updated>
<id>http://jeen.github.io/2013/06/07/pullreq-on-mojox-validator</id>
<category term="mojolicious" /><category term="perl" />

      <content type="html"><![CDATA[<p>지난 수요일에 잠깐 이번 서버 구현에 쓸 Validator 를 물색하던 중에 <a href="http://metacpan.org/module/Mojolicious::Plugin::Validator">Mojolicious::Plugin::Validator</a> 를 보고는 참 Validation 코드쓰기 쉽다라는 생각에 덜컥 채용해버렸습니다.</p>

<p>모듈은 2011년이 마지막으로 업뎃되었구요. 근데 깔아보니까 안깔립니다. 이것도 설마 5.18 의 Hash Randomization 문제때문인가 하면서 실패한 테스트코드를 살펴본 결과 Mojolicious API 가 바뀐 것때문이었습니다. 그러니까 1년 반안에 프레임워크 테스트 모듈의 근간 API 가 바뀌어버리는 바람에 테스트가 실패한 것이지요.</p>

<p>일단 이 모듈이 맘에 들었고, 이 모듈을 만든 @vtivti 의 여러가지 결과물들을 보고 재미있는 사람이구나 하고 생각하기도 했었죠.</p>

<ul>
<li><p><a href="https://github.com/vti/mojox-validator/pull/17">https://github.com/vti/mojox-validator/pull/17</a></p>

<p>그래서 그냥 뭐 테스트코드 하나 패치해서 Pull Req 를 보냈습니다. 내용을 보면 알겠지만 정말 별거 없습니다. <code>post_form_ok</code> 가 없어지고, <code>post_ok</code> 의 사용법이 아마 3.x ~ 4.x 버젼으로 넘어오면서 바뀌지 않았나 합니다. 남은 건 서버에 올리는 데 carton 으로 깔면 … 아 물론 cpanm 1.6 부터 git 프로토콜을 지원하기는 해서 그냥 git repo 를 집어넣으면 되니까…. // 하지만 그냥 CPAN 을 통해서 받고싶었기에 빨리 패치된 걸로 CPAN 에 올려달라고 독촉했습니다.</p></li>
</ul>

<blockquote class="twitter-tweet" lang="ko"><p>@<a href="https://twitter.com/vtivti">vtivti</a> oh, please release it please. Now it is the only one problem I had to deploy on my servers. @__@</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/342088628903759872">2013년 6월 5일</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>서버에 Deploy 한다는 건 Jenkins 에 올려놓고 빌드할 때 제대로 돌아가지 않으니까요… 뭐 밀린 숙제 같은 것이었습니다.</p>

<p><blockquote class="twitter-tweet" lang="ko"><p>MojoX-Validator 0.0014 by VTI - <a href="http://t.co/1rKxxY9yQh" title="http://metacpan.org/release/VTI/MojoX-Validator-0.0014/">metacpan.org/release/VTI/Mo…</a></p>&mdash; CPAN New Modules (@cpan_new) <a href="https://twitter.com/cpan_new/status/342201018127372288">2013년 6월 5일</a></blockquote></p>

<p>그래서 오늘에서야 6.5일에 업데이트된 것을 확인하고 Jenkins 설정을 하고 제대로 동작하는 것을 확인했습니다.</p>

<ul>
<li><p><a href="https://metacpan.org/source/VTI/MojoX-Validator-0.0014/Changes">https://metacpan.org/source/VTI/MojoX-Validator-0.0014/Changes</a></p>

<p>Changes 날짜는 뭐 다르지만 이름이 콕하고 박혀있는 걸 보니… 뭔가 깨작거렸구나 하는 생각이 들기는 합니다.</p></li>
</ul>

<h3>결론</h3>

<p>매번 CPAN Recents 의 내용을 봐도 그렇지만 Mojolicious 의 잦은 업데이트가 반갑기도 합니다. 실제로 Catalyst 에서 테스트코드를 쓸려면 좀 이래저래 손이 많이 가는 부분도 Mojolicious 의 <code>Test::Mojo</code> 를 통해서 뭔가 쉽고 직관적이게 테스트코드를 슥샥슥샥 쓸 수 있습니다. 오히려 감동을 받은 부분입니다.</p>

<p>하지만 너무 잦은 업데이트는 이에 의존한 모듈들이 제대로 따라가주지 못하니 저같은 일반 사용자의 입장에서는 이런 경우처럼 예상이외의 수고가 들어가버릴 수도 있구나 ( 모듈을 만든 사람도 물론이거니와… ) 하는 생각도 듭니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[miyagawa's podcast ep12 - Korean Translation]]></title>
<link href="http://jeen.github.io/2013/05/26/miyagawas-podcast-ep12/"/>
<updated>2013-05-26T15:15:00+00:00</updated>
<id>http://jeen.github.io/2013/05/26/miyagawas-podcast-ep12</id>
<category term="perl" />

      <content type="html"><![CDATA[<p>자주 챙겨듣는 podcast 중에 개인적으로 존경하는 개발자인 @miyagawa 씨가 운영하는 podcast 가 있습니다.</p>

<ul>
<li><p><a href="http://podcast.bulknews.net">Tatsuhiko Miyagawa&#39;s Podcast</a></p>

<p>주제는 개발이나 각종 기기, 이벤트, 언어, 커뮤니티 등등의 IT와 관련된 다양한 이야기들을 다루고 있습니다.</p>

<p>항상 사전녹화하는 것을 수정해서 올리곤 했는데 이번에는 Mixlr 라는 서비스를 이용해서 생방송으로 진행되었습니다.</p></li>
<li><p><a href="http://mixlr.com">Mixlr makes broadcasting live audio simple. Share your sounds live&hellip;</a></p>

<p>시간은 미리 공지된 대로 5.26 저녁 10시. 게스트들과의 대화는 스카이프로 이뤄진 것 같습니다. 대화는 1시간 분량입니다.</p>

<p>아래의 내용은 IRC 채널 #perl-kr 에서 내용을 들으면서 옮겨적은 것이며, 부분적으로 빼먹은 부분이나 급작스런 컨텍스트 전환이 있습니다.</p></li>
</ul>

<h3>Intro</h3>

<ul>
<li>jeen__ : 미역 팟캐스트 12회는 라이브라고 해서 이거 듣고 퇴근해야지&hellip; 퇴근이랄까..</li>
<li>skyloader : 미역이 팟캐스트도 하나요?</li>
<li>skyloader : 주제가 perl?</li>
<li>jeen__ : ㅇㅇ</li>
<li>skyloader : 오올</li>
<li>skyloader : 하지만 일본어겠지..</li>
<li>jeen__ : ㅇㅇ</li>
<li>jeen__ : lestratt, tokuhirom 이 게스트</li>
<li>jeen__ : 처음으로 펄만을 위한 주제인듯 -_-;</li>
<li>jeen__ : tokuhirom TOEIC 쳤냐고 ㅋㅋ</li>
<li>jeen__ : 쳤는데 점수 안나왔다고</li>
<li>skyloader : 올 진사마의 실시간 통역</li>
<li><p>jeen__ : tokuhirom 이 아마 YAPC::NA 2013 스피커로 나가니까</p>

<ul>
<li><a href="http://www.yapcna.org/yn2013/talk/4635">YAPC::NA 2013 - June 3-5, Austin, Texas</a></li>
</ul></li>
<li><p>jeen__ : 의식을 높이기 위해서 TOEIC 공부하면서 시험쳐봤다고</p></li>
<li><p>jeen__ : ㅋㅋㅋ</p></li>
<li><p>jeen__ : 이번에 NA 스피커로 lestratt 이랑 tokuhirom 이 가니까 그래서 그런가</p></li>
<li><p>jeen__ : 호&hellip;</p></li>
<li><p>jeen__ : Skype 에 봇이랄까 그런 거 들어가서</p></li>
<li><p>jeen__ : Skype 대화내용을 리다이렉트 시키고 있다고</p></li>
<li><p>jeen__ : 물론 대화내용은 음성이지만</p></li>
<li><p>skyloader : 딱히 perl내용 같지 않..</p></li>
<li><p>jeen__ : 뭐 아직은&hellip;</p></li>
<li><p>jeen__ : 사담만 있을 뿐</p></li>
<li><p>jeen__ : Perl, YAPC 얘기</p></li>
<li><p>jeen__ : &hellip;</p></li>
</ul>

<h3>Perl 5.18 에 대해서</h3>

<ul>
<li>jeen__ : Perl 5.18

<ul>
<li><a href="http://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg201940.html">perl 5.18.0 is now available!</a></li>
</ul></li>
<li>skyloader : 흠</li>
<li>jeen__ : Jesse 에서 RJBS 로 매니저가 바뀌고 나서</li>
<li>jeen__ : 매년 5월에 나오게 되었다고</li>
<li>jeen__ : 하지만 뭔가 매년 서두르고 있는 건 아닌가라는 느낌으로 서둘러 내고 있는 느낌.</li>
<li>skyloader : 아니 그럼 일년에 한번만 release한다는 것?</li>
<li>jeen__ : 매년 이틀씩 늦춰지고 있다고…</li>
<li>jeen__ : 메이저 업데이트는 1년에 한번</li>
<li>skyloader : 음</li>
<li>jeen__ : 5.12-&gt;5.14-&gt;5.16-&gt;5.18</li>
<li>skyloader : 오키</li>
<li>jeen__ : Hash Randomization</li>
<li>jeen__ : 덕분에 테스트 개박살 났다</li>
<li>jeen__ : 미역도 꽤 테스트 실패하는 모듈이 여럿 있었는데</li>
<li>jeen__ : 5.17.x 시절에 고쳐놔서</li>
<li>jeen__ : 그래도 몇개는 아직 그대로 라고</li>
<li>jeen__ : TT2 도 아직 못 고쳤다고</li>
<li>jeen__ : 5.18 용 보고는 누군가 일괄적으로 RT 에 리포트 해주고 있다고</li>
<li>jeen__ : (그래서 나한테도 왔구나&hellip;)</li>
<li>jeen__ : JSON::XS 가 가장 큰 문제</li>
<li>skyloader : Hash randomization이 뭐길래</li>
<li>jeen__ : 메일링 리스트에 지적되었는데</li>
<li>jeen__ : 이런 수정은 의미가 없다고 레만이 지적</li>
<li>jeen__ : 오히려 Perl 문서에 적혀 있는대로 했으니까</li>
<li>jeen__ : 니들이 고쳐라!</li>
<li>jeen__ : 라고 했지만&hellip;</li>
<li>jeen__ : 최근에 관련 수정을 업데이트 ㅋㅋㅋ</li>
<li>jeen__ : 츤데레</li>
<li>jeen__ : 이걸로 얻을 수 있는 시큐리티 메리트는 거의 없다는 게 레만의 의견</li>
<li>jeen__ : 실제 Perl 에 대한 해쉬 공격방법은 제대로 보고되지 않아서</li>
<li>jeen__ : 5.16.2 취약점에서 한번 그런 게 보고 되었지만&hellip;</li>
<li>jeen__ : 보고자의 보고내용으로는 특정값을 넣어서 메모리가 붕붕 먹었던 그런 경우가 있었다고</li>
<li>jeen__ : HTTP Query Parameters 의 경우는 거의 대개 Hash 에 넣어서 하기 때문에</li>
<li>jeen__ : 그런 경우에 해쉬관련 공격의 대상이 될 수 있는데</li>
<li>jeen__ : 하지만 Perl 5 Porters 에 관련 내용이 올라오지 않아서</li>
<li>jeen__ : 그다지 의논되지 않은 내용이라고</li>
<li>jeen__ : 5.16 에서 변경된 패치와 5.18 에서 변경된 내용은&hellip;</li>
<li>jeen__ : 5.16에서는 같은 해쉬를 복사하면 &hellip; 블라블라</li>
<li>skyloader : 제 수준에서는 심오한 내용이라 이해가 안됨 ㅠ</li>
<li>jeen__ : 레만은 5.5 Perldoc 까지 되집어 올라갔는데</li>
<li>jeen__ : 스펙대로 했다고</li>
<li>jeen__ : 그런 내용을&hellip;</li>
<li>jeen__ : perldoc 관련 표현이 애매했다라는 의견도 있고</li>
<li>jeen__ : 5.8 에서 해쉬를 복사해서</li>
<li>jeen__ : 몇번이나 돌려봤을 때</li>
<li>jeen__ : 그 중에 한번은 값의 순서가 바뀌는 경우가 있었다고</li>
<li>jeen__ : given-when, smart match…</li>
<li>jeen__ : experimental 로 격이 내려갔다 라는 것은</li>
<li>jeen__ : 거의 deprecated 라는 상태와 같다고</li>
<li>jeen__ : given-when, smart match 의 경우는 그다지 와닫는 표현과 퍼포먼스도 그다지 좋지 않았다고</li>
<li>jeen__ : 너무 어정쩡한 상태로 5.10 에 넣어버려서</li>
<li>jeen__ : 그게 계속 문제가 되고 해서 5.18 에서 experimental 로</li>
<li>jeen__ : subroutine signature ?</li>
<li>jeen__ : 5.20 대상으로 subroutine signature 를&hellip;</li>
<li>jeen__ : sub asda($&hellip;) { }</li>
<li>jeen__ : 아직 스펙이 정의되지는 않았다고</li>
<li>skyloader : prototype?</li>
<li>jeen__ : MOP 도 5.20 릴리즈 대상으로 &hellip;</li>
<li>jeen__ : 하지만 아직&hellip; -_-;</li>
<li>jeen__ : XS 방방하지 않아도 적절한 퍼포먼스가 나왔으면..</li>
<li>jeen__ : 5만줄 정도의 코드가 삭제 되었는데</li>
<li>jeen__ : CPANPLUS + 거기에 의존되었던 코드들</li>
<li>jeen__ : (5.19에서)</li>
<li>jeen__ : Module::Build, CGI 를 5.20 에서 deprecated 로 만들려고</li>
<li>jeen__ : 하고 있다고</li>
<li>jeen__ : 옛 버젼에서 빌드시에 문제가 ..</li>
<li>jeen__ : 어차피 Module::Build 가 없어져도 CPAN 클라이언트가 알아서 감지해서 잡아주기 때문에 별 문제가 없을 거라고</li>
<li>jeen__ : CGI.pm 의 경우는 &hellip;.</li>
<li>jeen__ : 표준모듈로 해 줄 필요는 없지 않냐 라고&hellip;</li>
<li>jeen__ : CGI.pm 용 보안패치도 여러번 나오기도 해서</li>
<li>jeen__ : CGI 를 CPAN 에서 넣을려고 하면</li>
<li>jeen__ : FCGI 를 인스톨하려고 하고</li>
<li>jeen__ : 그게 XS 의존이라서 C컴파일 환경이 없는 곳에서는 대개 실패</li>
<li>jeen__ : 그래서 CGI 에서 FCGI 의존을 없애려고</li>
<li>jeen__ : 지금 CGI 가 FCGI 의 경우까지 고려한 코드가 들어가 있어서
jaker has joined (~<a href="mailto:jaker@36.39.50.37">jaker@36.39.50.37</a>)</li>
<li>jeen__ : tokuhirom 은 5.18.1 까지 기다릴 거라고</li>
<li>jeen__ : 아직 상용서버에 넣어 돌리기는 괜히 걱정된다나&hellip;</li>
<li>jeen__ : 특별히 써보고 싶다라는 기능도 없고 해서</li>
<li>jeen__ : 5.16.3 이 가장 좋은 선택지가 아닌가 하고</li>
<li>jeen__ : 10-20% 정도 퍼포먼스 향상은 있다고 하는데</li>
<li>jeen__ : 어떤 경유로 퍼포먼스 향상이 있었는지 그걸 몰라서</li>
<li>jeen__ : taint support 를 없애는 걸로 퍼포먼스가 올라가는 것은 아닌가 하고 생각</li>
</ul>

<h3>plenv</h3>

<ul>
<li>jeen__ : 미역이 perlbrew -&gt; plenv 로 바꾸</li>
<li><p>jeen__ : plenv 의 차이점은?</p>

<ul>
<li><a href="https://metacpan.org/module/plenv">plenv - perl binary manager - metacpan.org</a></li>
</ul></li>
<li><p>jeen__ : perlbrew 는 환경변수 PATH 를 열심히 변경하고 있는데</p></li>
<li><p>jeen__ : plenv 는 중간에 PATH 를 직접건드리지 않고 하고 있다고</p></li>
<li><p>jeen__ : perlbrew 에서 너무 많은 펄 버젼을 지원하기 위햇 어런저런 마법같은 구문들을 집어넣어서</p></li>
<li><p>jeen__ : 그걸 심플하게 하기 위해서 plenv 를 만들었다고</p></li>
<li><p>jeen__ : 테스트를 위해서 perlbrew switch 하지 않고</p></li>
<li><p>jeen__ : 좀 더 간단하게 가능하다고</p></li>
<li><p>jeen__ : plenv 를 production 에서 쓰는 건 필요이상의 오버헤드가 들어가서 스스로도 권장하지 않는다고</p></li>
<li><p>jeen__ : travis ci, dotcloud 도 perlbrew 를 사용하고 있</p>

<ul>
<li><a href="https://www.dotcloud.com">dotCloud - One home for all your apps</a></li>
<li><a href="https://travis-ci.org">Travis CI - Free Hosted Continuous Integration Platform for the Open Source Community</a></li>
</ul></li>
<li><p>jeen__ : .rvmrc 같은 표기처럼 해당 프로젝트 루트에서 버젼표기를 하는 방식으로 하는 게 편리하지 않은가 라든가</p></li>
<li><p>jeen__ : plenv 는 yapc::na 에서 발표할 예정이라고</p></li>
<li><p>jeen__ : perlbrew 쪽이 압도적으로 지명도가 높고, 문서도 별로고</p></li>
<li><p>jeen__ : 그래서 사용할 메리트가 별로 없으니</p></li>
<li><p>jeen__ : 문서에 집중하는 게 좋지 않겠느냐</p></li>
<li><p>jeen__ : plenv 는 이런 부분에서 압도적으로 좋다라는 부분이 없어서</p></li>
<li><p>jeen__ : 뭘 강조해야할지 망설이고 있다</p></li>
</ul>

<h3>YAPC::Asia Tokyo 2013</h3>

<ul>
<li>jeen__ : YAPC::Asia 이야기

<ul>
<li><a href="http://yapcasia.org/2013/05/yapcasia-2013-venue.html">YAPC::Asia 2013 会場を紹介します | YAPC::Asia Tokyo 2013</a></li>
</ul></li>
<li>jaker : 끝났나요?</li>
<li>jeen__ : 스피커 모집은 아무 문제가 없으면 내일 시작</li>
<li>jeen__ : 미역 뱅기 티켓 끊어야 되니까 빨리 뭐 해달라고</li>
<li>jeen__ : 4트랙으로 진행한다고 ㄷㄷㄷ</li>
<li>jeen__ : 여태껏 3트랙으로 했는데</li>
<li>jeen__ : 일수는 2일로</li>
<li>jeen__ : 전야제는 여느때처럼 하고</li>
<li>jeen__ : JPA 주최로 이번이 5회째</li>
<li>jeen__ : 흙</li>
<li>jeen__ : 누군가 해준다면 넘겨주고 싶다고</li>
<li>jeen__ : 컨퍼런스 운영자 모임에서 먹거리 얘기가 나와서..</li>
<li>jeen__ : 맥주랑 닭튀김은 있어야 된다고&hellip;</li>
<li>jeen__ : 매년 와인/일본주는 남는데</li>
<li>jeen__ : 맥주는 추가주문해야된다고</li>
<li>jeen__ : 모두들 감자튀김이랑 닭튀김이랑 맥주 정도만 있으면 되는 건 아닌가..</li>
<li>jeen__ : 동공대 스시 가 매우 좋았다고</li>
<li>jeen__ : 결혼식 피로연 하는 그런 공간이 있어서</li>
<li>jeen__ : 300명 정도 들어가고</li>
<li>jeen__ : 컨퍼런스 파티 참가비는 무료</li>
<li>jeen__ : 컨퍼런스 참가자는 1000명 목표</li>
<li>luzluna : 실시간번역 감사..</li>
<li>jeen__ : 작년이 860명이었으니</li>
<li>luzluna : 치맥은 어느나라를 가든 진리&hellip;</li>
<li>jeen__ : 941 가 말하기를 컨퍼런스를 확대하느냐 포커스를 맞춰서 집중하느냐</li>
<li>jeen__ : 하지만 아직 마키는 좀 더 확대노선으로 갔으면 한다고</li>
<li>jeen__ : 지금까지 오지 못한 사람들을 조금 더 오게 하도록</li>
<li>jeen__ : 미역이 미국의 Railsconf 에서는 1500명 정도 왔다고</li>
<li>jeen__ : 장소는 OSCON 과 같은 장소</li>
<li>jeen__ : 실제 사용규모는 절반</li>
<li>jeen__ : 트랙은 3-4 밖에 없어서</li>
<li>jeen__ : 제일 작은 방에 들어가도 한 방에</li>
<li>jeen__ : 200-300 들어가야 되니까</li>
<li>jeen__ : 니치한 이야기를 하기에는 좀 어려웠다고</li>
<li>jeen__ : 모두가 재미있어 하는 토크는 별로 재미있지 않다</li>
<li>jeen__ : 그래서 대상이 20-50명 정도로 하면 굉장히 재미있고 남은 참가자들의 모티베이션도 생긴다고</li>
<li>jeen__ : YAPC::ASIA 는 제일 큰곳은 450명 들어가는 곳이고, 작은 곳이 60명</li>
<li>jeen__ : YAPC::ASIA Closed Talk 같은 공간을 준비한다고</li>
<li>jeen__ : ㅋㅋㅋ</li>
<li>jeen__ : 뒷얘기 위주</li>
<li>jeen__ : 예전에 perl 관련 설문을 했는데</li>
<li>jeen__ : 의외인 부분은 의외로 많은 사람들이 perl6 얘기를 듣고 싶어한다</li>
<li>jeen__ : 그리고 레거시 시스템을 어떻게 끌고 가느냐</li>
<li>jeen__ : 그리고 관련 사례를 소개시켜줬으면 한다 라든가</li>
<li>jeen__ :미국쪽에는 그런 사례소개가 많았는데</li>
<li>jeen__ : 근데 레거시 관련 얘기는 미국에서는 별로 없어서</li>
<li>jeen__ : Big Data</li>
<li>jeen__ : 수치 계산</li>
<li>jeen__ : 이런 거 좀 해줬으면 한다고</li>
<li>jeen__ : 4-5년 전에는 Bio 에서 많이 썼는데</li>
<li>jeen__ : 이런 게 전부 Python 으로 가버린 거 같다고</li>
<li><p>jeen__ : USA Today 가 Perl 로 되어 있다고</p>

<ul>
<li><a href="http://www.usatoday.com">USA TODAY: Latest World and US News  - USATODAY.com</a></li>
</ul></li>
<li><p>jeen__ : 근데 YAPC::NA 라든가 이런 곳에서 사례 소개로 안나온다고</p></li>
<li><p>jeen__ : RubyKaigi 는 이번주 하는데</p></li>
<li><p>jeen__ : 더이상 규모를 확대하지 않고</p></li>
<li><p>jeen__ : 좀 더 참가비를 올리고</p></li>
<li><p>jeen__ : 진짜 오고 싶어하는 사람들을 오게 하겠다는데&hellip;</p></li>
<li><p>jeen__ : 전체 크기를 크게 해버리면 아무래도 예산관리가 힘들다고</p></li>
<li><p>jeen__ : 매번 장소 찾는 것도 피똥흘리면서 하고</p></li>
<li><p>jeen__ : 일본 국내 첫 영국식 허브 컨퍼런스 회장이라고&hellip;</p></li>
<li><p>jeen__ : YAPC::ASIA 는</p></li>
<li><p>jeen__ : 작년은 앉을 공간이 별로 없었는데</p></li>
<li><p>jeen__ : 올해는 좀 나아질 거 같다고</p></li>
<li><p>jeen__ : LTthon 트랙이라고 작년은 하루종일 LT 만 하는 트랙이 있었는데</p></li>
<li><p>jeen__ : 올해는 좀 힘들겠다고</p></li>
<li><p>skyloader : 앉아 있던 카페가 문닫아서 전 이만 이동..</p></li>
<li><p>jeen__ : 모두들 Perl 에 대한 사랑이 없고, Perl 커뮤니티에 대한 사랑만 있는 것인가&hellip;</p></li>
<li><p>jeen__ : 그래서 Perl 커뮤니티에서 딴 얘기만 하는 건 아닌가</p></li>
<li><p>jeen__ : …</p></li>
<li><p>jeen__ : RubyKaigi 에 가는 사람은 정말로 초 Ruby Lover인데</p></li>
<li><p>jeen__ : Perl 컨퍼런스는 Perl 아니고도 다른 거 많이 쓰고 그런 경우가 있어서</p></li>
<li><p>jeen__ : 거리감이 먼 것은 아닌가
skyloader has left IRC (Remote host closed the connection)</p></li>
<li><p>jeen__ : YAPC 말고 좀 더 Core 한 얘기를 하는 컨퍼런스가 좋지 않겠는가 하고</p></li>
<li><p>jeen__ : Hackathon 인가..</p></li>
<li><p>jeen__ : Official 로는 아직 YAPC Hackathon 은 못하고</p></li>
<li><p>jeen__ : 전날에 장소가 정해지거나</p></li>
<li><p>jeen__ : 그런 경우가 많아서&hellip;</p></li>
<li><p>jeen__ : QA Hackathon 에서는 50명 정도라면 대개 장소 정도는 빌릴 수 있지 않을까</p></li>
<li><p>jeen__ : NHN 이라든가, Mixi 라든가, DeNA 라든가 … 라고</p></li>
<li><p>jeen__ : Hallaway hackathon</p></li>
<li><p>jeen__ : 이라고 트랙에서 얘기듣지 않고</p></li>
<li><p>jeen__ : 밖에서 서로 떠들고 하는 게 있어서</p></li>
<li><p>jeen__ : 오히려 그런 공간을 마련해주는 것도 좋지 않겠는가 라고</p></li>
<li><p>jeen__ : 운영쪽에서 ~~한다가 아니라</p></li>
<li><p>jeen__ : 다른쪽에서 오히려 ~~한다!</p></li>
<li><p>jeen__ : 라고 정하고 덤벼들었으면 좋겠다고</p></li>
<li><p>jeen__ : 작년에는 NA 에서 토크 스트리밍을 했는데 , 작년 유러피언컵 보면서 NA 토크를 봤다고 (미역)</p></li>
<li><p>jeen__ : 대만의 OSDCTW 장소는  국제회의장이라서</p></li>
<li><p>jeen__ : 자리마다 마이크가 붙어있다고</p></li>
<li><p>jeen__ : 질문 있으면 버튼 누르고 마이크로 말하면 된다고&hellip;</p></li>
<li><p>jeen__ : 이번 YAPC::Asia 초청스피커인 pjf 는 생각 외로 커뮤니티에서 별로 유명하지 않다고</p></li>
<li><p>jeen__ : 그래도 발표는 재미있다나</p></li>
<li><p>luzluna : pjf가 누구에요?</p></li>
<li><p>jeen__ : <a href="http://yapcasia.org/2013/">http://yapcasia.org/2013/</a></p></li>
<li><p>hongbot : [YAPC::Asia Tokyo 2013] - <a href="http://yapcasia.org/2013/">http://yapcasia.org/2013/</a></p></li>
<li><p>jeen__ : autodie 만든사람이요</p></li>
<li><p>luzluna : 아..</p></li>
<li><p>jeen__ : 작년 White Camel Award</p></li>
<li><p>jeen__ : <a href="https://twitter.com/JEEN_LEE/status/338657107895259136">https://twitter.com/JEEN_LEE/status/338657107895259136</a></p></li>
<li><p>jeen__ : ㅋㅋㅋ</p></li>
<li><p>hongbot : JEEN_LEE: このpodcast、同時翻訳してるんですけど… #bulknews <a href="http://t.co/BGrK6qtBaX">http://t.co/BGrK6qtBaX</a></p></li>
<li><p>jeen_ : 방송 도중에 언급 ㅋㅋㅋㅋ</p></li>
</ul>

<blockquote class="twitter-tweet"><p>このpodcast、同時翻訳してるんですけど… <a href="https://twitter.com/search/%23bulknews">#bulknews</a> <a href="http://t.co/BGrK6qtBaX" title="http://twitter.com/JEEN_LEE/status/338657107895259136/photo/1">twitter.com/JEEN_LEE/statu…</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/338657107895259136">May 26, 2013</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Download Percona MySQL Expo 2013 Slides]]></title>
<link href="http://jeen.github.io/2013/05/25/download-percona-mysql-expo-2013-slides/"/>
<updated>2013-05-25T10:27:42+00:00</updated>
<id>http://jeen.github.io/2013/05/25/download-percona-mysql-expo-2013-slides</id>


      <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="ko"><p>Percona Live : MySQL Conference And Expo 2013 의 슬라이드를 다 긁어오는 스크립트 슥샥. 모두 60개정도. <a href="http://t.co/fpmNe0leud" title="http://www.percona.com/live/mysql-conference-2013/slides">percona.com/live/mysql-con…</a> <a href="https://t.co/32IBvl2KBk" title="https://gist.github.com/JEEN/5581298">gist.github.com/JEEN/5581298</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/334498408838598656">2013년 5월 15일</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<script src="https://gist.github.com/JEEN/5581298.js"></script>

<p><a href="http://metacpan.org/module/AnyEvent::HTTP::LWP::UserAgent">AnyEvent::HTTP::LWP::UserAgent</a> 의 SYNOPSIS 의 내용을 참고해서 그냥 한번 깨작거려 봤습니다.</p>

<p>대상이 되는 사이트는</p>

<ul>
<li><p><a href="http://www.percona.com/live/mysql-conference-2013/slides">http://www.percona.com/live/mysql-conference-2013/slides</a></p>

<p>입니다.</p>

<p>여기에 페이지가 3개 정도 되고, 사람 손으로 그 만한 슬라이드 파일들을 받아오는 건 시간의 낭비라는 생각인데…</p>

<p>물론 10일 전에 받아놓고 아직 제대로 슬라이드를 지긋하게 쳐다본 적은 없다는 것이 함정이라면 함정입니다.</p></li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using DBI Callbacks - Generate a SQLite file automatically]]></title>
<link href="http://jeen.github.io/2013/05/20/using-dbi-callbacks-generate-sqlite-file-automatically/"/>
<updated>2013-05-20T02:59:04+00:00</updated>
<id>http://jeen.github.io/2013/05/20/using-dbi-callbacks-generate-sqlite-file-automatically</id>
<category term="db" /><category term="perl" /><category term="sqlite" />

      <content type="html"><![CDATA[<p>이런저런 임시데이터를 주고받고 하는 용도로 SQLite 파일을 덩어리채로 주고받는 경우가 있습니다.</p>

<p>매일매일 그런 일이 일어나니 파일에는 날짜 정도는 집어넣어줘야 되구요.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>DROP TABLE IF EXISTS item;
</div><div class='line'>CREATE TABLE item (
</div><div class='line'>  id    INTEGER NOT NULL PRIMARY KEY,
</div><div class='line'>  name  VARCHAR(64),
</div><div class='line'>  price INTEGER,
</div><div class='line'>  maker VARCHAR(64),
</div><div class='line'>  created_at INTEGER
</div><div class='line'>);
</div><div class='line'>...</div></pre></td></tr></table></div></figure>

<p>대충 위와 같은 SQL 문을 이용해서 SQLite 파일안에 테이블도 만들어 줘야되고,</p>

<p>이런저런 데이터들도 넣어줘야 되겠죠.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ sqlite db/item.db3 &lt; sql/item.sql</div></pre></td></tr></table></div></figure>

<p>일단은 요렇게 SQLite 를 만들고…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ perl bin/generate_data.pl</div></pre></td></tr></table></div></figure>

<p>뭐 요런 식으로 <code>item.db3</code> 에 있는 테이블들에 데이터를 쑤셔넣고 보내는 식입니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>use MyApp::DB;
</div><div class='line'> </div><div class='line'>my $db = MyApp::DB->new({ connect_info => [
</div><div class='line'>    'dbi:SQLite:db/item.db3', "", "", {
</div><div class='line'>        PrintError => 1,
</div><div class='line'>        RaiseError => 1,
</div><div class='line'>        Callbacks => {
</div><div class='line'>            connected => sub {
</div><div class='line'>                my $conn = shift;
</div><div class='line'>                open my $fh, "&lt;", "sql/item.sql" or die "cannot found a sql file";
</div><div class='line'>                my $sqls = do { local $/; &lt;$fh> };
</div><div class='line'>                for (split /;\s+/, $sqls) {
</div><div class='line'>                    $conn->do($_);
</div><div class='line'>                }
</div><div class='line'>                return;
</div><div class='line'>            },
</div><div class='line'>        },
</div><div class='line'>    }
</div><div class='line'>]})
</div><div class='line'>….</div></pre></td></tr></table></div></figure>

<p>SQLite 의 경우는 Connection정보를 지정해서 해당 DB파일이 지정 디렉토리에 위치해있으면 그 파일을 참조하고,
없으면 0바이트의 파일을 만들어버립니다.</p>

<p>이때 DBI Callbacks 를 이용해서 연결되었을 시(connected), <code>sql/item.sql</code> 에 위치한 SQL 문들을 실행합니다.</p>

<p>DBI는 한 액션에 여러 SQL 문을 실행할 수 없기 때문에 &#39;;&#39; 를 구분자로해서 실행하면 각 쿼리별로 쪼개지게 됩니다.</p>

<p>그렇게 해서 별다른 SQLite 파일 생성에 따른 외부적인 액션이 없이 스크립트 실행시마다 만들어지게 됩니다.
(물론 저 위의 코드는 일부를 발췌해왔기 때문에 뭐 날마다 어쩌고 한다든가, 파일을 옮긴다든가 하는 부분의 코드는 생략했습니다)</p>

<p>위처럼 DBI Callbacks 나 DBI Subclassing 을 이용해서 프로파일링이나 쿼리로그 같은 다양한 모듈들이 존재하니,</p>

<p>그쪽도 한번 참고해보시면 도움이 되지 않을까 생각합니다.</p>

<h3>참고</h3>

<ul>
<li><a href="http://search.cpan.org/%7Etimb/DBI-1.611/DBI.pm#Callbacks_(hash_ref)">http://search.cpan.org/~timb/DBI-1.611/DBI.pm#Callbacks_(hash_ref)</a></li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Lancaster Consensus]]></title>
<link href="http://jeen.github.io/2013/05/04/lancaster-consensus/"/>
<updated>2013-05-04T08:16:34+00:00</updated>
<id>http://jeen.github.io/2013/05/04/lancaster-consensus</id>
<category term="article" /><category term="perl" /><category term="translate" />

      <content type="html"><![CDATA[<h1>Lancaster Consensus</h1>

<p>2008년 오슬로에서 개최된 첫번째 Perl QA Hackathon 에서는, Perl 의 품질관리와 툴체인에 관한 모듈의 저자, 메인테이너, 뜻 있는 사람들이 모여서, 몇가지 표준과 관행에 대해서 합의를 이뤘습니다. 이 때 발표된 합의는 Oslo Consensus 라는 이름으로 알려지게 되었습니다.</p>

<p>그로부터 5년인 지난 2013년, Perl QA Hackathon 에서는 5년전과 마찬가지로 여러 전문가들이 모여, 새로이 통일된 견해가 필요해진 몇몇 문제들에 대해서 논의하였습니다.</p>

<p>아래의 결정사항들은 이후의 방침을 나타내는 것이며, 경우에 따라서 구현에 걸리는 시간은 실제 작업을 희망하는 이들의 사정이나 희망자들이 나타날 지의 여하에 달려 있습니다.</p>

<h2>툴 체인과 테스트</h2>

<h3>최소지원 Perl 버젼</h3>

<p>앞으로 Perl 툴체인은 2003년 9월에 릴리즈된 <code>Perl 5.8.1</code> 을 대상으로 하게 됩니다. 이에따라서, 툴체인 모듈은 PerlIO나, Perl 5.8 에서 개선된 Unicode 지원을 안심하고 이용할 수 있게 됩니다.</p>

<p>또한, 5.8의 초기의 몇몇 릴리즈에서는 Unicode 관련 버그수정이 상당부분 이뤄졌기 때문에, 툴체인의 유지보수는 추후 최소버젼을 5.8.4 로 올리는 권리를 가지는 것으로 합니다(이는 Solaris 10 에 기본포함된 버젼).</p>

<h3>Pure Perl 로 빌드하도록 지정</h3>

<p>배포판에 따라서는 <code>XS</code> 버젼과 <code>Pure Perl</code> 버젼을 준비하고, <code>Makefile.PL</code> 이나 <code>Build.PL</code> 을 실행하는 단계에서 어느 것을 선택할 수 있도록 하는 것이 있습니다. 현시점에서는 이 배포판들은 각각의 독자적인 방법으로 유저에게 선택하게 하고 있기 때문에, CPAN 클라이언트나 그 외의 빌트 툴 쪽에서는 이 선택을 자동화시키고 싶은 유저의 욕구를 충족시켜줄 수 없는 상황이었습니다.</p>

<p>앞으로, <code>Makefile.PL</code> 과 <code>Build.PL</code> 의 스펙에서는, 아래처럼 <code>Pure Perl</code> 버젼만 빌드되도록 커맨드라인 옵션이 포함되게 됩니다.</p>

<ul>
<li><code>PUREPERL_ONLY=1</code> (<code>Makefile.PL</code>의 경우)</li>
<li><code>--pureperl-only</code> (<code>Build.PL</code>의 경우)</li>
</ul>

<p>이 옵션들은 다른 커맨드라인처럼, <code>PERL_MM_OPT</code> 또는 <code>PERL_MB_OPT</code> 같은 환경변수로 설정해도 됩니다.</p>

<p>배포판 저자는 이 옵션이 존재하는 경우, 설치할 모듈이 (직접, 또는 <code>Inline</code> 모듈을 통해서) <code>XS</code> 를 불러오거나 플랫폼 고유의 코드를 동적으로 생성하지 않아도 되도록 보증해야 합니다. 설치된 파일은 아키텍쳐가 달라도 Perl 버젼이 같다면(어플리케이션을 <code>fatpack</code> 한다든가) 다른 머신으로 복사해도 제대로 동작해야 합니다. 이 조건을 만족시킬 수 없는 경우 <code>Makefile.PL</code> 이나 <code>Build.PL</code> 은 에러로 종료되어야 합니다.</p>

<h3>테스트가 어떤 상황에서 실행되었는가(컨텍스트)를 지정하기 위한 환경변수</h3>

<p>Oslo Consensus 에서는 테스트할 때의 컨텍스트를 알리는 것으로 <code>AUTOMATED_TESTING</code> 과 <code>RELEASE_TESTING</code> 이라는 두가지 환경변수를 정의했지만, 그 중 <code>AUTOMATED_TESTING</code> 에 대해서는 쉽게 혼동되었습니다. 경우에 따라서는 &ldquo;유저와의 상호동작을 하지 않는다&rdquo; 라는 의미로 사용되거나 &ldquo;시간이 걸리는 테스트를 실행한다&rdquo; 라는 의미로 사용되어 왔기 때문입니다.</p>

<p>Lancaster 에서는 <code>Dist::Zilla</code> 와 같은 툴이 <code>AUTHOR_TESTING</code> 과 <code>RELEASE_TESTING</code> 을 지금 어떻게 구별하고 있는 지에 대해서도 (짧지만) 논의하였습니다.</p>

<p>배포판의 저자는 앞으로 아래와 같은 내용들을 따라야 합니다.</p>

<ul>
<li><code>AUTOMATED_TESTING</code>: 이 환경변수가 참일 경우, 테스트를 실행하고 있는 것은 어떤 자동 테스트 구조이고, 모듈을 설치하고 있지 않다는 것을 의미합니다. <code>CPAN Smoker</code> 는 이 환경변수를 참으로 해야합니다. 또, CPAN 클라이언트는 이 환경변수를 설정해서는 안됩니다.</li>
<li><code>NONINTERACTIVE_TESTING</code>: 이 환경변수가 참일 경우, 테스트 시에 유저와의 상호동작을 해서는 안됩니다. 테스트의 출력이 표시되지 않거나, 프롬프트에 응답이 돌아오지 않습니다.</li>
<li><code>EXTENDED_TESTING</code>: 이 환경변수가 참일 경우, 테스트를 실행하고 있는 유저 또는 프로세스는, 끝날 때까지는 불필요하게 시간이 걸리거나 리소스를 필요로하는 옵션으로 테스트를 실행할 계획이 있다 라는 것을 의미합니다. 단, 실행 시의 기능을 테스트하는 것만을 포함해야 합니다.</li>
<li><code>RELEASE_TESTING</code>: 이 환경변수가 참일 경우, 테스트는 릴리즈 시의 품질관리 프로세스의 일부로써 실행되어야 한다는 것을 의미합니다. CPAN 클라이언트는 이 환경변수를 설정해서는 안됩니다.</li>
<li><code>AUTHOR_TESTING</code>: 이 환경변수가 참일 경우, 테스트는 저자 개인적인 개발 프로세스의 일부로써 실행된다는 것을 의미합니다. 이런 테스트는 릴리즈 전에 실행되는 지는 알 수 없습니다. CPAN 클라이언트는 이 환경변수를 설정해서는 안됩니다. 배포판의 패키지(ppm, deb, rpm 등)도 이 환경변수를 설정해서는 안됩니다.</li>
</ul>

<p>이미 CPAN 에서는 이런 환경변수의 설정을 간단하게 사용할 수 있게끔 하는 라이브러리가 두가지 존재합니다.</p>

<ul>
<li><a href="http://metacpan.org/module/Test::Is">Test::Is</a></li>
<li><a href="http://metacpan.org/module/Test::DescribeMe">Test::DescribeMe</a></li>
</ul>

<p><code>CPAN Smoker</code> 나 통합 테스터는 자동 테스트를 수행한다는 것을 명시해야 합니다. 그리고 리소스에 따라 다르지만, 시간이 걸리는 테스트도 수행하도록 요구할 수 있습니다.</p>

<p>CPAN 클라이언트는 설정에 따라서 자유롭게 비상호적인 테스트나 시간이 걸리는 테스트를 수행할 수 있습니다.</p>

<p><code>CPAN Smoker</code> 나 클라이언트는 &ldquo;설정해서는 안되는&rdquo; 환경변수에 새로이 명시적으로 값이 설정되어 있는 경우, 그 값을 삭제하면 안됩니다.</p>

<h3>Build.PL 스펙의 수정</h3>

<p><em>David Golden</em> 과 <em>Leon Timmermans</em> 는 <code>Build.PL</code> 의 스펙책정에 힘써왔습니다. 이 스펙은 Build.PL 을 사용한 Perl 빌드 툴이 어떻게 동작해야 하는 가를 나타내는 것으로, 필연적으로 <code>Module::Build</code> 에 따르지만, 반드시 <code>Module::Build</code> 의 동작에 완전히 따라야 한다는 것은 아닙니다.</p>

<p>Lancaster 에서는 <code>.modulebuildrc</code> 의 사용법과 의미는 스펙에서 제외되어야 한다고 합의하였습니다.</p>

<h3>설치가 끝난 배포판의 데이터베이스</h3>

<p>QA Hackathon 의 프로젝트의 하나로 <code>packlist</code> 를 대체하는 어떠한 것을 만드는 것이 있습니다. 설치가 끝난 배포판의 데이터베이스가 있다면, 설치가 끝난 배포판의 간단한 목록이나 제거툴, 설치가 끝난 모듈의 의존그래프의 트래킹 등을 간단하게 할 수 있게 될 겁니다.</p>

<p>Lancaster 에서는 모듈은 수많은 다른 장소에서 설치될 것이기에 그런 데이터베이스는 <code>INC마다</code> 준비할 필요가 있다는 것과 <code>INC</code> 스스로 같은 동작으로 스택에 쌓아올릴 필요가 있다는 것에 합의하였습니다. 즉, <code>INC</code> 에 경로를 추가한다면 데이터베이스가 설치가 끝난 모듈은 변화할 것이라는 것입니다.</p>

<p>또, 이런 데이터베이스 시스템이 코어 이외의 의존모듈을 요구하는 일은 있어서는 안되지만, 권장되는 CPAN 모듈이 설치되어 있는 경우에 확장기능을 제공할 수 있을 것입니다.</p>

<p>그 외의 구현의 자세한 내용에 대해서는 시스템을 설계하는 사람에게 달려 있습니다.</p>

<h3>설치 후의 테스트</h3>

<p>Hackathon 참가자 안에는 모듈을 설치한 다음에도 그 모듈의 테스트를 실행할 수 있게 하는 시스템에 관심을 가지고 있는 사람들이 여럿 있었습니다. 예를들어 의존모듈을 업그레이드함으로써 모듈이 깨지지 않았는가 확인하거나, 전체 정합성을 테스트하기 위한 것입니다.</p>

<p>Lancaster 에서는 그런 테스트를 수행할 경우, 테스트 중에 배포판 안의 모든 파일을 이용할 수 있게 해야합니다. 즉, 테스트는 배포판의 tarball 이 있는 디렉토리에서 실행되지 않으면 안되는 것으로 합의하였습니다. 또, 그런 테스트는 <code>make test-installed</code> 나 <code>Build test-installed</code> 라는 새로운 <code>make</code> 혹은 <code>Build</code> 타겟을 사용해서 실행해야 합니다. 이 타겟들은 <code>make test</code> 나 <code>Build test</code> 에 해당하지만, <code>INC</code> 에는 <code>blib</code> 을 추가하지 않도록 해야 합니다. 그리고 <code>prove</code> 어플리케이션을 사용해서는 안됩니다.</p>

<p>또, 그런 테스트 시에는 <code>INC</code> 에 의한 모듈을 저장하거나 숨기는 방법도 존중할 필요가 있다는 것도 합의하였습니다. <code>PERL5LIB</code> 을 설정하면 &ldquo;설치된&rdquo; 배포판이 변할 가능성이 있고, 그에 따라서 어느 테스트가 실행되어야 하는지도 바뀔 수 있기 때문에 설치가 끝난 배포판의 데이터베이스와 연계할 것을 권장합니다.</p>

<p>그 외의 구현의 자세한 내용에 대해서는 배포판의 디렉토리 내용을 처음 설치할 때에 저장하거나, <code>CPAN/BackPAN</code> 에서 다시금 가지고 오는 것을 포함해서 시스템을 설계하는 사람에 달려 있습니다.</p>

<h2>META 파일의 스펙</h2>

<h3>&ldquo;provides&rdquo; 필드</h3>

<p><code>CPAN::Meta::Spec</code> 의 <code>provides</code> 필드는 &ldquo;file&rdquo; 키를 필수요소로 하고 있지만, 동적으로 생성되는 패키지의 경우, 그 의미가 명확하지 않았습니다. Lancaster 에서는 &ldquo;file&rdquo; 키는 그 패키지가 유래하는 배포판의 디렉토리 안에 있는 실제 파일을 참조해야야 한다고 합의하였습니다(그 파일이 <code>.pm</code> 파일이거나 <code>.PL</code> 파일이거나 또는 그 외의 동적으로 생성되는 파일인가 상관없이).</p>

<h3>&ldquo;conflicts&rdquo; 개선</h3>

<p>Lancaster 에서는 의존모듈 정보(prerequisite) 데이터에 포함된 <code>conflicts</code> 키의 이미 알려진 문제에 대해서도 몇가지 간단하게 의논하였습니다.</p>

<p>어찌되었든 대부분의 개발자가 원하는 것은, 어떤 특정 모듈을 설치하면 다른 특정 버젼의 모듈을 깬다고 알려져 있는(예를 들어 Foo 를 2.0 으로 업그레이드 하면 3.14 보다 낮은 모든 Bar 가 깨지는) 것을 나타내는 방법입니다.</p>

<p>이 문제의 개선에 흥미를 가지고 있는 쪽에서는, x_breaks 또는 유사 커스텀키를 사용하며, CPAN 클라이언트는 이를 지원하기 위한 패치를 받아서 프로토타입을 만드는 것을 권장합니다. 실전에서는 충분한 테스트가 끝났다면, 앞으로는 스펙의 버젼3의 후보가 될 수 있습니다.</p>

<h2>PAUSE 와 CPAN</h2>

<h3>PAUSE 에 있는 배포판 레벨의 데이터에 대한 장기적인 목표</h3>

<p>의논의 극점에 있는 PAUSE 의 몇가지 문제점으로부터 PAUSE 는 패키지(이름공간) 레벨의 인덱스나 권한 데이터 외에, &ldquo;배포판&rdquo; 레벨의 데이터도 유지할 필요가 있다는 것이 명확해졌습니다. 예를들어 지금은 배포판의 권한을 양도하면 모든 패키지의 권한을 양도해야 했지만, 그 대신에 배포판을 단위로 한 권한의 양도가 가능하게 됩니다.</p>

<p>Lancaster 에서는 이것은 장기적인 목표로 적절하다고 보고, 단기적으로는 눈 앞의 문제를 해결하기 위한 다른 제안을 구현하는 것으로 합의하였습니다.</p>

<h3>대문자/소문자를 구별하지 않는 패키지의 권한</h3>

<p>직접 의논된 것은 아니지만, 추가하고 싶은 내용으로 PAUSE 의 패키지 권한에 대해서는 간간히 대문자 소문자를 묻지 않게 될 예정입니다. 단, 대문자 소문자를 구별하지 않는 파일시스템에서는 설치된 경우에도 인덱스된 모듈은 확실하게 유니크하도록 대문자나 소문자는 보존될 예정입니다.</p>

<h3>배포판 이름의 규칙</h3>

<p>CPAN 에코 시스템에 속하는 웹 사이트나 툴의 대부분은 &ldquo;배포판이름&rdquo; 을 유니크한 식별자로 이용하고 있지만, 지금까지는 그것이 유니크하다는 것을 강제하는 것은 아무것도 없습니다. 유니크하지 않은 것을 허용하는 것은 얼마나 자주 말해도 혼란스럽지만, 최악의 경우는 보안적인 위험이 됩니다.</p>

<p>앞으로, <code>PAUSE</code> 에 업로드될 배포판의 배포판 안에 인덱스된 패키지 이름과 &ldquo;대응하는&rdquo; 이름을 가져야합니다. 또, 업로드할 사람은 그 패키지의 권한을 가져야 합니다. 그렇지 않으면, 배포판 전체가 인덱스되지 않습니다.</p>

<p>예를들어, <code>DAGOLDEN</code> 이 <code>Foo-Bar-1.23.tar.gz</code> 을 업로드 하는 경우, 배포판의 이름은 <code>Foo-Bar</code> 로, 그 배포판에는 인덱스 가능한 <code>Foo::Bar</code> 라는 패키지가 있어야 합니다.</p>

<p>CPAN 에는 이런 규칙에 따르지 않는 배포판이 1000건 정도 있지만, 이것들에 대해서는 새로운 규칙의 예외로 합니다. 단, 이 배포판들에 대해서도 배포판 이름을 바꾸거나, 새롭게 .pm 파일을 추가하거나 또는 내부적으로 적절한 이름의 패키지를 도입해서 표준에 맞추는 것을 권장합니다.</p>

<p>예를들어, <code>LWP</code>는 <code>libwww-perl-6.05.tar.gz</code> 로 릴리즈되지만, 만약 그 .pm 파일에 <code>package libwww::perl;</code> 이라는 것이 포함되어 있다면 그 패키지가 인덱스되어 표준에 따르게 됩니다.</p>

<p>기술적으로는 <code>provides</code> 필드를 사용하면 올바른 패키지이름을 <code>META.json</code> 파일의 안에서만 선언하는 것도 가능합니다. 그 경우 &ldquo;file&quot;의 값은 <code>META.json</code>　으로 해서, 그 패키지를 선언하는 파일이 <code>META.json</code> 이라는 것을 명시해야 합니다.</p>

<h3>폐기 모듈이나 협력이 필요한 모듈에 도장을 찍는다</h3>

<p>현시점에서는 에서는 CPAN 모듈의 저자가 사망한 경우, 그 사람의 모듈의 권한은 &quot;ADOPTME&quot;라는 가공의 저자에 양도됩니다. 그 모듈을 유지보수하고 싶은 희망자가 있다면, 손들고 나와서 하고 싶다고 요구할 수도 있습니다.</p>

<p>Lancaster 에서는 모듈이 폐기되거나 저자가 책임을 공유한 사람을 찾는 것을 나타내는 경우도 단기적으로는 같은 메커니즘을 사용해야 한다는 것에 합의하였습니다. 단, 저자가 없어진 경우와는 달리 이 경우들은 표시로써 &quot;공동유지보수자&rdquo; 의 권한을 사용해서, 원저자가 필요에 따라서는 그 표시를 삭제할 수 있게 할 예정입니다.</p>

<p>(장기적으로는 PAUSE에 배포판 레벨의 데이터 모델에 따라, 이 요구에 보다 직접적으로 대처할 수 있을 것이라고 기대하고 있습니다)</p>

<p>CPAN 검색 엔진등의 커뮤니티사이트에서는 이 퍼미션의 표시나 그에 관련된 의미를 이용해서 배포판의 상태를 전달해도 됩니다.</p>

<ul>
<li><code>ADOPTME(프라이머리의 경우)</code>: 이것은 일반적으로 저자가 죽었다는 것을 나타냅니다. 희망자는 <code>modules@perl.org</code> 경유로 인수를 요구할 수 있습니다.</li>
<li><code>ADOPTME(공동유지보수자의 경우)</code>: 이것은 응답이 없는 것을 확인한 저자를 나타냅니다. 커뮤니티는 패키지에 이 표시를 붙일 때에는 인수된 경우와 마찬가지로 (즉, 저자에게 여러번 연락을 취한 다음에, <code>modules@perl.org</code> 경유로 요구한다는) 룰에 따라 제안할 수 있습니다. 희망자는 <code>modules@perl.org</code> 경유로 <code>ADOPTME</code> 모듈 인수를 요구할 수 있습니다. 추가로 기다리는 시간은 필요없습니다.</li>
<li><code>HANDOFF(공동유지보수자의 경우)</code>: 이것은 저자가 영원히 주요 유지보수자의 역할을 다른 사람에게 넘기고 싶다는 것을 나타냅니다.</li>
<li><code>NEEDHELP(공동유지보수자의 경우)</code>: 이것은 저자가 모듈의 유지보수를 도와줄 사람을 찾고 있다는 것으로, 주요유지보수자인 것은 계속하려고 계획하고 있다는 것을 나타냅니다.</li>
</ul>

<p><code>ADOPTME</code> 에서 &ldquo;인수&quot;를 예외로해서 (이것은 <code>modules@perl.org</code> 를 통해야 합니다), CPAN 모듈의 저자는 이 공동유지 권한을 일반적인 PAUSE 인터페이스를 이용해서 관리해야 합니다.</p>

<p>또, CPAN 모듈의 저자는 PAUSE 관리자에게 요구가 있다면 즉시 권한을 양도해도 좋다는 것을 나타내기 때문에, 주요유지보수자 또는 공동유지보수자의 권한을 스스로 ADOPTME 에 양도해도 됩니다.</p>

<h3>PAUSE ID 자동등록</h3>

<p>역사적으로 PAUSE ID 는 수작업으로 승인되어 왔기에, 등록까지는 종종 꽤 시간이 걸리곤 했습니다. Lancaster 에서는 로봇이나 스팸에 대한 적절한 보호책을 가지고 있다는 전제를 가지고 PAUSE 는 자동승인 시스템으로 옮긴다고 합의하였습니다. 이것으로 PAUSE 도 다른 프로그래밍 언어의 저장소나 오픈 소스 커뮤니티의 사이트와 어깨를 나란히 할 수 있을 것입니다.</p>

<p>또, Lancaster 에서는 사용되지 않고, 활동의 흔적이 없는 <code>PAUSE ID</code> 는 일정기나 후 삭제해서 재이용할 수 있도록 한다라는 것에 합의하였습니다. 구체적으로 말하면, 과거에 몇번인가 업로드한 적이 있는 <code>PAUSE ID</code> 는 삭제해서는 안됩니다(BackPAN 에서는 그 PAUSE ID 에 연결된 파일이 존재하기 때문입니다). 또한 <code>PAUSE ID</code> 에 로그인(또는 <code>rt.cpan.org</code> 등의 프록시를 경유)한다면 충분히 활동의 흔적이 있다고 간주됩니다. 활동의 흔적이 없는 ID 도 PAUSE 에 로그인할 수 있도록 경고하는 메시지도 없이 삭제할 수는 없습니다.</p>

<h3>CPAN 배포판의 자동 클린업</h3>

<p>CPAN 상의 파일 중, 거의 절반 정도가 5년전의 것이지만, CPAN 모듈의 저자의 대부분은 낡은 배포판을 전혀 삭제하지 않습니다. CPAN 의 크기를 감당하기 위해서, Lancaster 에서는 어떤 조건을 가지고 옛 배포판은 자동적으로 삭제하도록 준비(그리고, 결과적으로 BackPAN 에만 보존하지 않도록 한다)하도록 합의하였습니다.</p>

<p>삭제 대상으로 선택되는 배포판은 적어도 3개의 안정판이 존재해야 합니다. 그 3개의 안정판 중 제일 낡은 것도 더 옛 배포판의 리비젼 중, 5년 전의 것으로 <code>02packages</code> 파일에 인덱스되지 않은 것은 모두 삭제하도록 준비하게 됩니다.</p>

<p>perl의 tarball 은 물론 모두 삭제 대상에서 제외됩니다.</p>

<p>삭제가 준비된 것은 일반적으로 저자에게 통보되며 삭제준비를 취소할 수 있도록 유예기간도 주어집니다.</p>

<p>클린업은 어떤 방법으로 PAUSE ID 가 대상이 된 순으로 수행하고, CPAN 모듈의 저자에게 빈번하게 삭제통지가 간다는 것을 피할 수 있도록 구현할 예정입니다.</p>

<h3>모듈 등록</h3>

<p>Lancaster 에서는 PAUSE 모듈 등록은 그 유용성을 거의 잃었다는 것에 합의하였습니다. 등록된 것은 일부의 CPAN 모듈이기 때문에 메타데이터(예를들어 &quot;DSLIP&rdquo;)의 총합제공원이 될 수 없고, 커버되는 정보도 대부분은 META 파일을 통해서 더욱 광범위하게 입수할 수 있기 때문입니다.</p>

<p>Lancaster 에서는 지금이라도 새로운 CPAN 모듈의 저자가 맨 처음 모듈을 등록하려고 할 때에 종종 피드백을 받는다는 이점이 남아있다는 것은 인정하지만, PrePAN 등의 다른 장소 쪽의 새로운 저자에게는 보다 경험을 제공할 수 있다고 생각하고 있습니다. 특히 PrePAN 은 1-2사람의 PAUSE 관리자에게 그치지 않는 커뮤니티의 참가가 있고, (메일링 리스트의 아카이브를 검색하지 않아도) 참고할 만한 예제를 풍부하게 제공하고 있습니다.</p>

<p>그 때문에 Lancaster 에서는 기존의 PAUSE 문서를 변경해서, 조언이 필요한 경우는 PrePAN 에 가도록 새로운 저자에게 (또는 경험을 가진 저자에게도) 안내한다는 것에 합의하였습니다.</p>

<p>가까운 시일안에 PAUSE 는 모듈 등록 데이터베이스를 CPAN 미러에 공개하는 것을 그만둘 예정입니다 ( 인덱스 파일이 있다는 것을 기대하는 CPAN 클라이언트를 부수지 않도록, 인덱스 파일은 남아 있지만, 내용은 비게 될 예정입니다). 평가기간이 끝났다면, 모듈 등록은 아마도 닫히고, 그 기능도 PAUSE 에서 제외될 예정입니다.</p>

<h3>Lancaster Consensus 의논에 참가한 사람들</h3>

<p>의논은 3일간에 걸쳐 다소 변경이 있지만, 매일 20명 정도가 의논에 참가하였습니다. 아래의 참가자들에게 감사의 말을 전합니다.</p>

<p>Andreas Konig, Barbie, Breno Oliveira, Chris Williams, Christian Walde, David Golden, Daniel Perrett, Gordon Banner, H. Merijn Brand, James Mastros, Jens Rehsack, Jess Robinson, Joakim Tormoen, Kenichi Ishigaki, Leon Timmermans, Liz Mattijsen, Matthew Horsfall, Michael Schwern, Olivier Mengue, Paul Johnson, Peter Rabbitson, Philippe Bruhat, Piers Cawley, Ricardo Signes, Salve J. Nilsen and Wendy van Dijk</p>

<p>(참가자로 리스트에서 빠진 사람이 있다면 dagolden at cpan dot org 로 메일을 하거나 pull request 를 보내면 추가하겠습니다)</p>

<h2>참고</h2>

<ul>
<li>원문 : <a href="https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md">https://github.com/Perl-Toolchain-Gang/toolchain-site/blob/master/lancaster-consensus.md</a></li>
<li>역자 : 이종진(JEEN_LEE)</li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Better Than Ack]]></title>
<link href="http://jeen.github.io/2013/05/02/better-than-ack/"/>
<updated>2013-05-02T14:14:14+00:00</updated>
<id>http://jeen.github.io/2013/05/02/better-than-ack</id>


      <content type="html"><![CDATA[<p>계속 쓰다보니 자연스레 손에 익은 이유도 있고, 여러 서버들에 <code>ack</code> 이 기본적으로 깔려 있지 않은 이유도 있습니다. 그것이 제게 있어서 <code>ack</code> 을 사용하지 않는 핑계가 되겠네요.</p>

<p>그런 현실중에 <code>ag</code> 를 소개하는 것은 조심스러울 따름입니다.</p>

<ul>
<li><a href="https://github.com/ggreer/the_silver_searcher">https://github.com/ggreer/the_silver_searcher</a></li>
</ul>

<p>위 github 페이지에서 확인할 수 있는 내용대로,</p>

<ul>
<li><code>ack</code> 보다 3-5배 빠르고</li>
<li>검색시에 <code>.gitignore</code>, <code>.hgignore</code> 를 참고하여 검색대상에서 제외해줍니다.</li>
<li>그리고 <code>ack</code> 보다 한글자 더 적은 노력으로 검색할 수 있습니다. :-)</li>
</ul>

<p>제 Github Pages Repo 안에 속한 1566 개의 파일을 대상으로 각각의 성능을 비교해봤습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ time ag Perl
</div><div class='line'>……
</div><div class='line'>……
</div><div class='line'>source.old/_posts/2012-08-28-building-a-perl-project-on-travis-ci.markdown
</div><div class='line'>11:`Travis CI`은 이전에 얘기를 들었을 때는 별  관심이 없었는데(처음에는 확실히 Perl 을 지원하지 않아서), 언제부턴가 Perl 을 지원한다는 얘기를 듣고 Perl 커뮤니티에서 움직임이 조금씩 있더라구요. `Dist::Zilla::TravisCI` 같은 모듈들도 나오는 걸로 봐서…
</div><div class='line'>15: - [Travis CI - Building a Perl Project](http://about.travis-ci.org/docs/user/languages/perl/)
</div><div class='line'>43:Perl may be copied only under the terms of either the Artistic License or the
</div><div class='line'>44:GNU General Public License, which may be found in the Perl 5 source kit.
</div><div class='line'>46:Complete documentation for Perl, including FAQ lists, should be found on
</div><div class='line'>48:Internet, point your browser at http://www.perl.org/, the Perl Home Page.
</div><div class='line'>……
</div><div class='line'>ag Perl  0.07s user 0.14s system 128% cpu 0.164 total</div></pre></td></tr></table></div></figure>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ time grep -R Perl .
</div><div class='line'>……
</div><div class='line'>./source.old/_posts/2012-12-26-a-usecase-of-app-fatpacker.markdown:  # ABSTRACT: Perl binding for Redis database
</div><div class='line'>……
</div><div class='line'>grep -R Perl .  1.13s user 0.09s system 77% cpu 1.573 total</div></pre></td></tr></table></div></figure>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ time ack Perl
</div><div class='line'>……
</div><div class='line'>public/page/5/index.html
</div><div class='line'>245:&lt;a href="http://jeen.github.io/2012/07/26/export-facebook-event-attending-list-perl-kr-teatime/">Export Facebook Event Attending List - Perl-kr TeaTime&lt;/a>
</div><div class='line'>……
</div><div class='line'>ack Perl  0.38s user 0.06s system 54% cpu 0.812 total</div></pre></td></tr></table></div></figure>

<p>보시다시피 <code>ag</code> 의 위력은 대단합니다. 기본적으로 사용법도 <code>ack</code> 과 크게 다를 것도 없습니다.</p>

<p>문제는 기본적으로 사용할 수 있냐는 것이겠는데… 요즘 세상에는 <code>Rex</code> 같은 걸로 그냥 뭐 한번만 수고해주면 뭐 사용할 서버들에 일괄적으로 설치하는 것은 일도 아니지 않냐라고 그냥 스스로 수긍해버리면 될 것 같습니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Rex Common Practice]]></title>
<link href="http://jeen.github.io/2013/04/28/more-rex/"/>
<updated>2013-04-28T18:32:00+00:00</updated>
<id>http://jeen.github.io/2013/04/28/more-rex</id>
<category term="perl" /><category term="rex" />

      <content type="html"><![CDATA[<h3>Parallelism 설정</h3>

<p>한 손에 셀 수 있을 정도의 서버규모라면 사실 특별하게 병렬처리를 하느니 하는 것은 별로 고려하지 않아도 되겠습니다만, 그 이상일 경우에는 한 작업을 수행함에 있어서 수십대의 서버에 순차적으로 접속하고 작업하고하는 것을 지켜보는 것은 상당히 고역이죠.
 이럴 경우에는 <code>parallelism</code> 을 지정합니다.</p>

<p>방법은 <code>Rexfile</code> 에 다음과 같이 설정합니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>parallelism => 10;</div></pre></td></tr></table></div></figure>

<p>이렇게 하면 한번에 10대의 서버에 대해서 병렬로 작업을 수행하게 됩니다. 어차피 작업은 원격지서버에서 하는 것이고, 로컬에서는 SSH 커넥션이 1개로 붙던 것들이 10개로 늘어나며, 물론 시간 또한 parallelism 설정갯수에 비례하게 됩니다. 하지만 로그는 이쁘게 남지는 않을 겁니다.</p>

<p>애시당초 CLI 옵션에 <code>parallelism</code> 옵션이 있었으면 좋겠는데&hellip;</p>

<h3>Logging</h3>

<p>일단 작업 기록은 꾸준히 남기는 것이 좋겠다라고 생각하는 바, 매 작업분기마다 로그를 남기도록 합니다. 하지만 매뉴얼에는 마땅히 로그에 관한 설명은 보이지 않는 것 같았습니다.</p>

<p>Rex 에서의 기본적인 로그를 쓰는 방법은 다음과 같습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>Rex::Logger::info("MSG"[, "TYPE"]);</div></pre></td></tr></table></div></figure>

<p>로그 메시지는 당연히 필수이며, TYPE 은 사실 안써도 됩니다만, error/warn 두가지 인수를 넣을 수 있습니다. 에러 상황시 확실하게 눈에 띄게 해주는 정도(노랑색, 빨강색)입니다.</p>

<p>Parallelism 사용시에 병렬로 작업을 수행함으로 인해서 로그가 뒤죽박죽이 되기 마련인데, 이때 로그에 명기해주었으면 하는 것은 역시 각 서버의 호스트/IP입니다.</p>

<ul>
<li><p><a href="https://metacpan.org/module/Rex::Logger">https://metacpan.org/module/Rex::Logger</a></p>

<p><code>Rex::Logger</code> 에서 다음과 같은 사용법을 통해서 해결할 수 있습니다.</p></li>
</ul>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$Rex::Logger::format = '%h - %D - %s';
</div><div class='line'># srv001 - 2012-04-12 18:35:12 - Installing package vim</div></pre></td></tr></table></div></figure>

<p>각 포맷에 대한 자세한 설명은 위의 Metacpan 링크에서 확인할 수 있습니다.</p>

<h3>CPAN 의존모듈 설치</h3>

<p>애시당초 처음에 Rex 를 사용하는 이유가 여러대의 서버에 CPAN 모듈을 설치해야할 필요가 있었기 때문이었습니다. 하지만 사용구조상 일일이 모든 서버에 대해서 <code>perlbrew</code> 를 설치한다거나, 하는 호화(?)를 누릴 수는 없었습니다. <code>perlbrew</code> 를 꺼내는 것 자체가 애시당초 핀트에 어긋나버리는 얘기가 되어버리지만… -_-;</p>

<p>뭐 네, 방법은 간단합니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>run("curl -L http://cpanmin.us | perl - --notest --mirror ftp://cpan.mirror.cdnetworks.com/CPAN/ --mirror-only Test::More LWP::UserAgent JSON Nagios::Plugin");</div></pre></td></tr></table></div></figure>

<p>애시당초 Rex 의 접근은 <code>root</code> 로 이뤄지기 때문에 이와같은 설정으로 그냥 땜박질 할 수 있었지만, <code>sudo</code> 로 접근한다거나 하는 예외상황에서는 <code>--sudo</code> 옵션을 붙여주면 되겠습니다. 물론 <code>root</code> 로 접근했을 때 <code>--sudo</code> 옵션은 쓰면 오동작의 원인이 됩니다.</p>

<p><code>--notest</code> 는 물론 수많은 서버가 동일 구성이며, 처음 커맨드로 때려보고 한방에 된다고 했을 때, 테스트가 불필요하다는 판단아래에서 집어넣었구요.</p>

<p>좀 더 속도개선을 노려본다면 <code>--mirror</code> 옵션을 통해서 <code>CDNetworks</code> 같은 CPAN Mirror 를 이용해보는 것도 괜찮을 것 같습니다. 눈에 띄는 속도향상을 체감할 수 있을 겁니다.</p>

<h3>결론</h3>

<p>어떤 일을 하기에 필요한 도구를 찾아서 사용하는 것이 일반적인 접근일텐데, 때로는 어떤 도구를 사용하기 위해서 일부러 일을 그쪽방향으로 맞추는 경우를 주변에서 많이 접하게 됩니다. 저는 어떻게해서 Rex 를 알고 사용하게 되었는지 이미 까먹었지만, 하는 일에 대한 최적의 선택이었다고 생각합니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Data::Printer vs Data::Dump(er)]]></title>
<link href="http://jeen.github.io/2013/04/08/data-printer-vs-data-dump-er/"/>
<updated>2013-04-08T12:59:00+00:00</updated>
<id>http://jeen.github.io/2013/04/08/data-printer-vs-data-dump-er</id>
<category term="perl" />

      <content type="html"><![CDATA[<p>여태껏 많은 Perl 코드에서 습관적으로 <code>Data::Dumper</code> 를 사용해왔습니다.</p>

<blockquote>
<p>안되면 찍어봐라</p>
</blockquote>

<p>라는 가장 기본적인 디버깅 방법론을 <code>Data::Dumper</code> 와 함께 해왔었죠. 물론 코어모듈이기때문에 별다른 모듈 설치없이 그냥 사용할 수 있는 점이 가장 큰 매력이었습니다.</p>

<p>단순한 데이터구조에서는 빛을 발하지만, 이런저런 데이터들이 서로 어우러지고 구겨지고 하는 구조에 한글과 같은 멀티바이트문자가 들어갔을 때는 사정없이 깨져버리는 문제가 있습니다. 물론 회피책도 있기는 하지만 매번 그러기도 쉽지가 않죠. 기존의 많은 <code>Data::Printer</code> 에도 언급되었다시피, <code>DBIx::Class</code> 오브젝트를 찍어보는 것에 매우 효과적입니다. <code>DateTime</code> 도 마찬가지 입니다. 이는 <code>DBIx::Class</code> 나 <code>DateTime</code> 을 <code>Data::Dumper</code> 로 찍어본 사람이라면 누구나 느껴봤을 법한 것이죠.</p>

<p>아무튼 그래서 <code>Data::Printer</code> 를 사용하기 시작했습니다. 현재 회사에서는 이전과는 달리 웹개발에 메인으로 Perl 을 사용하지 않고 주로 여러가지 배치작업이나 스크래핑 작업 용도로 사용하고 있어서 주로 사용하는 모듈을 그냥 처음부터 집어넣고 시작하고 있습니다.</p>

<p><img src="https://dl.dropboxusercontent.com/u/262117/blog-assets/screenshot-201304112.png" alt="https://dl.dropboxusercontent.com/u/262117/blog-assets/screenshot-201304112.png"></p>

<p>그리고 결정적으로 키와 값의 색 구분이라든가, 배열의 인덱스 번호를 좌르륵 이라든가, 한글이 안깨진다든가…</p>

<p>단점은 없는 게 아닙니다. 그러니까 좀 규모가 있는 데이터를 <code>Data::Printer</code> 로 덤프하면 그 나름대로 치장하는 시간이 좌르르륵 올라갑니다. 근데 뭐 그런 규모있는 데이터를 <code>Data::Printer</code> 로 뽑는 것 자체가 이상한 일이라 -_-;;</p>

<p>아 그리고 <code>Data::Printer</code> 의 <code>p</code> 함수는 기본적으로 인자를 기본형만 받을 수 있습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>p [{ a => 1 }]</div></pre></td></tr></table></div></figure>

<p>이라고 했을 때, </p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>Type of arg 1 to Data::Printer::p must be one of [@$%&]</div></pre></td></tr></table></div></figure>

<p>라는 에러메시지가 나옵니다.</p>

<p>아 그리고 <code>Data::Printer</code> 의 출력은 기본적으로 STDERR 로 나옵니다. 물론 뭐 하고 싶다면야 STDOUT 으로 지정할 수 있습니다.</p>

<ul>
<li><p><a href="https://metacpan.org/module/Data::Printer#Changing-output-targets">https://metacpan.org/module/Data::Printer#Changing-output-targets</a></p>

<p><code>Data::Printer</code> 와 함께 깔끔한 디버깅을&hellip;</p></li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using Rex - Environment]]></title>
<link href="http://jeen.github.io/2013/04/04/using-rex-environment/"/>
<updated>2013-04-04T12:28:00+00:00</updated>
<id>http://jeen.github.io/2013/04/04/using-rex-environment</id>
<category term="perl" /><category term="rex" />

      <content type="html"><![CDATA[<p>주위 사람들은 Chef나 Fabric 을 많이 쓴다고 하지만 ( 그보다 손으로 여전히 하는 사람들이 더 많은 것 같기도 ), Rex 에 그냥 적응하면서 여전히 <a href="http://rexify.org">Rex</a> 를 사용하고 있습니다. 회사를 옮기고 새로운 작업환경을 둘러보다가 이전의 패턴이 그대로 먹히지 않기에 기존에 사용하던 Rexfile 의 구조도 살며시 바꿔나가야 했습니다.</p>

<h2>Rex 초기 설정</h2>

<p>Rex 가 설치되어 있다면, <code>rexify</code> 커맨드를 사용할 수 있습니다. 이 커맨드를 이용해서 초기 뼈대를 만들어 봅니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ rexify M</div></pre></td></tr></table></div></figure>

<p>그러면 아래와 같은 구성으로 Rex 를 사용하기 위한 기본 구성이 마련됩니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ tree
</div><div class='line'>.
</div><div class='line'>├── Rexfile
</div><div class='line'>└── lib
</div><div class='line'>    └── M.pm</div></pre></td></tr></table></div></figure>

<p><code>Rexfile</code> 에는 온갖 설정 정보를 넣고, M.pm 에는 각 Task 를 정의해둡니다.</p>

<h2>서버 그룹 위의 또 다른 그룹을 정의한다?</h2>

<p>　지금까지는 서버의 목적, 그러니까 <code>DB</code> 서버 면 <code>DB</code> 그룹에 , <code>Web</code> 서버면 <code>Web</code> 그룹에 묶으면 되었는데요. 하지만 현재의 회사에서는 서비스그룹이 나뉘어져 있기도 하고, 계정정보도 좀 다르기도 하고 그런 게 있습니다. -_-;</p>

<p>그래서 <code>environment</code> 로 각 그룹을 묶어서 별도로 관리하기로 했습니다.</p>

<p>그런 것을 고려해서 써놓은 Rexfile 은 아래와 같습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>use Rex -feature => 0.40;
</div><div class='line'> </div><div class='line'>environment sdt => sub {
</div><div class='line'>    set user => "xxxx";
</div><div class='line'>    set password => "xxxxxx";
</div><div class='line'>    set -passauth;
</div><div class='line'> </div><div class='line'>    set group => "all" => qw/1.2.3.51 1.2.3.52 1.2.3.53 1.2.3.54 1.2.3.55 1.2.3.56/;
</div><div class='line'>    set group => "db"  => qw/1.2.3.53 1.2.3.54/;
</div><div class='line'>    set group => "web" => qw/1.2.3.51 1.2.3.52 1.2.3.55 1.2.3.56/;
</div><div class='line'>};
</div><div class='line'> </div><div class='line'>environment pshd => sub {
</div><div class='line'>    set user => "xxxx";
</div><div class='line'>    set password => "xxxxxxxx";
</div><div class='line'>    set -passauth;
</div><div class='line'>    set group => "all" => qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34 1.2.4.35 1.2.4.36/;
</div><div class='line'>    set group => "db"  => qw/1.2.4.35 1.2.4.36/;
</div><div class='line'>    set group => "web" => qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34/;
</div><div class='line'>};
</div><div class='line'> </div><div class='line'>require M;</div></pre></td></tr></table></div></figure>

<p>이렇게 <code>sdt</code> 와 <code>pshd</code> 라는 environment 를 따로 빼놓고 그 안에 각각 전체와 Web, DB 각각을 정의해둡니다.</p>

<p><code>M.pm</code> 에는 <code>restart-opsview-agent</code>, <code>restart-munin-node</code>, <code>restart-apache</code>, <code>deploy-apps</code> 같은 뭐 이런저런 Task 들이 정의되어 있다고 치고…</p>

<p>그런 것들을 각 environment 의 그룹단위로 실행시키도록 합니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ rex -E sdt -G all M:restart-opsview-agent</div></pre></td></tr></table></div></figure>

<p>위처럼 <code>-E</code> 의 인자값으로 environment 를 지정하고 <code>-G</code> 의 인자값으로 all 그룹을 지정해줌으로써, sdt 의 전체 서버에 대해서 <code>opsview-agent</code> 를 재시작하게끔 합니다.</p>

<h2>결론</h2>

<p>사실은 뭐 각 서버에 SSH Key 를 박아넣고 사용해야 좀 더 안심이 되기도 하지만, 여기에는 뜻모를 어른들의 사정이 숨어져 있는지라 쉽게 그럴수는 없기도 하답니다. -_-; 좀 더 시간을 두고 뭐 여러가지 불안요소와 편의성을 도모하기로 하고…</p>

<p>터미널 사용에 익숙하지 않은 팀원들을 위해서 <code>Rex::WebUI</code> 도 살며시 검토해봤는데, 아직까지는 Task 에 기재된 정보를 기준으로 읽어들이는 것 밖에 되지 않는지라… 위처럼 그룹을 지정하거나 environment 를 지정하거나 하는 것은 불가능하군요. 뭐 어차피 서버 데몬을 아무나 만지게 하고 그러는 것도 조심스러운 지라… -_-;; 꼭 모두가 써야하는 것인가 하는 의문이 있어서, 이건 뭐 전제자체가 붕괴되는 군요.</p>

<p>아무튼 Rex 괜찮습니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[cpanm 1.6 is here for you]]></title>
<link href="http://jeen.github.io/2013/02/28/cpanm-1-dot-6-is-here-for-you/"/>
<updated>2013-02-28T09:34:00+00:00</updated>
<id>http://jeen.github.io/2013/02/28/cpanm-1-dot-6-is-here-for-you</id>
<category term="cpanm" /><category term="perl" />

      <content type="html"><![CDATA[<p>엊그제 cpanm 1.6 이 릴리즈되었습니다. 그동안 개발버젼으로 1.6에 포함될 기능들이 일부 소개되어 왔지만, 아무튼 뭐 @miyagawa 씨가 친히 Screencast 까지 준비해서 소개할 정도로 많은 기능들이 추가되었습니다.</p>

<p><iframe width="560" height="315" src="http://www.youtube.com/embed/6Vglyf7X2S8" frameborder="0" allowfullscreen></iframe></p>

<h2>버젼지정 설치</h2>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm MIYAGAWA/Plack-1.0015.tar.gz</div></pre></td></tr></table></div></figure>

<p>위처럼 번거로운 버젼지정 설치방식이</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm Plack@1.0015</div></pre></td></tr></table></div></figure>

<p>이렇게 간단해졌습니다.</p>

<p>예전에 <code>Mail::Sender</code> 의 마이너버젼에 따라서 인코딩지정이 좀 엉망이 되어서 우회코드를 쓸 까 하다가</p>

<p>그냥 증상이 나타나기 이전버젼으로 땜빵으로 버티던 기억이 있습니다. (물론 해당 버젼의 동작이 이상해서 뭐 금방 업데이트 되었었지만…)</p>

<h2>개발버젼 설치</h2>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm --dev Plack</div></pre></td></tr></table></div></figure>

<p><code>--dev</code> 옵션을 이용하여 개발버젼의 모듈을 설치할 수 있습니다.</p>

<p>저같은 경우는 요즘 거의 개발버젼을 보고 사용하는 경우가 없어서 쓸 일은 없을 것 같습니다.</p>

<ul>
<li><p>버젼범위 지정</p>

<p>1.0000 이상 2.0000 미만의 Plack 모듈 설치</p></li>
</ul>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm Plack~">= 1.0000, &lt; 2.0000"</div></pre></td></tr></table></div></figure>

<p>1.0000 버젼의 Plack 설치 (<code>cpanm Plack@1.0000</code> 과 동일합니다.)</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm Plack~"== 1.0000"</div></pre></td></tr></table></div></figure>

<p>1.0000 이상이지만 1.0016 버젼은 제외한 가장 최신의 Plack 모듈 설치</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm Plack~">= 1.0000, != 1.0016"</div></pre></td></tr></table></div></figure>

<p>사실 <code>Makefile.PL</code> 에 의존모듈들을 넣었을 때 위와 같은 표기가 필요할 경우가 발생할 수 있겠습니다만, 대개의 경우는 특정 버젼만 지정해서 사용하는 경우가 많았기 때문에 어떨런지 잘 모르겠습니다. </p>

<h2>Git Repository 에서 받아서 설치</h2>

<p>몇몇 CPAN Author 들을 보면, CPAN 에 올릴 만큼 정비되지 않았다는 이유로 Github 에만 공개해놓는 경우를 많이 볼 수 있습니다. 몇번 그런 경우가 있었고, 일부러 다른 툴을 사용해서 Github 에서 CPAN Module 을 설치했던 기억도 있습니다. 이제부터 cpanm 이 이런 케이스를 지원해주니 다행이군요.</p>

<p>기본 브랜치를 설치</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git</div></pre></td></tr></table></div></figure>

<p>devel 브랜치를 설치</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git@devel</div></pre></td></tr></table></div></figure>

<p>특정 커밋내용이 적용된 부분을 설치</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git@730fbd0a80</div></pre></td></tr></table></div></figure>

<h2>결론</h2>

<p>perlbrew 에서 <code>perlbrew install-cpanm</code> 으로 설치된 cpanm 을 사용하고 있었는데,</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ cpanm --self-upgrade</div></pre></td></tr></table></div></figure>

<p>로는 perlbrew 를 통해서 설치된 cpanm 의 버젼이 바뀌지 않는군요. 그럴 경우는, </p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ perlbrew install-cpanm</div></pre></td></tr></table></div></figure>

<p>을 통해서 기존의 cpanm 을 덮어써서 설치할 수 있습니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[A usecase of App::Fatpacker - Nagios Plugin]]></title>
<link href="http://jeen.github.io/2012/12/26/a-usecase-of-app-fatpacker/"/>
<updated>2012-12-26T23:48:00+00:00</updated>
<id>http://jeen.github.io/2012/12/26/a-usecase-of-app-fatpacker</id>
<category term="perl" />

      <content type="html"><![CDATA[<p>최근 업무때문에 Nagios Plugin 을 만져야 하는 일들이 빈번하게 있었고, 앞으로도 발생할 소지가 상당히 높습니다. 이런 Nagios Plugin 을 만들거나 기존에 만들어 진 것들을 간편하게 다른 복수의 서버에 배포하는 일도 필요합니다.</p>

<p>Nagios Plugin 이야 굳이 언어를 가리지 않는다고 치더라도, 언어의 특정 라이브러리에 의존을 가지는 경우가 많습니다. MongoDB 용 Nagios Plugin 에는 Python 의 pymongo 라이브러리를 설치해야하는 경우가 있지요.</p>

<p>일례로 Redis 용 Nagios Plugin 을 설치할 시에는 Redis CPAN 모듈을 필요로 합니다. 그런데 Redis 서버가 여러대이고, 이 여러대의 서버에 매번 Redis 모듈을 깔고, Redis 모니터링용 Nagios Plugin 도 설치를 해야하는 경우가 있습니다. 그냥 뭐 시간을 좀 허비해서라도 그렇게 번거로운 일을 하면 일이야 끝나겠지만, 현인(@aer0 님)의 조언을 빌어서 <a href="http://metacpan.org/module/App::FatPacker">App::FatPacker</a> 를 사용해서 단일 스크립트에 우겨넣는 방향으로 돌리도록 합니다.</p>

<p>우선은 <code>App::FatPacker</code> 를 설치하면 <code>fatpack</code> 이라는 커맨드를 사용할 수 있습니다.</p>

<p><a href="http://exchange.nagios.org">Nagios Exchange</a> 에서 찾아낸 <a href="http://exchange.nagios.org/directory/Plugins/Databases/check_redis-2Epl/details">check_redis</a> 중에 <code>check_redis.pl</code> 파일이 위에 말한대로 Redis 모듈에 의존이 걸린 상황입니다.</p>

<p>그럼 우선 <code>fatpack</code> 커맨드로 다음과 같이 입력을 합니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>fatpack trace check_redis.pl
</div><div class='line'>check_redis.pl syntax OK
</div></pre></td></tr></table></div></figure>

<p>결과 <code>syntax OK</code> 가 뜨고 해당 디렉토리에 <code>fatpacker.trace</code> 라는 파일이 생성됩니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>cat fatpacker.trace
</div><div class='line'>IO/Handle.pm
</div><div class='line'>List/Util.pm
</div><div class='line'>Getopt/Long.pm
</div><div class='line'>SelectSaver.pm
</div><div class='line'>IO/Socket.pm
</div><div class='line'>Fcntl.pm
</div><div class='line'>Text/ParseWords.pm
</div><div class='line'>Symbol.pm
</div><div class='line'>Scalar/Util.pm
</div><div class='line'>IO/Socket/INET.pm
</div><div class='line'>Errno.pm
</div><div class='line'>fields.pm
</div><div class='line'>warnings/register.pm
</div><div class='line'>Encode/Alias.pm
</div><div class='line'>Time/HiRes.pm
</div><div class='line'>Encode/Config.pm
</div><div class='line'>Encode/Encoding.pm
</div><div class='line'>Redis.pm
</div><div class='line'>Encode.pm
</div><div class='line'>base.pm
</div><div class='line'>Config.pm
</div><div class='line'>IO.pm
</div><div class='line'>IO/Socket/UNIX.pm
</div><div class='line'>Carp.pm
</div><div class='line'>bytes.pm
</div><div class='line'>Exporter/Heavy.pm
</div><div class='line'>vars.pm
</div><div class='line'>constant.pm
</div><div class='line'>Socket.pm
</div><div class='line'>Try/Tiny.pm
</div><div class='line'>IO/Select.pm
</div><div class='line'>overload.pm
</div><div class='line'>lib.pm
</div><div class='line'>DynaLoader.pm
</div><div class='line'>Data/Dumper.pm
</div></pre></td></tr></table></div></figure>

<p>내용을 보면 말 그대로 해당 모듈이 가지고 있는 의존 모듈이 좌르르륵 표시됩니다. 물론 걔중에는 Core 모듈도 있기도 합니다.</p>

<p>일단 <code>App::FatPacker</code> SYNOPSIS 대로 진행을 해보면…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>fatpack packlists-for <span class="sb">`</span>cat fatpacker.trace<span class="sb">`</span>  &gt; packlists
</div></pre></td></tr></table></div></figure>

<p>위 결과로 생긴 <code>packlists</code> 는 파일은 다음과 같은 내용을 가집니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>cat packlists
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/5.14.0/x86_64-linux-thread-multi/auto/Time/HiRes/.packlist
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Redis/.packlist
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Try/Tiny/.packlist
</div></pre></td></tr></table></div></figure>

<p>각 의존 모듈 위치에 맞춰서 <code>.packlist</code> 파일이 생성되고, 그 내용은…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>cat /home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Redis/.packlist
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis.pm
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis/Hash.pm
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis/List.pm
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis.3
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis::Hash.3
</div><div class='line'>/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis::List.3
</div></pre></td></tr></table></div></figure>

<p>위와 같습니다.</p>

<p>그리고 다음 커맨드를 입력해봅니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>fatpack tree <span class="sb">`</span>cat packlists<span class="sb">`</span>
</div></pre></td></tr></table></div></figure>

<p>그 결과 현재 디렉토리에서 <code>fatlib</code> 이라는 디렉토리가 생성되고 그 안에 관련 의존모듈들이 복사됩니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>tree
</div><div class='line'>…
</div><div class='line'>├── fatlib
</div><div class='line'>│   ├── Redis
</div><div class='line'>│   │   ├── Hash.pm
</div><div class='line'>│   │   └── List.pm
</div><div class='line'>│   ├── Redis.pm
</div><div class='line'>│   ├── Try
</div><div class='line'>│   │   └── Tiny.pm
</div><div class='line'>│   └── x86_64-linux-thread-multi
</div><div class='line'>│       ├── Time
</div><div class='line'>│       │   └── HiRes.pm
</div><div class='line'>│       └── auto
</div><div class='line'>│           └── Time
</div><div class='line'>│               └── HiRes
</div><div class='line'>│                   ├── HiRes.bs
</div><div class='line'>│                   └── HiRes.so
</div><div class='line'>…
</div></pre></td></tr></table></div></figure>

<p>그럼 다음 커맨드를 입력해보면…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span><span class="o">(</span>fatpack file; cat check_redis.pl <span class="o">)</span> &gt; check_redis.packed.pl
</div><div class='line'>Can<span class="err">&#39;</span>t stat /home/jeen/fp/tt/lib: 그런 파일이나 디렉터리가 없습니다
</div><div class='line'> at /home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/App/FatPacker.pm line 200
</div><div class='line'>BEGIN failed--compilation aborted at /home/jeen/perl5/perlbrew/perls/perl-5.14.0/bin/fatpack line 3.
</div></pre></td></tr></table></div></figure>

<p>제대로 동작하지 않습니다. 에러가 발생하네요. 정답은 에러메시지에 있습니다. <code>App::FatPacker</code> 자체는 Perl Library 규칙에 정형화된 디렉토리 구조를 가정하고 있습니다. 즉 <code>lib</code> 디렉토리가 존재하지 않기 때문에 발생하는 것이죠. 뭐 물론 다운받은 <code>check_redis.pl</code> 파일 하나만 있는 데 <code>lib</code> 디렉토리를 가지고 뭐 더 넣고 자시고 할 것도 아닌데…, 그래도 뭐 일단 사태해결을 위해서 아무것도 없어도 그냥 <code>lib</code> 디렉토리 하나는 만들어 줍니다.</p>

<p>그리고 다시 실행해보면 <code>check_redis.packed.pl</code> 이라는 파일이 생성됩니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'> <span class="c1"># This chunk of stuff was generated by App::FatPacker. To find the original</span>
</div><div class='line'> <span class="c1"># file&#39;s code, look for the end of this BEGIN block or the string &#39;FATPACK&#39;</span>
</div><div class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</div><div class='line'><span class="k">my</span> <span class="nv">%fatpacked</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="nv">$fatpacked</span><span class="p">{</span><span class="s">&quot;Redis.pm&quot;</span><span class="p">}</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="s">&#39;REDIS&#39;</span><span class="p">;</span>
</div><div class='line'>  <span class="nb">package</span> <span class="n">Redis</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'>  <span class="c1"># ABSTRACT: Perl binding for Redis database</span>
</div><div class='line'>  <span class="k">our</span> <span class="nv">$VERSION</span> <span class="o">=</span> <span class="s">&#39;1.955&#39;</span><span class="p">;</span> <span class="c1"># VERSION</span>
</div><div class='line'>  <span class="k">our</span> <span class="nv">$AUTHORITY</span> <span class="o">=</span> <span class="s">&#39;cpan:MELO&#39;</span><span class="p">;</span> <span class="c1"># AUTHORITY</span>
</div><div class='line'>  <span class="err">…</span>
</div></pre></td></tr></table></div></figure>

<p>일단 Nagios Plugin 은 기본 실행권한을 가지는 파일로 해두는 것이 여러모로 편합니다. 한가지 주의할 점은 일단 위처럼 생성된 파일에서 shebang line 이 존재하지 않기때문에 shebang line 을 추가해주면 됩니다. :-)</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'> <span class="c1">#!/usr/bin/env perl</span>
</div></pre></td></tr></table></div></figure>

<p>위의 내용을 <code>check_redis.packed.pl</code> 파일의 첫째줄에 추가해줍니다.</p>

<p>그리고 완성된 파일들을 Redis 서버에 붙여서 <code>check_nrpe</code> 등으로 동작을 확인하고 설정에 추가하는 것으로 관련된 작업은 끝이 났습니다.</p>

<p>파일 중앙배포와 관련해서도 다양한 이슈가 있지만 이에 관련해서는 추후 <code>Rex</code> 를 다루면서 이야기를 계속할 까 합니다.</p>

<p>다 쓰고 나서 검색을 해보니 예전에 @aer0 님께서 작성하신 블로그 기사가 있군요.</p>

<ul>
<li><a href="http://aero2blog.blogspot.kr/2010/09/perl-appfatpacker.html">Perl 스크립트에 필요한 모듈 같이 넣기 App::FatPacker</a></li>
</ul>

<p>덩달아서 같이 참고하시면 좋을 것 같습니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Download package dir/files from Directory Index]]></title>
<link href="http://jeen.github.io/2012/11/29/download-package-dir-slash-files-from-directory-index/"/>
<updated>2012-11-29T20:10:00+00:00</updated>
<id>http://jeen.github.io/2012/11/29/download-package-dir-slash-files-from-directory-index</id>
<category term="linux" />

      <content type="html"><![CDATA[<p>최근에 모 오픈소스의 패키지 리포지트리가 조만간 닫힐 것이라는 뉴스가 있어서… 만일을 위해 거기 있는 패키지 파일들을 일단 긁어오기로 했습니다. -_-;</p>

<p>그래서 크롤러를 하나 만들까 하다가… 이런 류의 작업은 뭔가 만들어 놓은 툴이 있을 것이라는 생각에 이리저리 뒤져보고 찾아봤지만 마땅한 키워드를 얻지 못했습니다.</p>

<p>결국 지인들에게 수소문해본 결과 아래와 같은 커맨드를 통해서 Directory Index 구조를 취하는 페이지에서 파일들을 몽땅 긁어올 수 있다는 걸을 알게되었습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>wget -e <span class="nv">robots</span><span class="o">=</span>off -k -r --no-parent --wait<span class="o">=</span>5 http://download.virtualbox.org/virtualbox/debian/
</div></pre></td></tr></table></div></figure>

<p><code>index.html</code> 등의 불필요한 파일들도 같이 다운로드 되기도 하지만… 일단 다 받고나서…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>find . | grep index.html | xargs rm
</div></pre></td></tr></table></div></figure>

<p>으로 삭제…</p>

<p>그리하여 조만간 끊어질지도 모르는 사태에 대비코자 미리 이렇게 준비를 끝냈습니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[.proverc for less typing]]></title>
<link href="http://jeen.github.io/2012/11/26/proverc-for-less-typing/"/>
<updated>2012-11-26T21:44:00+00:00</updated>
<id>http://jeen.github.io/2012/11/26/proverc-for-less-typing</id>
<category term="perl" /><category term="test" />

      <content type="html"><![CDATA[<ul>
<li><a href="http://jeen.github.com/blog/2012/11/21/using-test-pretty/">http://jeen.github.com/blog/2012/11/21/using-test-pretty/</a></li>
</ul>

<p>그러고보니 앞전에 쓴 글에서</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>prove -Ilib -Pretty -v -lr
</div></pre></td></tr></table></div></figure>

<p>요렇게 길게 쓰고 있었는데, 문서도 제대로 안보고 이래저래 옵션들을 갖다붙이다보니 돌이켜보면 참 부끄럽기 그지 없습니다.</p>

<ul>
<li><a href="https://metacpan.org/module/prove#OPTIONS">https://metacpan.org/module/prove#OPTIONS</a></li>
</ul>

<p>위의 prove 문서를 참고로해서 제가 무엇을 잘못했는지 다시 한번 돌이켜봤습니다.</p>

<h3>-Ilib 과 -l 은 같다.</h3>

<p>그러니까 위에서는 <code>-Ilib</code> 과 <code>-lr</code> 로 같이 쓰고 있었는데 -_-;;</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>-l,  --lib             Add 'lib' to the path for your tests (-Ilib).</div></pre></td></tr></table></div></figure>

<p><code>-l</code> 로 단순히 줄여서 표현할 수 있습니다. 해당 옵션이 무엇인지도 모르고 그냥 붙여쓰고 있었다니&hellip;</p>

<h3>타이핑횟수를 줄인다.</h3>

<p>그러니까 매번 테스트할 때마다</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ prove -Pretty -lvr</div></pre></td></tr></table></div></figure>

<p>이렇게 쓰기 참 번거롭지요.</p>

<p>그러고보니 해당 프로젝트 루트아래에 <code>.proverc</code> 를 만들어서 사용하는 방법이 있었습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>-l
</div><div class='line'>-v
</div><div class='line'>-r
</div><div class='line'>-Pretty</div></pre></td></tr></table></div></figure>

<p>이렇게 해두면 이제 앞으로는</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ prove</div></pre></td></tr></table></div></figure>

<p>만으로 위의 옵션을 활성화한 채로 테스트를 동작시킬 수 있습니다.</p>

<h3>결론</h3>

<p>똑같은 일을 3번, 4번하다 보면 가끔 내가 뭐하는 짓인가 하는 생각이 들 때가 있는데… 좀 더 빨리 깨달았으면 좋았을 것을 이라는 생각을 그때마다 하게 됩니다.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Using Test::Pretty]]></title>
<link href="http://jeen.github.io/2012/11/21/using-test-pretty/"/>
<updated>2012-11-21T22:40:00+00:00</updated>
<id>http://jeen.github.io/2012/11/21/using-test-pretty</id>
<category term="perl" /><category term="test" />

      <content type="html"><![CDATA[<p>사실 <code>TAP</code> 의 결과자체는 그렇게 이쁘장하지 않습니다.
  이전에 <code>NHN Deview 2012</code> 에서 <code>Mocha</code> 로 돌렸을 때 나오는 이쁨직한 테스트 결과를 보고, </p>

<blockquote>
<p>아, 저러면 왠지 테스트코드 쓰고, 돌릴 만하겠다</p>
</blockquote>

<p>라는 뻘생각이 들었습니다. 하지만 전 테스트코드를 그렇게 용의주도하게 쓰지 않는 편이어서 그냥 다른 세상 이야기라고 넘겼습니다.</p>

<p>그러는 와중에 일본의 Perl IRC 채널에서 <code>Test::*</code> 와 <code>TAP</code> 등에 대한 여러가지 회의론(?) 같은 이야기가 들려오다가 <code>BDD</code> 나 테스트 결과 자체가 하나의 <code>Spec</code> 으로 재이용되는 등의 이야기를 듣고는 많이 감화되었죠.</p>

<p>그러는 중에 @tokuhirom 씨가 최근에 내놓은 <code>Test::Pretty</code> 와 <code>Test::Ika</code> 라는 모듈이 등장했습니다.</p>

<ul>
<li><a href="http://metacpan.org/module/Test::Pretty">Test::Pretty</a></li>
<li><a href="http://metacpan.org/module/Test::Ika">Test::Ika</a></li>
</ul>

<p><code>Test::Ika</code> 의 경우는 Perl5 용 <code>BDD</code> Framework 의 자리를 노리는 그런 모듈입니다만.. 현재의 버젼(<code>0.02</code>)에서는 생각대로 결과가 나와주지 않기에 조금 아쉬웠습니다.</p>

<p>그게 <code>describe</code>, <code>it</code> 등의 <code>BDD</code> 에서 사용하는 구문을 사용하고 있지만, <code>Test::Mojo</code> 처럼 <code>Test::More</code> 를 래핑한 모듈에서 사용할 때라든가… 좀 많이 아쉬운 장면들이 아직 있습니다. 뭐 물론 만든 지 얼마 안되기도 하고 그런 의미에서는 전도유망하다고할까요 :-)</p>

<p><code>Test::Pretty</code> 의 경우는 크게 이를 고려하지 않고도 흔히  사용하는 <code>Test::More</code> 로  테스트코드를 쓰고, <code>prove</code> Plugin 으로 동작합니다. 이름 그대로 결과를 이쁘게 보여준다는 것이죠.</p>

<p>다음처럼 말이죠.</p>

<h3>일반적인 TAP 형식의 출력</h3>

<p><img src="https://lh5.googleusercontent.com/-trTeNFoXQtU/UKzc4yghokI/AAAAAAAACFY/zaEbENGNHOQ/test-pretty-01.png" alt="일반적인 TAP 형식"></p>

<h3>Test::Pretty 를 이용한 출력</h3>

<p><img src="https://lh3.googleusercontent.com/-okmAPP0EmC8/UKzc74KHsYI/AAAAAAAACFg/rthGC2gQn_E/test-pretty-02.png" alt="Test::Pretty 를 이용한 출력"></p>

<h3>어떻게 실행을?</h3>

<p>Pretty 형식으로는 단일파일만 나오고, 전체 테스트코드를 한번에 돌렸을 때는 위처럼 나오지 않기에 왜 그럴까 고심해보다가 아래처럼 테스트코드를 실행하면 제대로 동작하는 것을 확인했습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>$ prove -Ilib -Pretty -v -lr </div></pre></td></tr></table></div></figure>

<h3>결론</h3>

<p>JS 테스트 프레임워크인 <a href="http://visionmedia.github.com/mocha/">Mocha</a> 를 들여다 봤는데 여러모로 베껴왔으면 하는 그런 세련됨이 있네요. :-)</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Building a perl project on Travis CI]]></title>
<link href="http://jeen.github.io/2012/08/28/building-a-perl-project-on-travis-ci/"/>
<updated>2012-08-28T14:25:00+00:00</updated>
<id>http://jeen.github.io/2012/08/28/building-a-perl-project-on-travis-ci</id>
<category term="ci" /><category term="perl" /><category term="travisci" />

      <content type="html"><![CDATA[<ul>
<li><a href="http://travis-ci.org/">Travis CI - Distributed build platform for the open source community</a></li>
</ul>

<p><code>Travis CI</code>은 이전에 얘기를 들었을 때는 별  관심이 없었는데(처음에는 확실히 Perl 을 지원하지 않아서), 언제부턴가 Perl 을 지원한다는 얘기를 듣고 Perl 커뮤니티에서 움직임이 조금씩 있더라구요. <code>Dist::Zilla::TravisCI</code> 같은 모듈들도 나오는 걸로 봐서…</p>

<p>사용하는 방법은 아주 간단합니다. <code>Github</code> 계정에 연결되고, 그리고 Github 의 Public 상태의 프로젝트를 고르고… 그 프로젝트에 <code>.travis.yml</code> 파일을 놓아주면 됩니다.</p>

<ul>
<li><a href="http://about.travis-ci.org/docs/user/languages/perl/">Travis CI - Building a Perl Project</a><br></li>
</ul>

<p>자세한 건 위의 설명페이지를 참고해서 이전에 살짝 만들어 놓은 <code>Zamakist</code> 를 <code>Travis CI</code> 에서 돌려보게 해봤습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-EUnpasmILzs/UDxYWf7j2WI/AAAAAAAACBg/y1EdG7zFKopng" alt="img-failed"></p>

<p>처음에야 뭐 물론 <code>.travis.yml</code> 파일이 없어서 실패했다는 메일이 날라왔구요.</p>

<p><code>.travis.yml</code> 을 추가해준 결과로는 다시 이렇게 제대로 돌아간다는 메일이 옵니다.</p>

<p><img src="https://lh5.googleusercontent.com/-ub5BrJZrXPw/UDxYT_Xl7JI/AAAAAAAACBY/CtHCGYNaJcpng" alt="Img1"></p>

<p><code>Travis CI</code> 에서 출력되는 빌드 내용은 아래와 같습니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div><div data-line='20' class='line-number'></div><div data-line='21' class='line-number'></div><div data-line='22' class='line-number'></div><div data-line='23' class='line-number'></div><div data-line='24' class='line-number'></div><div data-line='25' class='line-number'></div><div data-line='26' class='line-number'></div><div data-line='27' class='line-number'></div><div data-line='28' class='line-number'></div><div data-line='29' class='line-number'></div><div data-line='30' class='line-number'></div><div data-line='31' class='line-number'></div><div data-line='32' class='line-number'></div><div data-line='33' class='line-number'></div><div data-line='34' class='line-number'></div><div data-line='35' class='line-number'></div><div data-line='36' class='line-number'></div><div data-line='37' class='line-number'></div><div data-line='38' class='line-number'></div><div data-line='39' class='line-number'></div><div data-line='40' class='line-number'></div><div data-line='41' class='line-number'></div><div data-line='42' class='line-number'></div><div data-line='43' class='line-number'></div><div data-line='44' class='line-number'></div><div data-line='45' class='line-number'></div><div data-line='46' class='line-number'></div><div data-line='47' class='line-number'></div><div data-line='48' class='line-number'></div><div data-line='49' class='line-number'></div><div data-line='50' class='line-number'></div><div data-line='51' class='line-number'></div><div data-line='52' class='line-number'></div><div data-line='53' class='line-number'></div><div data-line='54' class='line-number'></div><div data-line='55' class='line-number'></div><div data-line='56' class='line-number'></div><div data-line='57' class='line-number'></div><div data-line='58' class='line-number'></div><div data-line='59' class='line-number'></div><div data-line='60' class='line-number'></div><div data-line='61' class='line-number'></div><div data-line='62' class='line-number'></div><div data-line='63' class='line-number'></div><div data-line='64' class='line-number'></div><div data-line='65' class='line-number'></div><div data-line='66' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'>Using worker: ppp3.worker.travis-ci.org:php-1
</div><div class='line'> </div><div class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/builds
</div><div class='line'><span class="nv">$ </span>git clone --depth<span class="o">=</span>100 --quiet git://github.com/JEEN/p5-App-Zamakist.git JEEN/p5-App-Zamakist
</div><div class='line'><span class="nv">$ </span><span class="nb">cd </span>JEEN/p5-App-Zamakist
</div><div class='line'><span class="nv">$ </span>git checkout -qf df10bdfea286c9933c345c84206eaa90b8f298a6
</div><div class='line'><span class="nv">$ </span>perlbrew use 5.16
</div><div class='line'><span class="nv">$ </span>perl --version
</div><div class='line'> </div><div class='line'>This is perl 5, version 16, subversion 0 <span class="o">(</span>v5.16.0<span class="o">)</span> built <span class="k">for </span>i686-linux
</div><div class='line'> </div><div class='line'>Copyright 1987-2012, Larry Wall
</div><div class='line'> </div><div class='line'>Perl may be copied only under the terms of either the Artistic License or the
</div><div class='line'>GNU General Public License, which may be found in the Perl 5 <span class="nb">source </span>kit.
</div><div class='line'> </div><div class='line'>Complete documentation <span class="k">for </span>Perl, including FAQ lists, should be found on
</div><div class='line'>this system using <span class="s2">&quot;man perl&quot;</span> or <span class="s2">&quot;perldoc perl&quot;</span>.  If you have access to the
</div><div class='line'>Internet, point your browser at http://www.perl.org/, the Perl Home Page.
</div><div class='line'> </div><div class='line'><span class="nv">$ </span>cpanm --version
</div><div class='line'>cpanm <span class="o">(</span>App::cpanminus<span class="o">)</span> version 1.5017
</div><div class='line'><span class="nv">$ </span>cpanm --quiet --installdeps --notest .
</div><div class='line'>Successfully installed Text-CharWidth-0.04
</div><div class='line'>Successfully installed Text-UnicodeBox-0.03
</div><div class='line'>Successfully installed XML-XPathEngine-0.13
</div><div class='line'>Successfully installed HTML-Tree-5.02
</div><div class='line'>Successfully installed HTML-TreeBuilder-XPath-0.14
</div><div class='line'>Successfully installed HTML-Selector-XPath-0.14
</div><div class='line'>Successfully installed Web-Query-0.08
</div><div class='line'>Successfully installed Term-ReadLine-Zoid-0.07
</div><div class='line'>8 distributions installed
</div><div class='line'><span class="nv">$ </span>perl Makefile.PL <span class="o">&amp;&amp;</span> make <span class="nb">test</span>
</div><div class='line'>include /home/travis/builds/JEEN/p5-App-Zamakist/inc/Module/Install.pm
</div><div class='line'>include inc/Module/Install/Metadata.pm
</div><div class='line'>include inc/Module/Install/Base.pm
</div><div class='line'>include inc/Module/Install/Makefile.pm
</div><div class='line'>Cannot determine perl version info from lib/App/Zamakist.pm
</div><div class='line'>include inc/Module/Install/Scripts.pm
</div><div class='line'>include inc/Module/Install/Include.pm
</div><div class='line'>include inc/Test/More.pm
</div><div class='line'>include inc/Module/Install/WriteAll.pm
</div><div class='line'>include inc/Module/Install/Win32.pm
</div><div class='line'>include inc/Module/Install/Can.pm
</div><div class='line'>include inc/Module/Install/Fetch.pm
</div><div class='line'>Writing Makefile <span class="k">for </span>App::Zamakist
</div><div class='line'>Writing MYMETA.yml and MYMETA.json
</div><div class='line'>Writing META.yml
</div><div class='line'>cp lib/App/Zamakist/Media.pm blib/lib/App/Zamakist/Media.pm
</div><div class='line'>cp lib/App/Zamakist.pm blib/lib/App/Zamakist.pm
</div><div class='line'>cp lib/App/Zamakist/Role/Reportable.pm blib/lib/App/Zamakist/Role/Reportable.pm
</div><div class='line'>cp lib/App/Zamakist/Handler/GOM.pm blib/lib/App/Zamakist/Handler/GOM.pm
</div><div class='line'>cp bin/zamakist blib/script/zamakist
</div><div class='line'>/home/travis/perl5/perlbrew/perls/5.16/bin/perl <span class="s2">&quot;-Iinc&quot;</span> -MExtUtils::MY -e <span class="s1">&#39;MY-&gt;fixin(shift)&#39;</span> -- blib/script/zamakist
</div><div class='line'><span class="nv">PERL_DL_NONLAZY</span><span class="o">=</span>1 /home/travis/perl5/perlbrew/perls/5.16/bin/perl <span class="s2">&quot;-MExtUtils::Command::MM&quot;</span> <span class="s2">&quot;-e&quot;</span> <span class="s2">&quot;test_harness(0, &#39;inc&#39;, &#39;blib/lib&#39;, &#39;blib/arch&#39;)&quot;</span> t/*.t
</div><div class='line'>t/00_compile.t ......... ok
</div><div class='line'>t/01_find_permalink.t .. 5/7 <span class="c"># http://search.gomtv.com/searchjm.gom?key=The.Mentalist.S04E01.HDTV.XviD-ASAP.%5BVTV%5D.Scarlet.Ribbons&amp;preface=0</span>
</div><div class='line'><span class="c"># http://gom.gomtv.com/jmdb/view.html?intSeq=808364&amp;preface=0&amp;spage=1</span>
</div><div class='line'>Wide character in print at /home/travis/perl5/perlbrew/perls/5.16/lib/5.16.0/Test/Builder.pm line 1759.
</div><div class='line'><span class="c"># [통합] The.Mentalist.S04E01.HDTV.XviD-ASAP</span>
</div><div class='line'>t/01_find_permalink.t .. ok
</div><div class='line'>All tests successful.
</div><div class='line'><span class="nv">Files</span><span class="o">=</span>2, <span class="nv">Tests</span><span class="o">=</span>8, 10 wallclock secs <span class="o">(</span> 0.03 usr  0.01 sys +  1.79 cusr  0.10 <span class="nv">csys</span> <span class="o">=</span>  1.93 CPU<span class="o">)</span>
</div><div class='line'>Result: PASS
</div><div class='line'> </div><div class='line'>Done. Build script exited with: 0
</div></pre></td></tr></table></div></figure>

<p>좀 더 뭐 욕심이 있다면 Jenkins 에서 처럼 정적분석이나 테스트 케이스에 대해서 좀 더 자세한 내용이 나와줬으면 좋겠다 싶지만… 사실 그건 뽀대의 문제라…</p>

<p>위의 빌드 내용에 대한 자세한 내용은 아래의 링크를 참고하세요.</p>

<ul>
<li><a href="http://travis-ci.org/#!/JEEN/p5-App-Zamakist/builds/2257622">Travis CI : p5-App-Zamakist</a></li>
</ul>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[DBIx::Class and JSON]]></title>
<link href="http://jeen.github.io/2012/08/25/dbix-class-and-json/"/>
<updated>2012-08-25T12:44:00+00:00</updated>
<id>http://jeen.github.io/2012/08/25/dbix-class-and-json</id>
<category term="catalyst" /><category term="dbic" /><category term="perl" />

      <content type="html"><![CDATA[<p>흔한 웹서비스의 흔한 AJAX 나 흔한 RESTful API 를 제공하기 위해서, 대개 JSON 포맷의 데이터를 서버에서 뿜어내고는 합니다.</p>

<p>하지만 누구나가 Catalyst + DBIx::Class 조합에서 이렇게 하면 되는 게 아닐까 하고 접근했다가…</p>

<blockquote>
<p>… encountered object &#39;..&#39;, but neither allow_blessed nor convert_blessed settings are enabled …</p>
</blockquote>

<p>라는 에러를 접하게 됩니다. bless 된 오브젝트를 어떻게든 JSON 인코딩을 시도하려고 했을 때는 위와 같은 에러를 쉬이 접할 수 있습니다.</p>

<p>이것을 푸는 방법은 사실 여러가지가 있습니다.</p>

<p>이것저것 신경쓰지 말고 한번에 가자고 할 때는 Catalyst::View::JSON 에서 인코딩하게 되는 stash 된 값들을 전부 ArrayRef 나 HashRef 로 변환해서 넘기는 방법입니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'>   <span class="k">my</span> <span class="nv">@data</span><span class="p">;</span>
</div><div class='line'>   <span class="k">my</span> <span class="nv">$rs</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">(</span><span class="s">&#39;DB&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">();</span>
</div><div class='line'>   <span class="k">while</span><span class="p">(</span><span class="k">my</span> <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$rs</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">)</span> <span class="p">{</span>
</div><div class='line'>       <span class="nb">push</span> <span class="nv">@data</span><span class="p">,</span> <span class="p">{</span>
</div><div class='line'>           <span class="n">id</span> <span class="o">=&gt;</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span>
</div><div class='line'>           <span class="n">name</span> <span class="o">=&gt;</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
</div><div class='line'>           <span class="n">created_at</span> <span class="o">=&gt;</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="n">created_at</span><span class="p">,</span>
</div><div class='line'>       <span class="p">};</span>
</div><div class='line'>   <span class="p">}</span>
</div><div class='line'>   <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">people</span><span class="p">}</span> <span class="o">=</span> <span class="o">\</span><span class="nv">@data</span><span class="p">;</span>
</div></pre></td></tr></table></div></figure>

<p>위처럼 특정컬럼을 선별해서 넣어주는 방법이 있겠지요. 좀 더 단순화한다면, 각  스키마테이블 별로 HashRef 를 반환하는 메소드를 넣어두는 것도 좋습니다.</p>

<figure class='code'><figcaption>lib/MyApp/Schema/Result/User.pm</figcaption><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'><span class="k">sub </span><span class="nf">to_hashref</span> <span class="p">{</span>
</div><div class='line'>    <span class="k">my</span> <span class="nv">$self</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
</div><div class='line'>    <span class="k">return</span> <span class="p">{</span>
</div><div class='line'>        <span class="n">id</span> <span class="o">=&gt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">id</span><span class="p">,</span>
</div><div class='line'>        <span class="n">name</span> <span class="o">=&gt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
</div><div class='line'>        <span class="n">created_at</span> <span class="o">=&gt;</span> <span class="nv">$self</span><span class="o">-&gt;</span><span class="n">created_at</span><span class="p">,</span>
</div><div class='line'>    <span class="p">};</span>
</div><div class='line'><span class="p">}</span>
</div><div class='line'> </div><div class='line'>   <span class="c1"># Controller</span>
</div><div class='line'>   <span class="k">my</span> <span class="nv">@data</span><span class="p">;</span>
</div><div class='line'>   <span class="k">my</span> <span class="nv">$rs</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">(</span><span class="s">&#39;DB&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">();</span>
</div><div class='line'>   <span class="k">while</span><span class="p">(</span><span class="k">my</span> <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$rs</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">)</span> <span class="p">{</span>
</div><div class='line'>       <span class="nb">push</span> <span class="nv">@data</span><span class="p">,</span> <span class="nv">$row</span><span class="o">-&gt;</span><span class="n">to_hashref</span><span class="p">;</span>
</div><div class='line'>   <span class="p">}</span>
</div><div class='line'>   <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">people</span><span class="p">}</span> <span class="o">=</span> <span class="o">\</span><span class="nv">@data</span><span class="p">;</span>
</div></pre></td></tr></table></div></figure>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'>  <span class="k">my</span> <span class="nv">$person</span> <span class="o">=</span> <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">(</span><span class="s">&#39;DB&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">(</span><span class="nv">$cond</span><span class="p">,</span> <span class="p">{</span>
</div><div class='line'>      <span class="n">result_class</span> <span class="o">=&gt;</span> <span class="s">&#39;DBIx::Class::ResultClass::HashRefInflator&#39;</span><span class="p">,</span>
</div><div class='line'>  <span class="p">})</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">;</span>
</div><div class='line'>  <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">person</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$person</span><span class="p">;</span>
</div></pre></td></tr></table></div></figure>

<p>그럴 필요가 없다면 위처럼 <code>result_class</code> 를 지정해줌으로써 결과를 무조건 HashRef 로 반환하게끔 합니다.</p>

<p>사실 <code>DBIx::Class::ResultClass::HashRefInflator</code> 를 적용하면 일일이 오브젝트를 만들어내지 않기 때문에 퍼포먼스 측면에서 매우 좋습니다만, 그냥 HashRef 일 따름인지라Resultset 에서 정의한 각종 메소드를 참조할 수 없습니다.
 그러니 이런저런 경우에는 가려서 사용하는 것이 좋습니다.</p>

<p>이제 본질적으로 좀 더 접근해보면…
 JSON::XS 는 인코딩할 시에, 오브젝트가 대상인 경우에는 해당 오브젝트의 TO_JSON 메소드를 참조하여 결과를 뽑아낼 수 있습니다. 물론 <code>allow_blessed</code>, <code>convert_blessed</code> 플래그를 지정할 필요가 있지요.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div><div data-line='7' class='line-number'></div><div data-line='8' class='line-number'></div><div data-line='9' class='line-number'></div><div data-line='10' class='line-number'></div><div data-line='11' class='line-number'></div><div data-line='12' class='line-number'></div><div data-line='13' class='line-number'></div><div data-line='14' class='line-number'></div><div data-line='15' class='line-number'></div><div data-line='16' class='line-number'></div><div data-line='17' class='line-number'></div><div data-line='18' class='line-number'></div><div data-line='19' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'><span class="c1"># lib/MyApp/View/JSON.pm</span>
</div><div class='line'><span class="nb">package</span> <span class="nn">MyApp::View::</span><span class="n">JSON</span><span class="p">;</span>
</div><div class='line'><span class="k">use</span> <span class="nn">JSON::</span><span class="n">XS</span> <span class="p">();</span>
</div><div class='line'> </div><div class='line'><span class="k">use</span> <span class="n">parent</span> <span class="sx">qw(Catalyst::View::JSON)</span><span class="p">;</span>
</div><div class='line'> </div><div class='line'><span class="k">my</span> <span class="nv">$encoder</span> <span class="o">=</span> <span class="nn">JSON::</span><span class="n">XS</span><span class="o">-&gt;</span><span class="k">new</span>
</div><div class='line'>              <span class="o">-&gt;</span><span class="n">utf8</span>
</div><div class='line'>                          <span class="o">-&gt;</span><span class="n">pretty</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</div><div class='line'>                          <span class="o">-&gt;</span><span class="n">indent</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</div><div class='line'>                          <span class="o">-&gt;</span><span class="n">allow_blessed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</div><div class='line'>                          <span class="o">-&gt;</span><span class="n">convert_blessed</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</div><div class='line'> </div><div class='line'><span class="k">sub </span><span class="nf">encode_json</span> <span class="p">{</span>
</div><div class='line'>    <span class="k">my</span> <span class="p">(</span><span class="nv">$self</span><span class="p">,</span> <span class="nv">$c</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</div><div class='line'>    <span class="nv">$encoder</span><span class="o">-&gt;</span><span class="n">encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">);</span>
</div><div class='line'><span class="p">}</span>
</div><div class='line'> </div><div class='line'><span class="mi">1</span><span class="p">;</span>
</div></pre></td></tr></table></div></figure>

<p>그러면 위처럼 <code>encode_json</code> 을 오버라이드 합니다. <code>allow_blessed</code> 와 <code>convert_blessed</code>  플래그를 켜주는 것이죠.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div><div data-line='5' class='line-number'></div><div data-line='6' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'><span class="c1"># lib/MyApp/Schema/Result/User.pm</span>
</div><div class='line'><span class="o">..</span>
</div><div class='line'><span class="k">sub </span><span class="nf">TO_JSON</span> <span class="p">{</span>
</div><div class='line'>    <span class="k">return</span> <span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">get_inflated_columns</span> <span class="p">};</span>
</div><div class='line'><span class="p">}</span>
</div><div class='line'><span class="o">..</span>
</div></pre></td></tr></table></div></figure>

<p>그리고 위처럼 User Result 에 대해서 TO_JSON 를 지정합니다.</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  perl'><pre><div class='line'>   <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">stash</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">people</span><span class="p">}</span> <span class="o">=</span> <span class="p">[</span>  <span class="nv">$c</span><span class="o">-&gt;</span><span class="n">model</span><span class="p">(</span><span class="s">&#39;DB&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">resultset</span><span class="p">(</span><span class="s">&#39;User&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">search</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">all</span> <span class="p">];</span>
</div></pre></td></tr></table></div></figure>

<p>그러면 이제는 아무런 걱정없이 그냥 생짜 DBIC Resultset 을 날려버려도 이제는 알아서 문제해결이 됩니다. :-)</p>

<p>각 Resultset 마다 <code>TO_JSON</code> 을 지정하기가 벅차다면…</p>

<ul>
<li><a href="http://advent.perl.kr/2011/2011-12-17.html">Seoul.pm Advent Calendar 2011 - 열일곱번째 날 : DBIx::Class로 스키마 관리하기</a></li>
</ul>

<p>위의 글에서 <code>ResultBase</code> 를 참고해주세요.</p>

<p><code>MyApp::Schema::ResultBase</code> 를 상속받은 각 Result 테이블들은 <code>TO_JSON</code> 을 오버라이드 해서 빼놓고 싶은 컬럼(예를 들어 <code>password</code> 같은 컬럼) 을 배제해서 출력할 수 있지 않을까요?</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Moving from bash to zsh again]]></title>
<link href="http://jeen.github.io/2012/08/09/moving-from-bash-to-zsh-again/"/>
<updated>2012-08-09T16:30:00+00:00</updated>
<id>http://jeen.github.io/2012/08/09/moving-from-bash-to-zsh-again</id>
<category term="zsh" />

      <content type="html"><![CDATA[<p>밥벌이도구가 바뀌고 해서 다시 ZSH 로 돌아갔습니다.</p>

<blockquote class="twitter-tweet" lang="ko"><p>레티나 맥북프로를 오늘 받은 게 자랑.txt <a href="http://t.co/38oGVx7W" title="http://jeen.tistory.com/560">jeen.tistory.com/560</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/232821768325300225" data-datetime="2012-08-07T12:53:29+00:00">8월 7, 2012</a></blockquote>

<ul>
<li> <a href="https://github.com/skwp/dotfiles">https://github.com/skwp/dotfiles</a></li>
</ul>

<p>지난번에 MacBook Air 에 올리다가 뭐가 꼬인 <code>YADR</code> 을 썼습니다. <code>grep</code> 경고메시지가 없이 깔끔하게 돌아가는 군요.</p>

<p>이래저래 개발환경도 맞추고 그러다가 지난달에 zsh 5.0 이 릴리즈 된 것을 보고 Mt.LION 에 깔린 zsh 버젼을 확인하니..</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>zsh --version
</div><div class='line'>zsh 4.3.11 <span class="o">(</span>i386-apple-darwin12.0<span class="o">)</span>
</div></pre></td></tr></table></div></figure>

<p><code>4.3.11</code> 이었습니다. 그래서 zsh 5.0 으로 올려보려고 brew 로 일단 깔았죠.</p>

<p>그리고 <code>chsh</code> 로 셸을 바꾸려고 하는 데…</p>

<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  bash'><pre><div class='line'><span class="nv">$ </span>chsh -s /usr/local/bin/zsh
</div><div class='line'>Changing shell <span class="k">for </span>jeen.
</div><div class='line'>Password <span class="k">for </span>jeen:
</div><div class='line'>chsh: /usr/local/Cellar/zsh/5.0.0/bin/zsh: non-standard shell
</div></pre></td></tr></table></div></figure>

<p>이라고 뜨는 것이었지요.</p>

<p>구글검색결과 <code>/etc/shells</code> 에 해당 셸의 패스를 추가하는 것으로 이 난관을 헤쳐나갈 수 있다고 합니다.</p>

<p>그래서 네. zsh 5.0 쓰고 있는데 뭐가 좋은지는 써보면서 느끼게 되려나요.</p>

<ul>
<li><a href="https://github.com/zsh-users/zsh/blob/master/NEWS">https://github.com/zsh-users/zsh/blob/master/NEWS</a></li>
</ul>

<p>이런 CHANGELOG 도 일단 보고 있지만요&hellip;</p>
]]></content>
    </entry>
  
</feed>
