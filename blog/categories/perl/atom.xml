<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen's techlog]]></title>
  <link href="http://JEEN.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://JEEN.github.com/"/>
  <updated>2012-01-16T23:45:32+09:00</updated>
  <id>http://JEEN.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Carton - CPAN dependencies manager]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/16/carton-cpan-dependencies-manager/"/>
    <updated>2012-01-16T22:49:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/16/carton-cpan-dependencies-manager</id>
    <content type="html"><![CDATA[<p>  Jenkins 이야기를 마저 쓸려고 했는 데, 그 사이사이에 사용된 것들부터 정리하고자 우선은 Carton 이야기 부터 먼저하고자 합니다.</p>

<p>  잘은 모르지만 Carton 은 Ruby 의 Bundler 에 영감을 받아서 만들어 진 것입니다. 어떤 Perl 로 만든 소프트웨어의 의존모듈의 관리가 편해집니다. :-) 일례로, 노트북에서 개발을 하고 이것을 서버에 올릴려고 할 때, 일일이 의존모듈 체크를 해야할 필요성이 있습니다. 그때마다 <code>cpan MODULE</code> 등으로 설치를 해나가야 한다면 여간 힘든 일이 아니죠.</p>

<p>  그런 상황에서 쉽게 문제를 해결할 수 있는 것이 <code>Carton</code> 이 아닐까 생각합니다.</p>

<h3>Carton 설치</h3>

<p>  <code>Carton</code> 은 간단하게 <code>cpan</code> 으로 설치할 수 있습니다.</p>

<p><code>bash
$ cpanm carton
</code></p>

<p>  위의 커맨드로 <code>Carton</code> 을 설치하면 <code>carton</code> 이라는 커맨드가 생깁니다.</p>

<h3>Carton 이용</h3>

<p>  <code>Carton</code> 을 제대로 이용하려면, 해당 Perl App 의 의존모듈이 <code>Makefile.PL</code> 안에서 잘 관리되고 있어야 합니다.</p>

<p>``` perl Makefile.PL
use ExtUtils::MakeMaker;
WriteMakefile(</p>

<pre><code>'NAME'      =&gt; 'WebService::Aladdin',
'AUTHOR'    =&gt; 'JEEN &lt;jeen@perl.kr&gt;',
'VERSION_FROM' =&gt; 'lib/WebService/Aladdin.pm', # finds $VERSION
'PREREQ_PM' =&gt; {
    Test::Base =&gt; 0,
    version    =&gt; 0,
    Class::Accessor::Fast =&gt; 0,
    LWP::UserAgent =&gt; 0,
    URI            =&gt; 0,
    Carp           =&gt; 0,
    XML::FeedPP    =&gt; 0
},
</code></pre>

<p>);
```</p>

<p>  우선 예제로 제가 만든 <code>WebService::Aladdin</code> 모듈의 <code>Makefile.PL</code> 이 위와 같습니다. 이는 <code>WebService::Aladdin</code> 모듈에서 필요로 하는 의존모듈 등의 정보들을 나타내고 있습니다.</p>

<p><code>bash
$ carton install
</code></p>

<p>  <code>carton install</code> 을 통해서 <code>Makefile.PL</code> 에 정의된 의존모듈을 설치합니다. 이때 <code>Carton</code> 은 의존모듈의 의존트리까지도 설치해버립니다. 그러니 실제 의존모듈이 10개라도, 그 10개의 각각의 모듈의 의존모듈까지도 설치하기 때문에 실제로 설치되는 것은 10개 이상의 모듈들이 될 것입니다.</p>

<p>  아무튼 <code>carton install</code> 이 끝났다면 <code>carton.lock</code> 파일이 생성됩니다. 그리고 <code>local</code> 이라는 디렉토리의 아래에 의존모듈들이 설치됩니다.</p>

<p>``` text carton.lock
{
   "modules" : {</p>

<pre><code>  "Algorithm::Diff" : {
     "dist" : "Algorithm-Diff-1.1902",
     "module" : "Algorithm::Diff",
     "mymeta" : {
        "abstract" : "unknown",
        "author" : [
           "unknown"
        ],
        "dynamic_config" : 0,
        "generated_by" : "ExtUtils::MakeMaker version 6.62, CPAN::Meta::Converter version 2.112621, CPAN::Meta::Converter version 2.112150",
        "license" : [
           "unknown"
        ],
        "meta-spec" : {
           "url" : "http://search.cpan.org/perldoc?CPAN::Meta::Spec",
           "version" : "2"
        },
        "name" : "Algorithm-Diff",
        "no_index" : {
           "directory" : [
              "t",
              "inc"
           ]
        },
        "prereqs" : {
           "build" : {
              "requires" : {
                 "ExtUtils::MakeMaker" : 0
              }
           },
           "configure" : {
              "requires" : {
                 "ExtUtils::MakeMaker" : 0
              }
           },
           "runtime" : {
              "requires" : {}
           }
        },
        "release_status" : "stable",
        "version" : "1.1902"
     },
     "name" : "Algorithm::Diff",
     "pathname" : "T/TY/TYEMQ/Algorithm-Diff-1.1902.tar.gz",
     "provides" : {
        "Algorithm::Diff" : {
           "file" : "Algorithm/Diff.pm",
           "version" : "1.1902"
        },
        "Algorithm::DiffOld" : {
           "file" : "Algorithm/DiffOld.pm",
           "version" : "1.1"
        }
     },
     "version" : "1.1902"
  },
  ...
</code></pre>

<p>   }
}
```</p>

<p>  이후 <code>Makefile.PL</code> 에서 또다른 의존모듈이 추가되었을 시에, 또다시</p>

<p><code>bash
$ carton install
</code></p>

<p>을 통해서 추가의존모듈을 설치할 수 있습니다. 이렇게 <code>carton install</code> 로 설치된 로컬 모듈들은</p>

<p><code>bash
$ carton list
IO-stringy-2.110
File-Listing-6.03
XML-FeedPP-0.43
CPAN-Meta-2.112621
...
</code></p>

<p>  <code>carton list</code> 로 확인할 수 있습니다.</p>

<p>  그리고 <code>carton exec</code> 를 통해서 로컬모듈에 설치된 의존모듈을 참조해서 실행할 수 있습니다. 일례로 <code>Catalyst</code> 나 <code>Dancer</code> 로 만든 WebApp 들을 위에서 설명한 대로 <code>carton install</code> 한다음,</p>

<p><code>bash
$ carton exec -- plackup -a app.psgi -p 3000 --mode production
</code></p>

<p>  이처럼 <code>carton exec</code> 를 통해서 실행할 수 있지요.</p>

<h3>Carton 을 이용하고서...</h3>

<p>  우선은 Carton 을 이용함으로, 한 어플리케이션 당 하나의 모듈참조장소를 가지게해서 여러 어플리케이션이 혼잡한 경우에 발생할 수 있는 부작용을 예방할 수 있습니다. <code>Makefile.PL</code> 에서 해당 모듈의 버젼을 지정함으로 특정 버젼에 대해서만 의존을 가질 수 있기 때문에 더더욱 이런 면에서는 효과적입니다.</p>

<p>  그래서 저같은 경우는 오히려 서비스마다 그 서비스용 계정을 만들고 <code>perlbrew</code> 환경을 갖추는 것보다 가볍게 서비스용 계정은 하나만 가지며 각 서비스디렉토리마다 <code>Carton</code> 을 올리는 쪽으로 움직이고 있습니다. 그러니 굳이 시스템 펄을 사용하는 것이 큰 거부감을 느끼지 않게 되었네요.</p>

<h3>Conclusion</h3>

<p>  물론 Carton 은 현재 ALPHA 퀄리티라고 합니다. 버젼도 현재(2012-01-16) 로는 0.9.3 이고, 1.0 정식 릴리즈까지는 아직 시간이 남아있습니다. 몇몇 기능이 바뀔거라는 주의사항이 <a href="http://metacan.org/module/Carton">Carton 모듈페이지</a> 에서 확인할 수 있습니다.</p>

<p>  좀 더 다양한 <code>Carton</code> 에 대한 이야기는 작년 <a href="http://yapcasia.org/2011/talk/91">YAPC::Asia2011 의 Carton Talk Page</a> 에서도 확인하실 수 있습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picasa Upload Script II]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/13/picasa-upload-script-ii/"/>
    <updated>2012-01-13T18:36:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/13/picasa-upload-script-ii</id>
    <content type="html"><![CDATA[<p>``` perl picasa-uploader.pl</p>

<h1>!/usr/bin/env perl</h1>

<p>package PicasaUploader;
use Any::Moose;
use namespace::autoclean;
use Config::Pit;
use LWP::UserAgent;
use Net::Google::AuthSub;
use MIME::Types ();</p>

<p>has user_id => (</p>

<pre><code>is      =&gt; 'ro',
default =&gt; 'default',
</code></pre>

<p>);</p>

<p>has album_id => (</p>

<pre><code>is      =&gt; 'ro',
default =&gt; 'default',
</code></pre>

<p>);</p>

<p>has files => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'ArrayRef',
default =&gt; sub { [] }
</code></pre>

<p>);</p>

<p>has google_auth => (</p>

<pre><code>is      =&gt; 'rw',
isa     =&gt; 'Net::Google::AuthSub',
default =&gt; sub {
    Net::Google::AuthSub-&gt;new(
        service =&gt; 'lh2',
        source  =&gt; 'my-picasauploader-0.1'
    );
}
</code></pre>

<p>);</p>

<p>has '_ua' => (</p>

<pre><code>is      =&gt; 'rw',
isa     =&gt; 'LWP::UserAgent',
default =&gt; sub {
    LWP::UserAgent-&gt;new( cookie_jar =&gt; {} ); 
}
</code></pre>

<p>);</p>

<p>has 'config' => (</p>

<pre><code>is          =&gt; 'ro',
isa         =&gt; 'HashRef',
lazy_build  =&gt; 1,
</code></pre>

<p>);</p>

<p>sub BUILD {</p>

<pre><code>my $self = shift;
$self-&gt;auth;
return 1;
</code></pre>

<p>}</p>

<p>sub _build_config {</p>

<pre><code>Config::Pit::pit_get('google.com', require =&gt; {
   username =&gt; 'your username on google.com',
   password =&gt; 'your password on google.com' 
});    
</code></pre>

<p>}</p>

<p>sub auth {</p>

<pre><code>my $self = shift;

my $res = $self-&gt;google_auth-&gt;login($self-&gt;config-&gt;{username}, $self-&gt;config-&gt;{password});
die "Login Failed: ". $res-&gt;error unless $res-&gt;is_success;
</code></pre>

<p>}</p>

<p>sub upload_files {</p>

<pre><code>my $self = shift;

for my $file_path (@{ $self-&gt;files }) {
    my $link = $self-&gt;upload_file($file_path);
    print $link."\n";
}
</code></pre>

<p>}</p>

<p>sub upload_file {</p>

<pre><code>my ($self, $file_path) = @_;

my $file = Path::Class::File-&gt;new($file_path);
die "File Not Found : $file" unless -f $file;

my $post_url = sprintf 'https://picasaweb.google.com/data/feed/api/user/%s/albumid/%s', $self-&gt;user_id, $self-&gt;album_id;

my ($mime_type, $encoding) = MIME::Types::by_suffix($file-&gt;basename);
my $content = $file-&gt;slurp;
my $res = $self-&gt;_ua-&gt;post($post_url,
    %{ $self-&gt;google_auth-&gt;auth_params },
    Content_Type   =&gt; $mime_type,
    Slug           =&gt; $file-&gt;basename,
    Content        =&gt; $content,  
);

die 'UPLOAD Failed : '.$res-&gt;status_line unless $res-&gt;is_success;
my ($link) = ($res-&gt;decoded_content=~/content type.*?src='(.*?)'/gsm);
$link;
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>package main;</p>

<p>my $uploader = PicasaUploader->new( files => \@ARGV );
$uploader->upload_files;
```</p>

<p>  <a href="http://aanoaa.github.com/blog/2012/01/03/picasa-upload-script/">@aanoaa 님의 글</a>에서 Picasa Uploader 스크립트를 소개했었는데요. <code>PicasaUploader</code> 라고 package 로 정의해서 쓰도록 했습니다.
  거기에 <a href="https://metacpan.org/module/Config::Pit">Config::Pit</a> 을 써서 계정정보를 다루도록 했구요.
  심심해서 그냥 약간 개량해봤습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::More - use 'subtest' instead of {} block]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block/"/>
    <updated>2012-01-05T20:33:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block</id>
    <content type="html"><![CDATA[<p>  여태껏 테스트코드를 써나가면서 그냥 {} 블록안에 일정한 흐름의 테스트 코드를 적곤 했었습니다.</p>

<p>``` perl
use Test::More;
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';</p>

<h1>Access /</h1>

<p>{</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>}</p>

<h1>Login</h1>

<p>{</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>}</p>

<h1>some action</h1>

<p>{</p>

<pre><code>...;
</code></pre>

<p>}
```</p>

<p>  일단 뭐 {} 블록으로 각 action 에 대한 접근결과를 테스트하고, <code>#</code> 로 주석표시를 하면서 하나둘 하나둘 각 블록에 <code>$req</code>, <code>$res</code> 를 추가했었습니다. 일단 뭐 {} 블록으로 묶으면서 <code>$req</code>, <code>$res</code> 따위의 변수의 재정의 등에 관한 경고같은 것이 안나와서 좋고, 제대로 분류가 되는 느낌이기도 했습니다.</p>

<h3>그냥 <code>subtest</code> 를 사용하면 어떨까?</h3>

<p>  그러는 도중에 <a href="http://search.cpan.org/perldoc?Test::More">Test::More 매뉴얼</a>을 읽어보다가 <code>subtest</code> 를 사용할 수 있다는 것을 알게 되었습니다.</p>

<p>``` perl
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';
use Test::More;</p>

<p>subtest 'access to /' => sub {</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>};</p>

<p>subtest 'Login' => sub {</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>};
```</p>

<p>  <code>subtest</code> 를 사용하면서 코드는 위처럼 바뀌었습니다. <code>#</code> 로 주석처리를 할 필요도 없고, 해당 <code>subtest</code> 마다 명확하게 무엇을 하는 지 확실하게 의미있는 <code>subtest</code> 의 이름으로 정해줄 수 있었습니다.</p>

<p>  <code>subtest</code> 로 테스트를 썼을 경우는 TAP 결과는 다음과 같습니다.</p>

<p>``` bash
$ prove t/myapp.t
ok 1 - access to /</p>

<pre><code>ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
1..3
</code></pre>

<p>ok 2 - Login</p>

<pre><code>ok 1 - Request should be suceed
...
1..3
</code></pre>

<p>....
1..3
ok
All tests successful.
Files=1, Tests=3, 10 wallclock secs ( 0.07 usr  0.01 sys +  6.16 cusr  0.61 csys =  6.85 CPU)
Result: PASS
```</p>

<p>  전체 테스트 횟수는 <code>subtest</code> 안의 테스트 항목이 아니라, <code>subtest</code> 의 갯수가 되는 것입니다.</p>

<p>  그리고 <code>subtest</code> 를 사용하지 않고 {} 블록을 이용해서 flat 하게 정의했을 때는 아래와 같습니다.</p>

<p><code>bash
...
ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
ok 4 - Request should be suceed
 ...
</code></p>

<p>  테스트 항목 1,4 번의 메시지가 같기 때문에 매번 달리 지정해줘야 되는 수고가 발생하죠. 그리고 각각의 테스트 항목 하나하나가 테스트 갯수가 되는 것입니다.</p>

<p>  사실은 위의 Jenkins 상의 <code>Test Result Trend</code> 의 그래프가 어느 순간 갑자기 뚝 떨어지길래, 어라 이상하다 싶어서 살펴본 결과, <code>subtest</code> 기준으로 카운트되어있는 것을 확인했습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-TSX-Kd5-fX4/TwWRjvHx2LI/AAAAAAAAA94/pYrEEgHBZic/test-result-trend.png" alt="Jenkins Test Result Trend 의 낙폭" /></p>

<p>  대충 위의 <code>#58</code> 번 빌드가 그 쯤이 되겠네요.</p>

<p>  아무튼 Jenkins 도입이후에 좀 더 테스트코드에 더 신경을 쓰고 있는 요즘입니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl - Mail Send II]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/04/perl-mail-send-ii/"/>
    <updated>2012-01-04T18:26:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/04/perl-mail-send-ii</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://jeen.github.com/blog/2011/12/29/perl-email-send/">Perl - Mail Send</a></p>

<p>이전에 Perl 에서 Mail Send 관련해서 한번 깨작거린 적이 있습니다.</p>

<p>오늘은 이에 대해서 추가적인 수정이 필요한 부분이 있어서, <code>MyApp::Mail</code> 을 조금 더 건드려 봤습니다.</p></li>
</ul>


<p>``` perl
package MyApp::Mail;
use Moose;
use Moose::Util::TypeConstraints;
use namespace::autoclean;
use Email::MIME;
use Email::Sender::Simple 'sendmail';
use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>subtype 'MailAddresses' => as 'Str';</p>

<p>coerce 'MailAddresses',</p>

<pre><code>from 'ArrayRef',
    via { join(", ", (map { Encode::encode( "MIME-Header", $_ ) } @{ $_ })) };
 from 'Str',
     via { Encode::encode( "MIME-Header", $_ ) };
</code></pre>

<p>has to => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'MailAddresses',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
coerce    =&gt; 1,
</code></pre>

<p>);</p>

<p>has from => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has subject => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has body => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'Str',
</code></pre>

<p>);</p>

<p>has transport => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'HashRef'
</code></pre>

<p>);</p>

<p>has attachments => (</p>

<pre><code>is =&gt; 'ro',
isa =&gt; 'ArrayRef[Path::Class::File]',
default =&gt; sub { [] },
</code></pre>

<p>);</p>

<p>sub _get_parts {</p>

<pre><code>my $self = shift;

my @parts;
push @parts,
    Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; 'text/plain',
            charset      =&gt; 'utf8',
        },
        body =&gt; Encode::encode_utf8($self-&gt;body),
    );
for my $attachment (@{ $self-&gt;attachments }) {
    confess "File Not Found : $attachment" unless -f $attachment;
    my ($mime_type, $encoding) = MIME::Types::by_suffix($attachment-&gt;basename);
    $mime_type ||= 'multipart/mixed';
    my $file_body = $attachment-&gt;slurp;
    push @parts, Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; $mime_type,
            name         =&gt; $attachment-&gt;basename,
            filename     =&gt; $attachment-&gt;basename,
            encoding     =&gt; 'base64',
            disposition  =&gt; 'attachment',
        },
        body =&gt; $file_body,
    );
}
\@parts;
</code></pre>

<p>}</p>

<p>sub send {</p>

<pre><code>my $self = shift;

my $opt = {};
if ($self-&gt;transport) {
    $opt-&gt;{transport} = Email::Sender::Transport::SMTP-&gt;new( $self-&gt;transport );
}

my $email = Email::MIME-&gt;create(
    header =&gt; [
        From    =&gt; $self-&gt;from,
        To      =&gt; $self-&gt;to,
        Subject =&gt; $self-&gt;subject
    ],
    parts =&gt; $self-&gt;_get_parts,
);
sendmail($email, $opt);
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>1;
```</p>

<p>  일단 수정을 필요로 한 부분은, 똑같은 메일 내용을 둘 이상에게  보내야 할 경우입니다. 일반적으로 업체에서 보내는 메일의 헤더를 보면 <code>To</code> 에 본인만 들어가 있을 겁니다. 이게 일반적이죠.</p>

<p>  하지만 이번에는 사내 시스템 관련 리포트를 보내는 것이고, 특정 다수에게 보내며, 메일링이 없다는 전제하에서 움직였습니다.</p>

<p>변경된 부분은,</p>

<p>``` diff
package MyApp::Mail;
use Moose;
+use Moose::Util::TypeConstraints;
use namespace::autoclean;
@@ -9, 13 +10, 22 @@ use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>+subtype 'MailAddresses' => as 'Str';</p>

<p>+coerce 'MailAddresses',
+   from 'ArrayRef',
+        via { join(", ", (map { Encode::encode( "MIME-Header", $<em> ) } @{ $</em> })) };
+     from 'Str',
+         via { Encode::encode( "MIME-Header", $_ ) };
+
has to => (</p>

<pre><code>is      =&gt; 'ro',
</code></pre>

<ul>
<li> isa     => 'Str',</li>
<li> isa     => 'MailAddresses',
default => sub {

<pre><code>Encode::encode( "MIME-Header", $_[0] );
</code></pre>

<p>},
required => 1,</p></li>
<li> coerce    => 1,
);
```</li>
</ul>


<p>  입니다. subtype 을 지정하기 위해서 <code>Moose::Util::TypeConstraints</code> 를 use 할 필요가 있구요. <code>To</code> 헤더의 형식을 <code>MailAddresses</code> 라는 subtype 으로 받도록 합니다. 그냥 문자열 값이 들어오든 Array Reference 가 들어오든 그에 맞춰서 변환해주도록 했구요.</p>

<p>  이전 글에서 간략하게 Mail 테스트 방법에 대해서 소개했는데, 현재 위처럼 수정한 다음에 아래와 같이 테스트코드를 작성해서 문제없이 작동하는 것을 확인할 수 있었습니다.</p>

<p>``` perl send-mail.t
use strict;
use warnings;
use Test::Most;
use_ok 'MyApp::Mail';
use Path::Class::File;</p>

<p>BEGIN {</p>

<pre><code>$ENV{EMAIL_SENDER_TRANSPORT} = 'Test';
</code></pre>

<p>};</p>

<p>my %data_set = (</p>

<pre><code>to      =&gt; 'your@email.com',
from    =&gt; 'my@email.com',
subject =&gt; 'MailSender Test Subject',
body    =&gt; 'MailSender Test Body',
</code></pre>

<p>);</p>

<h1>Send a mail w/ attachments</h1>

<p>my $mailer = MyApp::Mail->new(</p>

<pre><code>%data_set,
attachments =&gt; [ 
    Path::Class::File-&gt;new('somefile.zip'),
    Path::Class::File-&gt;new('somefile.ee')
],
</code></pre>

<p>);</p>

<p>$mailer->send;</p>

<h1>Send a mail without attachments</h1>

<p>my $mailer2 = MyApp::Mail->new(%data_set);</p>

<p>$mailer2->send;</p>

<h1>Send a mail with Multiple Recipients</h1>

<p>my $mailer3 = MyApp::Mail->new(</p>

<pre><code>%data_set,
to =&gt; [ 'your2@email.com', 'anotheremail@gmail.com' ],
</code></pre>

<p>);</p>

<p>$mailer3->send;</p>

<h1>Just string</h1>

<p>my $mailer4 = MyApp::Mail->new(
  %data_set,
  to => 'mail-1@mail.com, mail-2@mail.com, mail-3@mail.com',
);</p>

<p>$mailer4->send;</p>

<p>my $deliveries = Email::Sender::Simple->default_transport->deliveries;
for my $deliv (@{ $deliveries }) {
  my $sent_addresses = join ", ", @{ $deliv->{successes} };
  ok $deliv->{successes}, 'Mail sent to '. $sent_addresses;
}
done_testing();
```</p>

<p>  물론 <code>$deliveries</code> 변수를 덤프해보면 각각의 메일헤더들이 존재하고 좀 더 항목당 세밀하게 테스트를  수행할 수 있겠지만, 여기서는 단순하게 이정도로 그치도록 합니다.</p>

<p>  사실은 뭐 <code>To</code> 안에 여러개의 메일이 들어간다는 전제로 ArrayRef 를 넣었지만, 사실 Str 을 받기에 <code>To</code> 에 대해서는 그냥 문자열로 <code>mail-1@mail.com, mail-2@mail.com, mail-3@mail.com</code> 으로 해도 가능합니다. 하지만 그냥 제 고집상 복수의 데이터셋이 들어갈 때는 왠지 ArrayRef 로 넣고 싶어졌을 뿐입니다. 존중받고 싶은 취향같은 것이죠.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl and Continuous Integration with Jenkins - I]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1/"/>
    <updated>2012-01-03T11:45:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1</id>
    <content type="html"><![CDATA[<h3>Jenkins 를 사용하기 까지</h3>

<p>  사실 지난주에 NHN 에서 주최하는 공개개발자 교육에  갔다왔었습니다. 평소 Jenkins 에 대해서 약간 환상 같은 게 있다고 할까, 필요성이 있다고 할까요. 좀 더 프로젝트의 품질이 나아지고 있다는 환상, 그런 걸 보면서 나름 보람을 느끼고 싶다라는 생각도 있었습니다.</p>

<p>  아무튼 Jenkins 교육은 Java 위주의 프로젝트에 적용하는 얘기였지만, 다른 언어에서도 충분히 지원된다라는 얘기를 익히들어왔기에 대강 실습을 따라하면서 감을 익히고 회사에 와서 본격적으로 Jenkins 를 만지기 시작했습니다.</p>

<h3>Perl &amp; Jenkins</h3>

<p>  Jenkins 교육에서는 Maven 을 위주로 여러가지 옵션(?) 을 추가하는 것으로 간단하게 각종 Report 를 뽑아내기 위한 xml 들을 생성할 수 있었습니다. 아쉽게도 Perl 로는 Maven 만큼 쉽게 그렇게 만들기는 어려웠지요.</p>

<p>  일단 Perl 에는 기본적으로 TAP 형식을 따르고 있기 때문에 Java 류의 JUnit 으로 결과를 뽑아낼 필요가 있었습니다. 그래서 TAP 를 JUnit 으로 쉽게 바꿔줄 수 있는 방법이 필요했죠.</p>

<p><code>bash
$ prove --formatter --timer TAP::Formatter::JUnit t
</code></p>

<p>  위와 같은 형식으로 <code>t</code> 디렉토리 아래의 테스트파일들을 테스트하며 결과는 <code>TAP::Formatter::JUnit</code> 에 의해서 xml 파일로 나오게 됩니다.</p>

<p>``` xml
<testsuites>
  &lt;testsuite failures="0"</p>

<pre><code>         errors="0"
         time="25.6525909900665"
         tests="1"
         name="Catalyst_controller_Admin-Activity_t"&gt;
&lt;testcase time="0"
          name="1 - Request should succeed"&gt;&lt;/testcase&gt;
&lt;system-out&gt;&lt;![CDATA[ok 1 - Request should succeed
</code></pre>

<p>1..1
]]&gt;</system-out></p>

<pre><code>&lt;system-err&gt;&lt;/system-err&gt;
&lt;/testsuite&gt;
</code></pre>

<p></testsuites>
```</p>

<h3>Task::Jenkins</h3>

<p>  사실은 Jenkins 에서 Perl 프로젝트를 올릴 때의 주요한 모듈의 묶음은 <a href="http://search.cpan.org/perldoc?Task::Jenkins">Task::Jenkins</a> 모듈로 제공되고 있습니다. Task::Jenkins 에 있는 모듈들은,</p>

<ul>
<li><a href="http://search.cpan.org/perldoc?TAP::Formatter::JUnit">TAP::Formatter::JUnit</a></li>
<li><a href="http://search.cpan.org/perldoc?App::Prove">App::Prove</a></li>
<li><p><a href="http://search.cpan.org/perldoc?Devel::Cover">Devel::Cover</a></p>

<p>입니다.</p>

<p><code>TAP::Formatter::JUnit</code> 의 경우는 위에서 설명했고, <code>App::Prove</code> 는 위의 테스트코드를 실행하는 커맨드인 <code>prove</code> 를 사용하기 위한 모듈입니다. <code>Devel::Cover</code> 는 Code Coverage 를 확인할 수 있는 모듈이구요.</p>

<p>일단 Jenkins 에서 Perl 프로젝트를 적용하는 준비는 기본적으로 위의 <code>Task::Jenkins</code> 를 설치함으로 어느 정도 끝났다고 볼 수 있습니다.</p></li>
</ul>


<h3>Jenkins 설치</h3>

<p>  회사내의 서버에 Jenkins 를 설치했습니다. Ubuntu 10.10 Server 버젼이며, Jenkins 의 설치는 그렇게 어렵지 않습니다.</p>

<p>  쉽게 Google 에서 <em>Jenkins Ubuntu</em> 로 검색해서 나온 것들 중 첫번째를 골라봤습니다.</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">Installing Jenkins on Ubuntu</a></li>
</ul>


<p>  <code>apt</code> source 추가하고 <code>aptitude</code> 로 설치하고, Apache 에서 Proxy 설정해주고, 이에 대한 자세한 이야기는 위의 링크에 자세히 나와 있으니 참고하시길 바랍니다.</p>

<p>  NHN 공개개발자 교육에서는 보안상의 문제로 Tomcat 위에다가 얹어놓기를 권하셨지만, Jenkins 자체의 Standalone Server 로 충분하지 않나 생각됩니다. 뭐 어차피 사내 네트워크 안에서 사용할 것인데... 라며... =3</p>

<p>  아무튼 이렇게 띄워서 실제로 사내에서 사용하고 있는 Jenkins Top Page 는 아래와 같습니다.</p>

<p><img src="http://lh6.googleusercontent.com/--lGDWehSz5k/TwKGZAtvsUI/AAAAAAAAA9w/tRFttK10-wg/jenkins-top-page.png" alt="Jenkins Top" /></p>

<p>  한번에 적으려니 좀 길고 해서, 일단 밑밥깔기부터 하고 다음 글부터는 좀 더 자세한 Jenkins 에서 Perl 프로젝트 적용에 대해서 상세한 캡쳐와 함께 설명하고자 합니다.</p>
]]></content>
  </entry>
  
</feed>
