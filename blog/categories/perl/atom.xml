<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen's techlog]]></title>
  <link href="http://JEEN.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://JEEN.github.com/"/>
  <updated>2012-01-05T23:22:04+09:00</updated>
  <id>http://JEEN.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test::More - use 'subtest' instead of {} block]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block/"/>
    <updated>2012-01-05T20:33:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block</id>
    <content type="html"><![CDATA[<p>  여태껏 테스트코드를 써나가면서 그냥 {} 블록안에 일정한 흐름의 테스트 코드를 적곤 했었습니다.</p>

<p>``` perl
use Test::More;
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';</p>

<h1>Access /</h1>

<p>{</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>}</p>

<h1>Login</h1>

<p>{</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>}</p>

<h1>some action</h1>

<p>{</p>

<pre><code>...;
</code></pre>

<p>}
```</p>

<p>  일단 뭐 {} 블록으로 각 action 에 대한 접근결과를 테스트하고, <code>#</code> 로 주석표시를 하면서 하나둘 하나둘 각 블록에 <code>$req</code>, <code>$res</code> 를 추가했었습니다. 일단 뭐 {} 블록으로 묶으면서 <code>$req</code>, <code>$res</code> 따위의 변수의 재정의 등에 관한 경고같은 것이 안나와서 좋고, 제대로 분류가 되는 느낌이기도 했습니다.</p>

<h3>그냥 <code>subtest</code> 를 사용하면 어떨까?</h3>

<p>  그러는 도중에 <a href="http://search.cpan.org/perldoc?Test::More">Test::More 매뉴얼</a>을 읽어보다가 <code>subtest</code> 를 사용할 수 있다는 것을 알게 되었습니다.</p>

<p>``` perl
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';
use Test::More;</p>

<p>subtest 'access to /' => sub {</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>};</p>

<p>subtest 'Login' => sub {</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>};
```</p>

<p>  <code>subtest</code> 를 사용하면서 코드는 위처럼 바뀌었습니다. <code>#</code> 로 주석처리를 할 필요도 없고, 해당 <code>subtest</code> 마다 명확하게 무엇을 하는 지 확실하게 의미있는 <code>subtest</code> 의 이름으로 정해줄 수 있었습니다.</p>

<p>  <code>subtest</code> 로 테스트를 썼을 경우는 TAP 결과는 다음과 같습니다.</p>

<p>``` bash
$ prove t/myapp.t
ok 1 - access to /</p>

<pre><code>ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
1..3
</code></pre>

<p>ok 2 - Login</p>

<pre><code>ok 1 - Request should be suceed
...
1..3
</code></pre>

<p>....
1..3
ok
All tests successful.
Files=1, Tests=3, 10 wallclock secs ( 0.07 usr  0.01 sys +  6.16 cusr  0.61 csys =  6.85 CPU)
Result: PASS
```</p>

<p>  전체 테스트 횟수는 <code>subtest</code> 안의 테스트 항목이 아니라, <code>subtest</code> 의 갯수가 되는 것입니다.</p>

<p>  그리고 <code>subtest</code> 를 사용하지 않고 {} 블록을 이용해서 flat 하게 정의했을 때는 아래와 같습니다.</p>

<p><code>bash
...
ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
ok 4 - Request should be suceed
 ...
</code></p>

<p>  테스트 항목 1,4 번의 메시지가 같기 때문에 매번 달리 지정해줘야 되는 수고가 발생하죠. 그리고 각각의 테스트 항목 하나하나가 테스트 갯수가 되는 것입니다.</p>

<p>  사실은 위의 Jenkins 상의 <code>Test Result Trend</code> 의 그래프가 어느 순간 갑자기 뚝 떨어지길래, 어라 이상하다 싶어서 살펴본 결과, <code>subtest</code> 기준으로 카운트되어있는 것을 확인했습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-TSX-Kd5-fX4/TwWRjvHx2LI/AAAAAAAAA94/pYrEEgHBZic/test-result-trend.png" alt="Jenkins Test Result Trend 의 낙폭" /></p>

<p>  대충 위의 <code>#58</code> 번 빌드가 그 쯤이 되겠네요.</p>

<p>  아무튼 Jenkins 도입이후에 좀 더 테스트코드에 더 신경을 쓰고 있는 요즘입니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl - Mail Send II]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/04/perl-mail-send-ii/"/>
    <updated>2012-01-04T18:26:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/04/perl-mail-send-ii</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://jeen.github.com/blog/2011/12/29/perl-email-send/">Perl - Mail Send</a></p>

<p>이전에 Perl 에서 Mail Send 관련해서 한번 깨작거린 적이 있습니다.</p>

<p>오늘은 이에 대해서 추가적인 수정이 필요한 부분이 있어서, <code>MyApp::Mail</code> 을 조금 더 건드려 봤습니다.</p></li>
</ul>


<p>``` perl
package MyApp::Mail;
use Moose;
use Moose::Util::TypeConstraints;
use namespace::autoclean;
use Email::MIME;
use Email::MIME::Creator;
use Email::Sender::Simple 'sendmail';
use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>subtype 'MailAddresses' => as 'Str';</p>

<p>coerce 'MailAddresses',</p>

<pre><code>from 'ArrayRef',
    via { join(", ", (map { Encode::encode( "MIME-Header", $_ ) } @{ $_ })) };
 from 'Str',
     via { Encode::encode( "MIME-Header", $_ ) };
</code></pre>

<p>has to => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'MailAddresses',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
coerce    =&gt; 1,
</code></pre>

<p>);</p>

<p>has from => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has subject => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has body => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'Str',
</code></pre>

<p>);</p>

<p>has transport => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'HashRef'
</code></pre>

<p>);</p>

<p>has attachments => (</p>

<pre><code>is =&gt; 'ro',
isa =&gt; 'ArrayRef[Path::Class::File]',
default =&gt; sub { [] },
</code></pre>

<p>);</p>

<p>sub _get_parts {</p>

<pre><code>my $self = shift;

my @parts;
push @parts,
    Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; 'text/plain',
            charset      =&gt; 'utf8',
        },
        body =&gt; Encode::encode_utf8($self-&gt;body),
    );
for my $attachment (@{ $self-&gt;attachments }) {
    confess "File Not Found : $attachment" unless -f $attachment;
    my ($mime_type, $encoding) = MIME::Types::by_suffix($attachment-&gt;basename);
    $mime_type ||= 'multipart/mixed';
    my $file_body = $attachment-&gt;slurp;
    push @parts, Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; $mime_type,
            name         =&gt; $attachment-&gt;basename,
            filename     =&gt; $attachment-&gt;basename,
            encoding     =&gt; 'base64',
            disposition  =&gt; 'attachment',
        },
        body =&gt; $file_body,
    );
}
\@parts;
</code></pre>

<p>}</p>

<p>sub send {</p>

<pre><code>my $self = shift;

my $opt = {};
if ($self-&gt;transport) {
    $opt-&gt;{transport} = Email::Sender::Transport::SMTP-&gt;new( $self-&gt;transport );
}

my $email = Email::MIME-&gt;create(
    header =&gt; [
        From    =&gt; $self-&gt;from,
        To      =&gt; $self-&gt;to,
        Subject =&gt; $self-&gt;subject
    ],
    parts =&gt; $self-&gt;_get_parts,
);
sendmail($email, $opt);
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>1;
```</p>

<p>  일단 수정을 필요로 한 부분은, 똑같은 메일 내용을 둘 이상에게  보내야 할 경우입니다. 일반적으로 업체에서 보내는 메일의 헤더를 보면 <code>To</code> 에 본인만 들어가 있을 겁니다. 이게 일반적이죠.</p>

<p>  하지만 이번에는 사내 시스템 관련 리포트를 보내는 것이고, 특정 다수에게 보내며, 메일링이 없다는 전제하에서 움직였습니다.</p>

<p>변경된 부분은,</p>

<p>``` diff
package MyApp::Mail;
use Moose;
+use Moose::Util::TypeConstraints;
use namespace::autoclean;
@@ -9, 13 +10, 22 @@ use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>+subtype 'MailAddresses' => as 'Str';</p>

<p>+coerce 'MailAddresses',
+   from 'ArrayRef',
+        via { join(", ", (map { Encode::encode( "MIME-Header", $<em> ) } @{ $</em> })) };
+     from 'Str',
+         via { Encode::encode( "MIME-Header", $_ ) };
+
has to => (</p>

<pre><code>is      =&gt; 'ro',
</code></pre>

<ul>
<li> isa     => 'Str',</li>
<li> isa     => 'MailAddresses',
default => sub {

<pre><code>Encode::encode( "MIME-Header", $_[0] );
</code></pre>

<p>},
required => 1,</p></li>
<li> coerce    => 1,
);
```</li>
</ul>


<p>  입니다. subtype 을 지정하기 위해서 <code>Moose::Util::TypeConstraints</code> 를 use 할 필요가 있구요. <code>To</code> 헤더의 형식을 <code>MailAddresses</code> 라는 subtype 으로 받도록 합니다. 그냥 문자열 값이 들어오든 Array Reference 가 들어오든 그에 맞춰서 변환해주도록 했구요.</p>

<p>  이전 글에서 간략하게 Mail 테스트 방법에 대해서 소개했는데, 현재 위처럼 수정한 다음에 아래와 같이 테스트코드를 작성해서 문제없이 작동하는 것을 확인할 수 있었습니다.</p>

<p>``` perl send-mail.t
use strict;
use warnings;
use Test::Most;
use_ok 'MyApp::Mail';
use Path::Class::File;</p>

<p>BEGIN {</p>

<pre><code>$ENV{EMAIL_SENDER_TRANSPORT} = 'Test';
</code></pre>

<p>};</p>

<p>my %data_set = (</p>

<pre><code>to      =&gt; 'your@email.com',
from    =&gt; 'my@email.com',
subject =&gt; 'MailSender Test Subject',
body    =&gt; 'MailSender Test Body',
</code></pre>

<p>);</p>

<h1>Send a mail w/ attachments</h1>

<p>my $mailer = MyApp::Mail->new(</p>

<pre><code>%data_set,
attachments =&gt; [ 
    Path::Class::File-&gt;new('somefile.zip'),
    Path::Class::File-&gt;new('somefile.ee')
],
</code></pre>

<p>);</p>

<p>$mailer->send;</p>

<h1>Send a mail without attachments</h1>

<p>my $mailer2 = MyApp::Mail->new(%data_set);</p>

<p>$mailer2->send;</p>

<h1>Send a mail with Multiple Recipients</h1>

<p>my $mailer3 = MyApp::Mail->new(</p>

<pre><code>%data_set,
to =&gt; [ 'your2@email.com', 'anotheremail@gmail.com' ],
</code></pre>

<p>);</p>

<p>$mailer3->send;</p>

<p>my $deliveries = Email::Sender::Simple->default_transport->deliveries;
for my $deliv (@{ $deliveries }) {
  my $sent_addresses = join ", ", @{ $deliv->{successes} };
  ok $deliv->{successes}, 'Mail sent to '. $sent_addresses;
}
done_testing();
```</p>

<p>  물론 <code>$deliveries</code> 변수를 덤프해보면 각각의 메일헤더들이 존재하고 좀 더 항목당 세밀하게 테스트를  수행할 수 있겠지만, 여기서는 단순하게 이정도로 그치도록 합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl and Continuous Integration with Jenkins - I]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1/"/>
    <updated>2012-01-03T11:45:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1</id>
    <content type="html"><![CDATA[<h3>Jenkins 를 사용하기 까지</h3>

<p>  사실 지난주에 NHN 에서 주최하는 공개개발자 교육에  갔다왔었습니다. 평소 Jenkins 에 대해서 약간 환상 같은 게 있다고 할까, 필요성이 있다고 할까요. 좀 더 프로젝트의 품질이 나아지고 있다는 환상, 그런 걸 보면서 나름 보람을 느끼고 싶다라는 생각도 있었습니다.</p>

<p>  아무튼 Jenkins 교육은 Java 위주의 프로젝트에 적용하는 얘기였지만, 다른 언어에서도 충분히 지원된다라는 얘기를 익히들어왔기에 대강 실습을 따라하면서 감을 익히고 회사에 와서 본격적으로 Jenkins 를 만지기 시작했습니다.</p>

<h3>Perl &amp; Jenkins</h3>

<p>  Jenkins 교육에서는 Maven 을 위주로 여러가지 옵션(?) 을 추가하는 것으로 간단하게 각종 Report 를 뽑아내기 위한 xml 들을 생성할 수 있었습니다. 아쉽게도 Perl 로는 Maven 만큼 쉽게 그렇게 만들기는 어려웠지요.</p>

<p>  일단 Perl 에는 기본적으로 TAP 형식을 따르고 있기 때문에 Java 류의 JUnit 으로 결과를 뽑아낼 필요가 있었습니다. 그래서 TAP 를 JUnit 으로 쉽게 바꿔줄 수 있는 방법이 필요했죠.</p>

<p><code>bash
$ prove --formatter --timer TAP::Formatter::JUnit t
</code></p>

<p>  위와 같은 형식으로 <code>t</code> 디렉토리 아래의 테스트파일들을 테스트하며 결과는 <code>TAP::Formatter::JUnit</code> 에 의해서 xml 파일로 나오게 됩니다.</p>

<p>``` xml
<testsuites>
  &lt;testsuite failures="0"</p>

<pre><code>         errors="0"
         time="25.6525909900665"
         tests="1"
         name="Catalyst_controller_Admin-Activity_t"&gt;
&lt;testcase time="0"
          name="1 - Request should succeed"&gt;&lt;/testcase&gt;
&lt;system-out&gt;&lt;![CDATA[ok 1 - Request should succeed
</code></pre>

<p>1..1
]]&gt;</system-out></p>

<pre><code>&lt;system-err&gt;&lt;/system-err&gt;
&lt;/testsuite&gt;
</code></pre>

<p></testsuites>
```</p>

<h3>Task::Jenkins</h3>

<p>  사실은 Jenkins 에서 Perl 프로젝트를 올릴 때의 주요한 모듈의 묶음은 <a href="http://search.cpan.org/perldoc?Task::Jenkins">Task::Jenkins</a> 모듈로 제공되고 있습니다. Task::Jenkins 에 있는 모듈들은,</p>

<ul>
<li><a href="http://search.cpan.org/perldoc?TAP::Formatter::JUnit">TAP::Formatter::JUnit</a></li>
<li><a href="http://search.cpan.org/perldoc?App::Prove">App::Prove</a></li>
<li><p><a href="http://search.cpan.org/perldoc?Devel::Cover">Devel::Cover</a></p>

<p>입니다.</p>

<p><code>TAP::Formatter::JUnit</code> 의 경우는 위에서 설명했고, <code>App::Prove</code> 는 위의 테스트코드를 실행하는 커맨드인 <code>prove</code> 를 사용하기 위한 모듈입니다. <code>Devel::Cover</code> 는 Code Coverage 를 확인할 수 있는 모듈이구요.</p>

<p>일단 Jenkins 에서 Perl 프로젝트를 적용하는 준비는 기본적으로 위의 <code>Task::Jenkins</code> 를 설치함으로 어느 정도 끝났다고 볼 수 있습니다.</p></li>
</ul>


<h3>Jenkins 설치</h3>

<p>  회사내의 서버에 Jenkins 를 설치했습니다. Ubuntu 10.10 Server 버젼이며, Jenkins 의 설치는 그렇게 어렵지 않습니다.</p>

<p>  쉽게 Google 에서 <em>Jenkins Ubuntu</em> 로 검색해서 나온 것들 중 첫번째를 골라봤습니다.</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">Installing Jenkins on Ubuntu</a></li>
</ul>


<p>  <code>apt</code> source 추가하고 <code>aptitude</code> 로 설치하고, Apache 에서 Proxy 설정해주고, 이에 대한 자세한 이야기는 위의 링크에 자세히 나와 있으니 참고하시길 바랍니다.</p>

<p>  NHN 공개개발자 교육에서는 보안상의 문제로 Tomcat 위에다가 얹어놓기를 권하셨지만, Jenkins 자체의 Standalone Server 로 충분하지 않나 생각됩니다. 뭐 어차피 사내 네트워크 안에서 사용할 것인데... 라며... =3</p>

<p>  아무튼 이렇게 띄워서 실제로 사내에서 사용하고 있는 Jenkins Top Page 는 아래와 같습니다.</p>

<p><img src="http://lh6.googleusercontent.com/--lGDWehSz5k/TwKGZAtvsUI/AAAAAAAAA9w/tRFttK10-wg/jenkins-top-page.png" alt="Jenkins Top" /></p>

<p>  한번에 적으려니 좀 길고 해서, 일단 밑밥깔기부터 하고 다음 글부터는 좀 더 자세한 Jenkins 에서 Perl 프로젝트 적용에 대해서 상세한 캡쳐와 함께 설명하고자 합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl - Email Send]]></title>
    <link href="http://JEEN.github.com/blog/2011/12/29/perl-email-send/"/>
    <updated>2011-12-29T17:45:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2011/12/29/perl-email-send</id>
    <content type="html"><![CDATA[<p>  회사 선배이신 <a href="http://twitter.com/mintegrals">@mintegrals</a> 께서 최근에 사내 버그질라에 올려놓은 내용을 보고 약간 코드를 수정해봤습니다.
  내용인즉슨, 파일 첨부한 메일을 어떻게 보낼 수 있냐라는 것이었지요.
  기존에 써놨던 메일송신을 하는 모듈이 파일첨부를 고려하지 않았던 것이었는데, 그런 상황등을 고려해서 좀 더 수정해봤습니다.</p>

<h3>MyApp::Mail</h3>

<p>``` perl
package MyApp::Mail;
use Moose;
use namespace::autoclean;
use Email::MIME;
use Email::MIME::Creator;
use Email::Sender::Simple 'sendmail';
use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>has to => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has from => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has subject => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has body => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'Str',
</code></pre>

<p>);</p>

<p>has transport => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'HashRef'
</code></pre>

<p>);</p>

<p>has attachments => (</p>

<pre><code>is =&gt; 'ro',
isa =&gt; 'ArrayRef[Path::Class::File]',
default =&gt; sub { [] },
</code></pre>

<p>);</p>

<p>sub _get_parts {</p>

<pre><code>my $self = shift;

my @parts;
push @parts, 
    Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; 'text/plain',
            charset      =&gt; 'utf8',
        },
        body =&gt; Encode::encode_utf8($self-&gt;body),
    );

for my $attachment (@{ $self-&gt;attachments }) {
    confess "File Not Found : $attachment" unless -f $attachment;
    my ($mime_type, $encoding) = MIME::Types::by_suffix($attachment-&gt;basename);
    $mime_type ||= 'multipart/mixed';
    my $file_body = $attachment-&gt;slurp;
    push @parts, Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; $mime_type,
            name         =&gt; $attachment-&gt;basename,
            filename     =&gt; $attachment-&gt;basename,
            encoding     =&gt; 'base64',
            disposition  =&gt; 'attachment',
        },
        body =&gt; $file_body,
    );
}
\@parts;
</code></pre>

<p>}</p>

<p>sub send {</p>

<pre><code>my $self = shift;

my $opt = {};
if ($self-&gt;transport) {
    $opt-&gt;{transport} = Email::Sender::Transport::SMTP-&gt;new( $self-&gt;transport );
}

my $email = Email::MIME-&gt;create(
    header =&gt; [
        From    =&gt; $self-&gt;from,
        To      =&gt; $self-&gt;to,
        Subject =&gt; $self-&gt;subject
    ],
    parts =&gt; $self-&gt;_get_parts, 
);
sendmail($email, $opt);
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>1;
```</p>

<p>  파일첨부를 위한 <code>attachments</code> 접근자를 추가로 지정합니다. 첨부파일은 하나가 아닌 여러개가 가능하기에 <code>ArrayRef</code> 를 기본형식으로 합니다. 각 요소는 반드시 <code>Path::Class::File</code> 로 받도록 했습니다.</p>

<p>  <code>MIME::Types</code> 로 첨부파일의 확장자를 통해서 MIME-TYPE 을 뽑아내도록 하고, 알 수 없다면 <code>multipart/mixed</code> 로 지정했습니다.</p>

<p>  <code>transport</code> 레이어를 별도로 지정할 수 있으며, <code>transport</code> 의 지정이 없을 경우는 당연히 로컬호스트의 <code>smtp</code> 를 이용하도록 합니다.</p>

<h3>Using MyApp::Mail</h3>

<p>  위의 <code>MyApp::Mail</code> 을 이용하기 위해서 아래와 같이 <code>sendmail.pl</code> 이라는 스크립트를 준비했습니다.</p>

<p>``` perl</p>

<h1>sendmail.pl</h1>

<p>use strict;
use warnings;
use MyApp::Mail;
use Path::Class::File;</p>

<p>my $to    = 'your@email.com';
my $from  = 'my@email.com';
my $subject = 'MailSender Test Subject';
my $body    = 'MailSender Test Body';</p>

<p>my $mailer = MyApp::Mail->new(</p>

<pre><code>to =&gt; $to,
from =&gt; $from,
subject =&gt; $subject,
body    =&gt; $body,
attachments =&gt; [
  Path::Class::File-&gt;new('test.doc'),
  Path::Class::File-&gt;new('text.pdf')
],
transport =&gt; {
    host =&gt; 'smtp.gmail.com',
    port =&gt; 465,
    sasl_username =&gt; 'YOUR_GOOGLE EMAIL',
    sasl_password =&gt; 'YOUR_GOOGLE_PASS',
    ssl  =&gt; 1,
},
</code></pre>

<p>);</p>

<p>$mailer->send;
```</p>

<p>  위에서 언급한 <code>transport</code> 레이어에 지메일의 <code>smtp</code> 를 사용하도록 합니다. 이를 위해서 물론 Google 계정정보를 입력할 필요가 있습니다.</p>

<h3>How to Test?</h3>

<p>  <a href="http://search.cpan.org/~rjbs/Email-Sender-0.110001/lib/Email/Sender/Manual/QuickStart.pm#Testing">Email::Sender::Manual::QuickStart</a> 문서를 확인 해보면 Testing 관련 내용이 나옵니다.</p>

<p>``` perl
  use Test::More;
  BEGIN { $ENV{EMAIL_SENDER_TRANSPORT} = 'Test' }
  use YourCode;</p>

<p>  YourCode->run;</p>

<p>  my @deliveries = Email::Sender::Simple->default_transport->deliveries;
```</p>

<p>  위와같은 샘플코드가 제시되어 있는데,</p>

<p><code>perl
BEGIN { $ENV{EMAIL_SENDER_TRANSPORT} = 'Test' }
</code></p>

<p> 가 지정되면, 실제로 메일 송신이 이뤄지지 않습니다.</p>

<p><code>perl
  my @deliveries = Email::Sender::Simple-&gt;default_transport-&gt;deliveries;
</code></p>

<p>  에서 그동안 송신한 메일건수당 성공실패를 판별할 수 있고, 작성된 메일 내용 또한 확인이 가능합니다. 테스트코드를 작성함에 있어서 위의 두 부분이 절대적으로 필요합니다.</p>

<p>  위처럼 테스트 코드를 작성할 시에는 실제로 메일 송신을 하지 않았기에 <code>transport</code> 레이어에서 발생하는 어떤 불상사는 감지할 수 없습니다.</p>

<h3>Conclusion</h3>

<ul>
<li><a href="http://jeen.tistory.com/entry/Perl-Perl-%EB%A1%9C-%EB%A9%94%EC%9D%BC%EB%B3%B4%EB%82%B4%EA%B8%B0-SSMTP-%EC%99%80-MIMELite-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%84%9C">Perl 로 메일보내기 ... SSMTP 와 MIME::Lite 를 사용해서!</a></li>
</ul>


<p>  이전에 메일보내기 관련해서 <code>SSMTP</code> + <code>MIME::Lite</code> 를 사용하는 그런 코드를 2008년쯤에 썼었네요. 부끄럽습니다. 2009년부터는 아마 <code>MIME::Lite</code> 를 안 썼던 것 같네요.</p>

<p>  뭐 당장 필요로 하는 부분만 구현을 한 것일 뿐인지라, 차후에 다른 어떤 요구사항이 있다면 그에 맞춰서 다시 한번 소개를 해볼까 합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catalyst - ActionRole]]></title>
    <link href="http://JEEN.github.com/blog/2011/12/27/catalyst-actionrole/"/>
    <updated>2011-12-27T21:14:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2011/12/27/catalyst-actionrole</id>
    <content type="html"><![CDATA[<h3>Action Role</h3>

<p>  오래된 이야기이지만 Catalyst 가 Moose 기반으로 만들어지면서 ActionRole 이라는 개념이 만들어졌었지요.
  실제 업무에서 적용해볼 껀덕지가 없어서 만져보지는 못했습니다만, 최근에 업무에서 ActionRole 을 적용해서 간단한 수정작업을 진행했습니다.</p>

<p>``` perl
package MyApp::Web::ActionRole::Logger;
use Moose::Role;
use namespace::autoclean;</p>

<p>after execute => sub {</p>

<pre><code>my ($self, $controller, $c) = @_;

# ...
</code></pre>

<p>}</p>

<p>1;
```</p>

<p>  일단 업무에서 사용한 ActionRole 의 기본형은 위와 같습니다.</p>

<p>  Catalyst App 을 만들 때 사용한 네임스페이스를 기준으로 <code>ActionRole::[RoleName]</code> 을 사용합니다. 그러니 위에서 봤을 때 Catalyst App 의 이름은 <code>MyApp::Web</code> 이 되겠죠. 당연히 ActionRole 의 이름은 Logger 입니다.</p>

<p>  또한, Logger 라는 ActionRole 을 참조할 때, Catalyst 는 <code>MyApp::Web</code> 뿐만 아니라 <code>Catalyst::ActionRole::Logger</code> 가 있으면 이를 참조할 수 있습니다.
   <code>MyApp::Web::ActionRole::Logger</code> 와 <code>Catalyst::ActionRole::Logger</code> 두개가 존재할 시에는 앞의 <code>MyApp::Web::ActionRole::Logger</code> 를 우선적으로 사용하게 됩니다.</p>

<h3>주의점</h3>

<p>  위의 코드의 <code>after execute =&gt; sub { ... }</code> 에서 주의할 점이 한가지 있습니다. Catalyst 의 <code>auto</code>, <code>begin</code>, <code>end</code> 등의 Private Action 들 또한 실행이 된다는 점 입니다.
  예를들어 <code>/user/login</code> 이라는 수행하기 위해서 각 컨트롤러 마다 <code>auto</code>, <code>begin</code> 등의 Private Action 이 정의되어 있다고 하면, 아마 아래와 같이 나올 것입니다.</p>

<p><code>
  .------------------------------------------------------------+-----------.
| Action                                                     | Time      |
+------------------------------------------------------------+-----------+
| /auto                                                      | 0.000600s |
| /user/auto                                                 | 0.000208s |
| /user/login                                                | 0.000219s |
| /user/end                                                  | 0.009542s |
|  -&gt; MyApp::Web::View::Default-&gt;process                    | 0.008665s |
'------------------------------------------------------------+-----------'
</code></p>

<p>  애시당초 <code>/user/login</code> 가 끝나면 무엇무엇을 한다라고 <code>ActionRole::Logger</code> 에 정의한 마당에서 해당 액션이 2-3회 중복해서 실행되는 경우가 발생하는 것입니다. 바로 <code>auto</code>, <code>end</code> 가 끝난 다음에도 해당 ActionRole 을 참고한다는 것이죠.</p>

<p>``` perl
package MyApp::Web::ActionRole::Logger;
use Moose::Role;
use namespace::autoclean;</p>

<p>after execute => sub {</p>

<pre><code>my ($self, $controller, $c) = @_;

return if $self =~ /(?:auto|begin|end)/;

# ...
</code></pre>

<p>}</p>

<p>1;
```</p>

<p>  그래서 적절하게 <code>auto</code>, <code>begin</code>, <code>end</code> 는 필터링해줍니다. <code>$self</code> 변수에 어떤 액션에서 온 것인지 알 수 있습니다. 전 처음에 계속 <code>$c-&gt;action</code> 으로 알고 착각을 했더랬습니다.</p>

<p>  아, 물론 ActionRole 을 추가해줬다고 바로 쓸 수 있는 것은 아닙니다.
  해당 ActionRole 을 사용할 컨트롤러의 기본 상속 모듈을 <code>Catalyst::Controller</code> 에서 <code>Catalyst::Controller::ActionRole</code> 로 바꾸도록 합니다.</p>

<p><code>perl
package MyApp::Web::Controller::Root;
use Moose;
use namespace::autoclean;
BEGIN { extends 'Catalyst::Controller::ActionRole` }
...
</code></p>

<h3>Conclusion</h3>

<p>  위의 예제에서는 그냥 단순히 <code>Root</code> 에서만 사용하고 있는 것 처럼 보이지만, 업무상에서는  특정 컨트롤러 몇개를 제외한 나머지 모든 컨트롤러에서 공통으로 사용하고 있습니다.</p>

<p>  거의 모든 컨트롤러 상의 액션이 끝날 때, 시작될 때, 혹은 양쪽 모두에서 공통적으로 특정 행동을 정의할 때 ActionRole 과 함께하면 좀 더 유연하고 아름다운 코드작성에 도움이 되지 않을까 생각하고 있습니다.</p>
]]></content>
  </entry>
  
</feed>
