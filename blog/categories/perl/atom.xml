<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen's techlog]]></title>
  <link href="http://jeen.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://jeen.github.com/"/>
  <updated>2013-04-04T13:00:45+09:00</updated>
  <id>http://jeen.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Rex - Environment]]></title>
    <link href="http://jeen.github.com/blog/2013/04/04/using-rex-environment/"/>
    <updated>2013-04-04T12:28:00+09:00</updated>
    <id>http://jeen.github.com/blog/2013/04/04/using-rex-environment</id>
    <content type="html"><![CDATA[<p> 주위 사람들은 Chef나 Fabric 을 많이 쓴다고 하지만 ( 그보다 손으로 여전히 하는 사람들이 더 많은 것 같기도 ), Rex 에 그냥 적응하면서 여전히 <a href="http://rexify.org">Rex</a> 를 사용하고 있습니다. 회사를 옮기고 새로운 작업환경을 둘러보다가 이전의 패턴이 그대로 먹히지 않기에 기존에 사용하던 Rexfile 의 구조도 살며시 바꿔나가야 했습니다.</p>

<h2>Rex 초기 설정</h2>

<p> Rex 가 설치되어 있다면, <code>rexify</code> 커맨드를 사용할 수 있습니다. 이 커맨드를 이용해서 초기 뼈대를 만들어 봅니다.</p>

<p><code>
$ rexify M
</code></p>

<p>그러면 아래와 같은 구성으로 Rex 를 사용하기 위한 기본 구성이 마련됩니다.</p>

<p>```
$ tree
.
├── Rexfile
└── lib</p>

<pre><code>└── M.pm
</code></pre>

<p>```</p>

<p><code>Rexfile</code> 에는 온갖 설정 정보를 넣고, M.pm 에는 각 Task 를 정의해둡니다.</p>

<h2>서버 그룹 위의 또 다른 그룹을 정의한다?</h2>

<p>　지금까지는 서버의 목적, 그러니까 <code>DB</code> 서버 면 <code>DB</code> 그룹에 , <code>Web</code> 서버면 <code>Web</code> 그룹에 묶으면 되었는데요. 하지만 현재의 회사에서는 서비스그룹이 나뉘어져 있기도 하고, 계정정보도 좀 다르기도 하고 그런 게 있습니다. -_-;</p>

<p> 그래서 <code>environment</code> 로 각 그룹을 묶어서 별도로 관리하기로 했습니다.</p>

<p> 그런 것을 고려해서 써놓은 Rexfile 은 아래와 같습니다.</p>

<p>```
use Rex -feature => 0.40;</p>

<p>environment sdt => sub {</p>

<pre><code>set user =&gt; "xxxx";
set password =&gt; "xxxxxx";
set -passauth;

set group =&gt; "all" =&gt; qw/1.2.3.51 1.2.3.52 1.2.3.53 1.2.3.54 1.2.3.55 1.2.3.56/;
set group =&gt; "db"  =&gt; qw/1.2.3.53 1.2.3.54/;
set group =&gt; "web" =&gt; qw/1.2.3.51 1.2.3.52 1.2.3.55 1.2.3.56/;
</code></pre>

<p>};</p>

<p>environment pshd => sub {</p>

<pre><code>set user =&gt; "xxxx";
set password =&gt; "xxxxxxxx";
set -passauth;
set group =&gt; "all" =&gt; qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34 1.2.4.35 1.2.4.36/;
set group =&gt; "db"  =&gt; qw/1.2.4.35 1.2.4.36/;
set group =&gt; "web" =&gt; qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34/;
</code></pre>

<p>};</p>

<p>require M;
```</p>

<p>이렇게 <code>sdt</code> 와 <code>pshd</code> 라는 environment 를 따로 빼놓고 그 안에 각각 전체와 Web, DB 각각을 정의해둡니다.</p>

<p> <code>M.pm</code> 에는 <code>restart-opsview-agent</code>, <code>restart-munin-node</code>, <code>restart-apache</code>, <code>deploy-apps</code> 같은 뭐 이런저런 Task 들이 정의되어 있다고 치고…</p>

<p> 그런 것들을 각 environment 의 그룹단위로 실행시키도록 합니다.</p>

<p><code>
$ rex -E sdt -G all M:restart-opsview-agent
</code></p>

<p> 위처럼 <code>-E</code> 의 인자값으로 environment 를 지정하고 <code>-G</code> 의 인자값으로 all 그룹을 지정해줌으로써, sdt 의 전체 서버에 대해서 <code>opsview-agent</code> 를 재시작하게끔 합니다.</p>

<h2>결론</h2>

<p> 사실은 뭐 각 서버에 SSH Key 를 박아넣고 사용해야 좀 더 안심이 되기도 하지만, 여기에는 뜻모를 어른들의 사정이 숨어져 있는지라 쉽게 그럴수는 없기도 하답니다. -_-; 좀 더 시간을 두고 뭐 여러가지 불안요소와 편의성을 도모하기로 하고…</p>

<p> 터미널 사용에 익숙하지 않은 팀원들을 위해서 <code>Rex::WebUI</code> 도 살며시 검토해봤는데, 아직까지는 Task 에 기재된 정보를 기준으로 읽어들이는 것 밖에 되지 않는지라… 위처럼 그룹을 지정하거나 environment 를 지정하거나 하는 것은 불가능하군요. 뭐 어차피 서버 데몬을 아무나 만지게 하고 그러는 것도 조심스러운 지라… -_-;; 꼭 모두가 써야하는 것인가 하는 의문이 있어서, 이건 뭐 전제자체가 붕괴되는 군요.</p>

<p> 아무튼 Rex 괜찮습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cpanm 1.6 is here for you]]></title>
    <link href="http://jeen.github.com/blog/2013/02/28/cpanm-1-dot-6-is-here-for-you/"/>
    <updated>2013-02-28T09:34:00+09:00</updated>
    <id>http://jeen.github.com/blog/2013/02/28/cpanm-1-dot-6-is-here-for-you</id>
    <content type="html"><![CDATA[<p> 엊그제 cpanm 1.6 이 릴리즈되었습니다. 그동안 개발버젼으로 1.6에 포함될 기능들이 일부 소개되어 왔지만, 아무튼 뭐 @miyagawa 씨가 친히 Screencast 까지 준비해서 소개할 정도로 많은 기능들이 추가되었습니다.</p>

<p> <iframe width="560" height="315" src="http://www.youtube.com/embed/6Vglyf7X2S8" frameborder="0" allowfullscreen></iframe></p>

<h2>버젼지정 설치</h2>

<p><code>
$ cpanm MIYAGAWA/Plack-1.0015.tar.gz
</code></p>

<p>위처럼 번거로운 버젼지정 설치방식이</p>

<p><code>
$ cpanm Plack@1.0015
</code></p>

<p>이렇게 간단해졌습니다.</p>

<p>예전에 <code>Mail::Sender</code> 의 마이너버젼에 따라서 인코딩지정이 좀 엉망이 되어서 우회코드를 쓸 까 하다가</p>

<p>그냥 증상이 나타나기 이전버젼으로 땜빵으로 버티던 기억이 있습니다. (물론 해당 버젼의 동작이 이상해서 뭐 금방 업데이트 되었었지만…)</p>

<h2>개발버젼 설치</h2>

<p><code>
$ cpanm --dev Plack
</code></p>

<p><code>--dev</code> 옵션을 이용하여 개발버젼의 모듈을 설치할 수 있습니다.</p>

<p>저같은 경우는 요즘 거의 개발버젼을 보고 사용하는 경우가 없어서 쓸 일은 없을 것 같습니다.</p>

<ul>
<li>버젼범위 지정</li>
</ul>


<p> 1.0000 이상 2.0000 미만의 Plack 모듈 설치</p>

<p><code>
$ cpanm Plack~"&gt;= 1.0000, &lt; 2.0000"
</code></p>

<p> 1.0000 버젼의 Plack 설치 (<code>cpanm Plack@1.0000</code> 과 동일합니다.)</p>

<p><code>
$ cpanm Plack~"== 1.0000"
</code></p>

<p> 1.0000 이상이지만 1.0016 버젼은 제외한 가장 최신의 Plack 모듈 설치</p>

<p><code>
$ cpanm Plack~"&gt;= 1.0000, != 1.0016"
</code></p>

<p>사실 <code>Makefile.PL</code> 에 의존모듈들을 넣었을 때 위와 같은 표기가 필요할 경우가 발생할 수 있겠습니다만, 대개의 경우는 특정 버젼만 지정해서 사용하는 경우가 많았기 때문에 어떨런지 잘 모르겠습니다.</p>

<h2>Git Repository 에서 받아서 설치</h2>

<p> 몇몇 CPAN Author 들을 보면, CPAN 에 올릴 만큼 정비되지 않았다는 이유로 Github 에만 공개해놓는 경우를 많이 볼 수 있습니다. 몇번 그런 경우가 있었고, 일부러 다른 툴을 사용해서 Github 에서 CPAN Module 을 설치했던 기억도 있습니다. 이제부터 cpanm 이 이런 케이스를 지원해주니 다행이군요.</p>

<p> 기본 브랜치를 설치</p>

<p><code>
$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git
</code></p>

<p> devel 브랜치를 설치</p>

<p><code>
$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git@devel
</code></p>

<p> 특정 커밋내용이 적용된 부분을 설치</p>

<p><code>
$ cpanm git://github.com/JEEN/p5-WebService-Aladdin.git@730fbd0a80
</code></p>

<h2>결론</h2>

<p> perlbrew 에서 <code>perlbrew install-cpanm</code> 으로 설치된 cpanm 을 사용하고 있었는데,</p>

<p><code>
$ cpanm --self-upgrade
</code></p>

<p> 로는 perlbrew 를 통해서 설치된 cpanm 의 버젼이 바뀌지 않는군요. 그럴 경우는,</p>

<p><code>
$ perlbrew install-cpanm
</code></p>

<p> 을 통해서 기존의 cpanm 을 덮어써서 설치할 수 있습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A usecase of App::Fatpacker - Nagios Plugin]]></title>
    <link href="http://jeen.github.com/blog/2012/12/26/a-usecase-of-app-fatpacker/"/>
    <updated>2012-12-26T23:48:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/12/26/a-usecase-of-app-fatpacker</id>
    <content type="html"><![CDATA[<p> 최근 업무때문에 Nagios Plugin 을 만져야 하는 일들이 빈번하게 있었고, 앞으로도 발생할 소지가 상당히 높습니다. 이런 Nagios Plugin 을 만들거나 기존에 만들어 진 것들을 간편하게 다른 복수의 서버에 배포하는 일도 필요합니다.</p>

<p> Nagios Plugin 이야 굳이 언어를 가리지 않는다고 치더라도, 언어의 특정 라이브러리에 의존을 가지는 경우가 많습니다. MongoDB 용 Nagios Plugin 에는 Python 의 pymongo 라이브러리를 설치해야하는 경우가 있지요.</p>

<p> 일례로 Redis 용 Nagios Plugin 을 설치할 시에는 Redis CPAN 모듈을 필요로 합니다. 그런데 Redis 서버가 여러대이고, 이 여러대의 서버에 매번 Redis 모듈을 깔고, Redis 모니터링용 Nagios Plugin 도 설치를 해야하는 경우가 있습니다. 그냥 뭐 시간을 좀 허비해서라도 그렇게 번거로운 일을 하면 일이야 끝나겠지만, 현인(@aer0 님)의 조언을 빌어서 <a href="http://metacpan.org/module/App::FatPacker">App::FatPacker</a> 를 사용해서 단일 스크립트에 우겨넣는 방향으로 돌리도록 합니다.</p>

<p> 우선은 <code>App::FatPacker</code> 를 설치하면 <code>fatpack</code> 이라는 커맨드를 사용할 수 있습니다.</p>

<p> <a href="http://exchange.nagios.org">Nagios Exchange</a> 에서 찾아낸 <a href="http://exchange.nagios.org/directory/Plugins/Databases/check_redis-2Epl/details">check_redis</a> 중에 <code>check_redis.pl</code> 파일이 위에 말한대로 Redis 모듈에 의존이 걸린 상황입니다.</p>

<p> 그럼 우선 <code>fatpack</code> 커맨드로 다음과 같이 입력을 합니다.</p>

<p><code>bash
$ fatpack trace check_redis.pl
check_redis.pl syntax OK
</code>
 결과 <code>syntax OK</code> 가 뜨고 해당 디렉토리에 <code>fatpacker.trace</code> 라는 파일이 생성됩니다.</p>

<p><code>bash
$ cat fatpacker.trace
IO/Handle.pm
List/Util.pm
Getopt/Long.pm
SelectSaver.pm
IO/Socket.pm
Fcntl.pm
Text/ParseWords.pm
Symbol.pm
Scalar/Util.pm
IO/Socket/INET.pm
Errno.pm
fields.pm
warnings/register.pm
Encode/Alias.pm
Time/HiRes.pm
Encode/Config.pm
Encode/Encoding.pm
Redis.pm
Encode.pm
base.pm
Config.pm
IO.pm
IO/Socket/UNIX.pm
Carp.pm
bytes.pm
Exporter/Heavy.pm
vars.pm
constant.pm
Socket.pm
Try/Tiny.pm
IO/Select.pm
overload.pm
lib.pm
DynaLoader.pm
Data/Dumper.pm
</code></p>

<p>내용을 보면 말 그대로 해당 모듈이 가지고 있는 의존 모듈이 좌르르륵 표시됩니다. 물론 걔중에는 Core 모듈도 있기도 합니다.</p>

<p> 일단 <code>App::FatPacker</code> SYNOPSIS 대로 진행을 해보면…</p>

<p><code>bash
$ fatpack packlists-for `cat fatpacker.trace`  &gt; packlists
</code></p>

<p>위 결과로 생긴 <code>packlists</code> 는 파일은 다음과 같은 내용을 가집니다.</p>

<p><code>bash
$ cat packlists
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/5.14.0/x86_64-linux-thread-multi/auto/Time/HiRes/.packlist
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Redis/.packlist
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Try/Tiny/.packlist
</code></p>

<p>각 의존 모듈 위치에 맞춰서 <code>.packlist</code> 파일이 생성되고, 그 내용은…</p>

<p><code>bash
$ cat /home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/x86_64-linux-thread-multi/auto/Redis/.packlist
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis.pm
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis/Hash.pm
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/Redis/List.pm
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis.3
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis::Hash.3
/home/jeen/perl5/perlbrew/perls/perl-5.14.0/man/man3/Redis::List.3
</code></p>

<p>위와 같습니다.</p>

<p>그리고 다음 커맨드를 입력해봅니다.</p>

<p><code>bash
$ fatpack tree `cat packlists`
</code></p>

<p>그 결과 현재 디렉토리에서 <code>fatlib</code> 이라는 디렉토리가 생성되고 그 안에 관련 의존모듈들이 복사됩니다.</p>

<p><code>bash
$ tree
…
├── fatlib
│   ├── Redis
│   │   ├── Hash.pm
│   │   └── List.pm
│   ├── Redis.pm
│   ├── Try
│   │   └── Tiny.pm
│   └── x86_64-linux-thread-multi
│       ├── Time
│       │   └── HiRes.pm
│       └── auto
│           └── Time
│               └── HiRes
│                   ├── HiRes.bs
│                   └── HiRes.so
…
</code></p>

<p>그럼 다음 커맨드를 입력해보면…</p>

<p><code>bash
$ (fatpack file; cat check_redis.pl ) &gt; check_redis.packed.pl
Can't stat /home/jeen/fp/tt/lib: 그런 파일이나 디렉터리가 없습니다
 at /home/jeen/perl5/perlbrew/perls/perl-5.14.0/lib/site_perl/5.14.0/App/FatPacker.pm line 200
BEGIN failed--compilation aborted at /home/jeen/perl5/perlbrew/perls/perl-5.14.0/bin/fatpack line 3.
</code></p>

<p>제대로 동작하지 않습니다. 에러가 발생하네요. 정답은 에러메시지에 있습니다. <code>App::FatPacker</code> 자체는 Perl Library 규칙에 정형화된 디렉토리 구조를 가정하고 있습니다. 즉 <code>lib</code> 디렉토리가 존재하지 않기 때문에 발생하는 것이죠. 뭐 물론 다운받은 <code>check_redis.pl</code> 파일 하나만 있는 데 <code>lib</code> 디렉토리를 가지고 뭐 더 넣고 자시고 할 것도 아닌데…, 그래도 뭐 일단 사태해결을 위해서 아무것도 없어도 그냥 <code>lib</code> 디렉토리 하나는 만들어 줍니다.</p>

<p>그리고 다시 실행해보면 <code>check_redis.packed.pl</code> 이라는 파일이 생성됩니다.</p>

<p>``` perl
 # This chunk of stuff was generated by App::FatPacker. To find the original
 # file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;</p>

<p>$fatpacked{"Redis.pm"} = &lt;&lt;'REDIS';
  package Redis;</p>

<p>  # ABSTRACT: Perl binding for Redis database
  our $VERSION = '1.955'; # VERSION
  our $AUTHORITY = 'cpan:MELO'; # AUTHORITY
  …
```</p>

<p> 일단 Nagios Plugin 은 기본 실행권한을 가지는 파일로 해두는 것이 여러모로 편합니다. 한가지 주의할 점은 일단 위처럼 생성된 파일에서 shebang line 이 존재하지 않기때문에 shebang line 을 추가해주면 됩니다. :-)</p>

<p><code>perl
 #!/usr/bin/env perl
</code></p>

<p> 위의 내용을 <code>check_redis.packed.pl</code> 파일의 첫째줄에 추가해줍니다.</p>

<p> 그리고 완성된 파일들을 Redis 서버에 붙여서 <code>check_nrpe</code> 등으로 동작을 확인하고 설정에 추가하는 것으로 관련된 작업은 끝이 났습니다.</p>

<p> 파일 중앙배포와 관련해서도 다양한 이슈가 있지만 이에 관련해서는 추후 <code>Rex</code> 를 다루면서 이야기를 계속할 까 합니다.</p>

<p> 다 쓰고 나서 검색을 해보니 예전에 @aer0 님께서 작성하신 블로그 기사가 있군요.</p>

<ul>
<li><a href="http://aero2blog.blogspot.kr/2010/09/perl-appfatpacker.html">Perl 스크립트에 필요한 모듈 같이 넣기 App::FatPacker</a></li>
</ul>


<p>덩달아서 같이 참고하시면 좋을 것 같습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.proverc for less typing]]></title>
    <link href="http://jeen.github.com/blog/2012/11/26/proverc-for-less-typing/"/>
    <updated>2012-11-26T21:44:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/11/26/proverc-for-less-typing</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jeen.github.com/blog/2012/11/21/using-test-pretty/">http://jeen.github.com/blog/2012/11/21/using-test-pretty/</a></li>
</ul>


<p>그러고보니 앞전에 쓴 글에서</p>

<p><code>bash
$ prove -Ilib -Pretty -v -lr
</code></p>

<p>요렇게 길게 쓰고 있었는데, 문서도 제대로 안보고 이래저래 옵션들을 갖다붙이다보니 돌이켜보면 참 부끄럽기 그지 없습니다.</p>

<ul>
<li><a href="https://metacpan.org/module/prove#OPTIONS">https://metacpan.org/module/prove#OPTIONS</a></li>
</ul>


<p>위의 prove 문서를 참고로해서 제가 무엇을 잘못했는지 다시 한번 돌이켜봤습니다.</p>

<h3>-Ilib 과 -l 은 같다.</h3>

<p> 그러니까 위에서는 <code>-Ilib</code> 과 <code>-lr</code> 로 같이 쓰고 있었는데 -_-;;</p>

<p><code>
-l,  --lib             Add 'lib' to the path for your tests (-Ilib).
</code></p>

<p><code>-l</code> 로 단순히 줄여서 표현할 수 있습니다. 해당 옵션이 무엇인지도 모르고 그냥 붙여쓰고 있었다니...</p>

<h3>타이핑횟수를 줄인다.</h3>

<p>그러니까 매번 테스트할 때마다</p>

<p><code>
$ prove -Pretty -lvr
</code></p>

<p>이렇게 쓰기 참 번거롭지요.</p>

<p>그러고보니 해당 프로젝트 루트아래에 <code>.proverc</code> 를 만들어서 사용하는 방법이 있었습니다.</p>

<p><code>
-l
-v
-r
-Pretty
</code></p>

<p>이렇게 해두면 이제 앞으로는</p>

<p><code>
$ prove
</code></p>

<p>만으로 위의 옵션을 활성화한 채로 테스트를 동작시킬 수 있습니다.</p>

<h3>결론</h3>

<p>똑같은 일을 3번, 4번하다 보면 가끔 내가 뭐하는 짓인가 하는 생각이 들 때가 있는데… 좀 더 빨리 깨달았으면 좋았을 것을 이라는 생각을 그때마다 하게 됩니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Test::Pretty]]></title>
    <link href="http://jeen.github.com/blog/2012/11/21/using-test-pretty/"/>
    <updated>2012-11-21T22:40:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/11/21/using-test-pretty</id>
    <content type="html"><![CDATA[<p> 사실 <code>TAP</code> 의 결과자체는 그렇게 이쁘장하지 않습니다.
  이전에 <code>NHN Deview 2012</code> 에서 <code>Mocha</code> 로 돌렸을 때 나오는 이쁨직한 테스트 결과를 보고,</p>

<blockquote><p>아, 저러면 왠지 테스트코드 쓰고, 돌릴 만하겠다</p></blockquote>

<p> 라는 뻘생각이 들었습니다. 하지만 전 테스트코드를 그렇게 용의주도하게 쓰지 않는 편이어서 그냥 다른 세상 이야기라고 넘겼습니다.</p>

<p> 그러는 와중에 일본의 Perl IRC 채널에서 <code>Test::*</code> 와 <code>TAP</code> 등에 대한 여러가지 회의론(?) 같은 이야기가 들려오다가 <code>BDD</code> 나 테스트 결과 자체가 하나의 <code>Spec</code> 으로 재이용되는 등의 이야기를 듣고는 많이 감화되었죠.</p>

<p> 그러는 중에 @tokuhirom 씨가 최근에 내놓은 <code>Test::Pretty</code> 와 <code>Test::Ika</code> 라는 모듈이 등장했습니다.</p>

<ul>
<li><a href="http://metacpan.org/module/Test::Pretty">Test::Pretty</a></li>
<li><a href="http://metacpan.org/module/Test::Ika">Test::Ika</a></li>
</ul>


<p><code>Test::Ika</code> 의 경우는 Perl5 용 <code>BDD</code> Framework 의 자리를 노리는 그런 모듈입니다만.. 현재의 버젼(<code>0.02</code>)에서는 생각대로 결과가 나와주지 않기에 조금 아쉬웠습니다.</p>

<p>그게 <code>describe</code>, <code>it</code> 등의 <code>BDD</code> 에서 사용하는 구문을 사용하고 있지만, <code>Test::Mojo</code> 처럼 <code>Test::More</code> 를 래핑한 모듈에서 사용할 때라든가… 좀 많이 아쉬운 장면들이 아직 있습니다. 뭐 물론 만든 지 얼마 안되기도 하고 그런 의미에서는 전도유망하다고할까요 :-)</p>

<p><code>Test::Pretty</code> 의 경우는 크게 이를 고려하지 않고도 흔히  사용하는 <code>Test::More</code> 로  테스트코드를 쓰고, <code>prove</code> Plugin 으로 동작합니다. 이름 그대로 결과를 이쁘게 보여준다는 것이죠.</p>

<p>다음처럼 말이죠.</p>

<h3>일반적인 TAP 형식의 출력</h3>

<p><img src="https://lh5.googleusercontent.com/-trTeNFoXQtU/UKzc4yghokI/AAAAAAAACFY/zaEbENGNHOQ/test-pretty-01.png" alt="일반적인 TAP 형식" /></p>

<h3>Test::Pretty 를 이용한 출력</h3>

<p><img src="https://lh3.googleusercontent.com/-okmAPP0EmC8/UKzc74KHsYI/AAAAAAAACFg/rthGC2gQn_E/test-pretty-02.png" alt="Test::Pretty 를 이용한 출력" /></p>

<h3>어떻게 실행을?</h3>

<p>Pretty 형식으로는 단일파일만 나오고, 전체 테스트코드를 한번에 돌렸을 때는 위처럼 나오지 않기에 왜 그럴까 고심해보다가 아래처럼 테스트코드를 실행하면 제대로 동작하는 것을 확인했습니다.</p>

<p><code>
$ prove -Ilib -Pretty -v -lr
</code></p>

<h3>결론</h3>

<p> JS 테스트 프레임워크인 <a href="http://visionmedia.github.com/mocha/">Mocha</a> 를 들여다 봤는데 여러모로 베껴왔으면 하는 그런 세련됨이 있네요. :-)</p>
]]></content>
  </entry>
  
</feed>
