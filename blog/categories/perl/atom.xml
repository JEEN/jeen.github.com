<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen's techlog]]></title>
  <link href="http://JEEN.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://JEEN.github.com/"/>
  <updated>2012-02-07T20:50:01+09:00</updated>
  <id>http://JEEN.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Date::Holidays::KR 0.01 Released]]></title>
    <link href="http://JEEN.github.com/blog/2012/02/07/date-holidays-kr-0-dot-01-released/"/>
    <updated>2012-02-07T20:28:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/02/07/date-holidays-kr-0-dot-01-released</id>
    <content type="html"><![CDATA[<p>  회사의 경영자 @y0ngbin 께서 <code>is_bizday</code> 라는 스크립트를 만들어서 쓰는 것을 보고 호오 했었는데...</p>

<p>  <script src="https://gist.github.com/1646007.js?file=is_bizday.pl"></script></p>

<p>  알고보니 내용인즉슨 HTTP Request 를 날리고 그 결과를 파싱하는 일을 하고 있다는 것을 알고, 급히 <a href="http://metacpan.org/module/Date::Holidays::KR">Date::Holidays::KR</a> 이라는 모듈을 만들기로 했습니다... 랄까 사실은 작년부터 떠밀려온 <code>Things</code> 의 이슈 중 하나였습니다.</p>

<p>  사실 일본같은 경우에는 음력이 옛날에 없어져버렸고, 지금은 양력만으로 돌고 있고, 중국은 한국과 마찬가지로 음력을 사용하고 있습니다. 재미삼아서 여러나라의 공휴일을 살펴봤는데, 대개 정해진 날, 또는 몇 월의 몇번째 주의 월요일이라든가 하는 식으로 공휴일이 지정되어 있는 것을 봤습니다.
  캐나다의 경우는 주마다 휴일이 다르더군요. :-)</p>

<p>  아무튼 같은 음력을 사용하는 중국, 그 중국용으로 만든 <a href="http://metacpan.org/module/Date::Holidays::CN">Date::Holidays::CN</a> 을 참고해서 <code>Date::Holidays::KR</code> 을 만들었습니다. 음력도 미묘하게 중국과는 다르다고 하는데, 이 부분은 @aer0 님께서 만드신 <a href="http://metacpan.org/module/Date::Korean">Date::Korean</a> 모듈을 사용해서 음력/양력 변환을 이용했구요. (설날,추석,석가탄신일의 경우는 음력)</p>

<blockquote class="twitter-tweet"><p>Date-Holidays-KR 0.01 by JEEN - <a href="http://t.co/pHQVHLaJ" title="http://metacpan.org/release/JEEN/Date-Holidays-KR-0.01/">metacpan.org/release/JEEN/D…</a></p>&mdash; CPAN New Modules (@cpan_new) <a href="https://twitter.com/cpan_new/status/166840689223675904" data-datetime="2012-02-07T11:08:14+00:00">February 7, 2012</a></blockquote>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl and Continuous Integration with Jenkins - II]]></title>
    <link href="http://JEEN.github.com/blog/2012/02/02/perl-and-continuous-integration-with-jenkins-2/"/>
    <updated>2012-02-02T07:00:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/02/02/perl-and-continuous-integration-with-jenkins-2</id>
    <content type="html"><![CDATA[<p>  애시당초 블로깅하려던 내용을 발표자료로 엮었습니다.</p>

<script src="http://storify.com/jeen_lee/perl-and-continuous-integration-w-jenkins.js"></script>


<p><noscript>[<a href="http://storify.com/jeen_lee/perl-and-continuous-integration-w-jenkins" target="_blank">View the story "Perl and Continuous Integration w/ Jenkins" on Storify</a>]</noscript></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carton - CPAN dependencies manager]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/16/carton-cpan-dependencies-manager/"/>
    <updated>2012-01-16T22:49:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/16/carton-cpan-dependencies-manager</id>
    <content type="html"><![CDATA[<p>  Jenkins 이야기를 마저 쓸려고 했는 데, 그 사이사이에 사용된 것들부터 정리하고자 우선은 Carton 이야기 부터 먼저하고자 합니다.</p>

<p>  잘은 모르지만 Carton 은 Ruby 의 Bundler 에 영감을 받아서 만들어 진 것입니다. 어떤 Perl 로 만든 소프트웨어의 의존모듈의 관리가 편해집니다. :-) 일례로, 노트북에서 개발을 하고 이것을 서버에 올릴려고 할 때, 일일이 의존모듈 체크를 해야할 필요성이 있습니다. 그때마다 <code>cpan MODULE</code> 등으로 설치를 해나가야 한다면 여간 힘든 일이 아니죠.</p>

<p>  그런 상황에서 쉽게 문제를 해결할 수 있는 것이 <code>Carton</code> 이 아닐까 생각합니다.</p>

<h3>Carton 설치</h3>

<p>  <code>Carton</code> 은 간단하게 <code>cpan</code> 으로 설치할 수 있습니다.</p>

<p><code>bash
$ cpanm carton
</code></p>

<p>  위의 커맨드로 <code>Carton</code> 을 설치하면 <code>carton</code> 이라는 커맨드가 생깁니다.</p>

<h3>Carton 이용</h3>

<p>  <code>Carton</code> 을 제대로 이용하려면, 해당 Perl App 의 의존모듈이 <code>Makefile.PL</code> 안에서 잘 관리되고 있어야 합니다.</p>

<p>``` perl Makefile.PL
use ExtUtils::MakeMaker;
WriteMakefile(</p>

<pre><code>'NAME'      =&gt; 'WebService::Aladdin',
'AUTHOR'    =&gt; 'JEEN &lt;jeen@perl.kr&gt;',
'VERSION_FROM' =&gt; 'lib/WebService/Aladdin.pm', # finds $VERSION
'PREREQ_PM' =&gt; {
    Test::Base =&gt; 0,
    version    =&gt; 0,
    Class::Accessor::Fast =&gt; 0,
    LWP::UserAgent =&gt; 0,
    URI            =&gt; 0,
    Carp           =&gt; 0,
    XML::FeedPP    =&gt; 0
},
</code></pre>

<p>);
```</p>

<p>  우선 예제로 제가 만든 <code>WebService::Aladdin</code> 모듈의 <code>Makefile.PL</code> 이 위와 같습니다. 이는 <code>WebService::Aladdin</code> 모듈에서 필요로 하는 의존모듈 등의 정보들을 나타내고 있습니다.</p>

<p><code>bash
$ carton install
</code></p>

<p>  <code>carton install</code> 을 통해서 <code>Makefile.PL</code> 에 정의된 의존모듈을 설치합니다. 이때 <code>Carton</code> 은 의존모듈의 의존트리까지도 설치해버립니다. 그러니 실제 의존모듈이 10개라도, 그 10개의 각각의 모듈의 의존모듈까지도 설치하기 때문에 실제로 설치되는 것은 10개 이상의 모듈들이 될 것입니다.</p>

<p>  아무튼 <code>carton install</code> 이 끝났다면 <code>carton.lock</code> 파일이 생성됩니다. 그리고 <code>local</code> 이라는 디렉토리의 아래에 의존모듈들이 설치됩니다.</p>

<p>``` text carton.lock
{
   "modules" : {</p>

<pre><code>  "Algorithm::Diff" : {
     "dist" : "Algorithm-Diff-1.1902",
     "module" : "Algorithm::Diff",
     "mymeta" : {
        "abstract" : "unknown",
        "author" : [
           "unknown"
        ],
        "dynamic_config" : 0,
        "generated_by" : "ExtUtils::MakeMaker version 6.62, CPAN::Meta::Converter version 2.112621, CPAN::Meta::Converter version 2.112150",
        "license" : [
           "unknown"
        ],
        "meta-spec" : {
           "url" : "http://search.cpan.org/perldoc?CPAN::Meta::Spec",
           "version" : "2"
        },
        "name" : "Algorithm-Diff",
        "no_index" : {
           "directory" : [
              "t",
              "inc"
           ]
        },
        "prereqs" : {
           "build" : {
              "requires" : {
                 "ExtUtils::MakeMaker" : 0
              }
           },
           "configure" : {
              "requires" : {
                 "ExtUtils::MakeMaker" : 0
              }
           },
           "runtime" : {
              "requires" : {}
           }
        },
        "release_status" : "stable",
        "version" : "1.1902"
     },
     "name" : "Algorithm::Diff",
     "pathname" : "T/TY/TYEMQ/Algorithm-Diff-1.1902.tar.gz",
     "provides" : {
        "Algorithm::Diff" : {
           "file" : "Algorithm/Diff.pm",
           "version" : "1.1902"
        },
        "Algorithm::DiffOld" : {
           "file" : "Algorithm/DiffOld.pm",
           "version" : "1.1"
        }
     },
     "version" : "1.1902"
  },
  ...
</code></pre>

<p>   }
}
```</p>

<p>  이후 <code>Makefile.PL</code> 에서 또다른 의존모듈이 추가되었을 시에, 또다시</p>

<p><code>bash
$ carton install
</code></p>

<p>을 통해서 추가의존모듈을 설치할 수 있습니다. 이렇게 <code>carton install</code> 로 설치된 로컬 모듈들은</p>

<p><code>bash
$ carton list
IO-stringy-2.110
File-Listing-6.03
XML-FeedPP-0.43
CPAN-Meta-2.112621
...
</code></p>

<p>  <code>carton list</code> 로 확인할 수 있습니다.</p>

<p>  그리고 <code>carton exec</code> 를 통해서 로컬모듈에 설치된 의존모듈을 참조해서 실행할 수 있습니다. 일례로 <code>Catalyst</code> 나 <code>Dancer</code> 로 만든 WebApp 들을 위에서 설명한 대로 <code>carton install</code> 한다음,</p>

<p><code>bash
$ carton exec -- plackup -a app.psgi -p 3000 --mode production
</code></p>

<p>  이처럼 <code>carton exec</code> 를 통해서 실행할 수 있지요.</p>

<h3>Carton 을 이용하고서...</h3>

<p>  우선은 Carton 을 이용함으로, 한 어플리케이션 당 하나의 모듈참조장소를 가지게해서 여러 어플리케이션이 혼잡한 경우에 발생할 수 있는 부작용을 예방할 수 있습니다. <code>Makefile.PL</code> 에서 해당 모듈의 버젼을 지정함으로 특정 버젼에 대해서만 의존을 가질 수 있기 때문에 더더욱 이런 면에서는 효과적입니다.</p>

<p>  그래서 저같은 경우는 오히려 서비스마다 그 서비스용 계정을 만들고 <code>perlbrew</code> 환경을 갖추는 것보다 가볍게 서비스용 계정은 하나만 가지며 각 서비스디렉토리마다 <code>Carton</code> 을 올리는 쪽으로 움직이고 있습니다. 그러니 굳이 시스템 펄을 사용하는 것이 큰 거부감을 느끼지 않게 되었네요.</p>

<h3>그 외</h3>

<p>  일단 <code>carton.lock</code> 에 기재된 의존모듈 정보가 많으면 많을수록 <code>carton install</code> 에 걸리는 시간은 더 오래걸리게 됩니다. 물론 Carton 이 기본적으로 외부미러(http://cpan.metacpan.org) 를 사용하고 있기에, 그럴 수도 있겠다 싶어서 코드를 한번 훑어봤는데, 마침 <code>PERL_CARTON_MIRROR</code> 라는 환경변수를 통해서 가까운 혹은 로컬 네트워크 안의 CPAN 미러를 지정해줌으로 많은 시간을 단축할 수 있지 않을까 생각해봅니다.</p>

<h3>Conclusion</h3>

<p>  물론 Carton 은 현재 ALPHA 퀄리티라고 합니다. 버젼도 현재(2012-01-16) 로는 0.9.3 이고, 1.0 정식 릴리즈까지는 아직 시간이 남아있습니다. 몇몇 기능이 바뀔거라는 주의사항이 <a href="http://metacan.org/module/Carton">Carton 모듈페이지</a> 에서 확인할 수 있습니다.</p>

<p>  좀 더 다양한 <code>Carton</code> 에 대한 이야기는 작년 <a href="http://yapcasia.org/2011/talk/91">YAPC::Asia2011 의 Carton Talk Page</a> 에서도 확인하실 수 있습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picasa Upload Script II]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/13/picasa-upload-script-ii/"/>
    <updated>2012-01-13T18:36:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/13/picasa-upload-script-ii</id>
    <content type="html"><![CDATA[<p>``` perl picasa-uploader.pl</p>

<h1>!/usr/bin/env perl</h1>

<p>package PicasaUploader;
use Any::Moose;
use namespace::autoclean;
use Config::Pit;
use LWP::UserAgent;
use Net::Google::AuthSub;
use MIME::Types ();</p>

<p>has user_id => (</p>

<pre><code>is      =&gt; 'ro',
default =&gt; 'default',
</code></pre>

<p>);</p>

<p>has album_id => (</p>

<pre><code>is      =&gt; 'ro',
default =&gt; 'default',
</code></pre>

<p>);</p>

<p>has files => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'ArrayRef',
default =&gt; sub { [] }
</code></pre>

<p>);</p>

<p>has google_auth => (</p>

<pre><code>is      =&gt; 'rw',
isa     =&gt; 'Net::Google::AuthSub',
default =&gt; sub {
    Net::Google::AuthSub-&gt;new(
        service =&gt; 'lh2',
        source  =&gt; 'my-picasauploader-0.1'
    );
}
</code></pre>

<p>);</p>

<p>has '_ua' => (</p>

<pre><code>is      =&gt; 'rw',
isa     =&gt; 'LWP::UserAgent',
default =&gt; sub {
    LWP::UserAgent-&gt;new( cookie_jar =&gt; {} ); 
}
</code></pre>

<p>);</p>

<p>has 'config' => (</p>

<pre><code>is          =&gt; 'ro',
isa         =&gt; 'HashRef',
lazy_build  =&gt; 1,
</code></pre>

<p>);</p>

<p>sub BUILD {</p>

<pre><code>my $self = shift;
$self-&gt;auth;
return 1;
</code></pre>

<p>}</p>

<p>sub _build_config {</p>

<pre><code>Config::Pit::pit_get('google.com', require =&gt; {
   username =&gt; 'your username on google.com',
   password =&gt; 'your password on google.com' 
});    
</code></pre>

<p>}</p>

<p>sub auth {</p>

<pre><code>my $self = shift;

my $res = $self-&gt;google_auth-&gt;login($self-&gt;config-&gt;{username}, $self-&gt;config-&gt;{password});
die "Login Failed: ". $res-&gt;error unless $res-&gt;is_success;
</code></pre>

<p>}</p>

<p>sub upload_files {</p>

<pre><code>my $self = shift;

for my $file_path (@{ $self-&gt;files }) {
    my $link = $self-&gt;upload_file($file_path);
    print $link."\n";
}
</code></pre>

<p>}</p>

<p>sub upload_file {</p>

<pre><code>my ($self, $file_path) = @_;

my $file = Path::Class::File-&gt;new($file_path);
die "File Not Found : $file" unless -f $file;

my $post_url = sprintf 'https://picasaweb.google.com/data/feed/api/user/%s/albumid/%s', $self-&gt;user_id, $self-&gt;album_id;

my ($mime_type, $encoding) = MIME::Types::by_suffix($file-&gt;basename);
my $content = $file-&gt;slurp;
my $res = $self-&gt;_ua-&gt;post($post_url,
    %{ $self-&gt;google_auth-&gt;auth_params },
    Content_Type   =&gt; $mime_type,
    Slug           =&gt; $file-&gt;basename,
    Content        =&gt; $content,  
);

die 'UPLOAD Failed : '.$res-&gt;status_line unless $res-&gt;is_success;
my ($link) = ($res-&gt;decoded_content=~/content type.*?src='(.*?)'/gsm);
$link;
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>package main;</p>

<p>my $uploader = PicasaUploader->new( files => \@ARGV );
$uploader->upload_files;
```</p>

<p>  <a href="http://aanoaa.github.com/blog/2012/01/03/picasa-upload-script/">@aanoaa 님의 글</a>에서 Picasa Uploader 스크립트를 소개했었는데요. <code>PicasaUploader</code> 라고 package 로 정의해서 쓰도록 했습니다.
  거기에 <a href="https://metacpan.org/module/Config::Pit">Config::Pit</a> 을 써서 계정정보를 다루도록 했구요.
  심심해서 그냥 약간 개량해봤습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::More - use 'subtest' instead of {} block]]></title>
    <link href="http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block/"/>
    <updated>2012-01-05T20:33:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block</id>
    <content type="html"><![CDATA[<p>  여태껏 테스트코드를 써나가면서 그냥 {} 블록안에 일정한 흐름의 테스트 코드를 적곤 했었습니다.</p>

<p>``` perl
use Test::More;
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';</p>

<h1>Access /</h1>

<p>{</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>}</p>

<h1>Login</h1>

<p>{</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>}</p>

<h1>some action</h1>

<p>{</p>

<pre><code>...;
</code></pre>

<p>}
```</p>

<p>  일단 뭐 {} 블록으로 각 action 에 대한 접근결과를 테스트하고, <code>#</code> 로 주석표시를 하면서 하나둘 하나둘 각 블록에 <code>$req</code>, <code>$res</code> 를 추가했었습니다. 일단 뭐 {} 블록으로 묶으면서 <code>$req</code>, <code>$res</code> 따위의 변수의 재정의 등에 관한 경고같은 것이 안나와서 좋고, 제대로 분류가 되는 느낌이기도 했습니다.</p>

<h3>그냥 <code>subtest</code> 를 사용하면 어떨까?</h3>

<p>  그러는 도중에 <a href="http://search.cpan.org/perldoc?Test::More">Test::More 매뉴얼</a>을 읽어보다가 <code>subtest</code> 를 사용할 수 있다는 것을 알게 되었습니다.</p>

<p>``` perl
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';
use Test::More;</p>

<p>subtest 'access to /' => sub {</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>};</p>

<p>subtest 'Login' => sub {</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>};
```</p>

<p>  <code>subtest</code> 를 사용하면서 코드는 위처럼 바뀌었습니다. <code>#</code> 로 주석처리를 할 필요도 없고, 해당 <code>subtest</code> 마다 명확하게 무엇을 하는 지 확실하게 의미있는 <code>subtest</code> 의 이름으로 정해줄 수 있었습니다.</p>

<p>  <code>subtest</code> 로 테스트를 썼을 경우는 TAP 결과는 다음과 같습니다.</p>

<p>``` bash
$ prove t/myapp.t
ok 1 - access to /</p>

<pre><code>ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
1..3
</code></pre>

<p>ok 2 - Login</p>

<pre><code>ok 1 - Request should be suceed
...
1..3
</code></pre>

<p>....
1..3
ok
All tests successful.
Files=1, Tests=3, 10 wallclock secs ( 0.07 usr  0.01 sys +  6.16 cusr  0.61 csys =  6.85 CPU)
Result: PASS
```</p>

<p>  전체 테스트 횟수는 <code>subtest</code> 안의 테스트 항목이 아니라, <code>subtest</code> 의 갯수가 되는 것입니다.</p>

<p>  그리고 <code>subtest</code> 를 사용하지 않고 {} 블록을 이용해서 flat 하게 정의했을 때는 아래와 같습니다.</p>

<p><code>bash
...
ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
ok 4 - Request should be suceed
 ...
</code></p>

<p>  테스트 항목 1,4 번의 메시지가 같기 때문에 매번 달리 지정해줘야 되는 수고가 발생하죠. 그리고 각각의 테스트 항목 하나하나가 테스트 갯수가 되는 것입니다.</p>

<p>  사실은 위의 Jenkins 상의 <code>Test Result Trend</code> 의 그래프가 어느 순간 갑자기 뚝 떨어지길래, 어라 이상하다 싶어서 살펴본 결과, <code>subtest</code> 기준으로 카운트되어있는 것을 확인했습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-TSX-Kd5-fX4/TwWRjvHx2LI/AAAAAAAAA94/pYrEEgHBZic/test-result-trend.png" alt="Jenkins Test Result Trend 의 낙폭" /></p>

<p>  대충 위의 <code>#58</code> 번 빌드가 그 쯤이 되겠네요.</p>

<p>  아무튼 Jenkins 도입이후에 좀 더 테스트코드에 더 신경을 쓰고 있는 요즘입니다.</p>
]]></content>
  </entry>
  
</feed>
