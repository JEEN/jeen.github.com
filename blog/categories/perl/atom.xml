<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen - Yet anothere techlog]]></title>
  <link href="http://jeen.github.io/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://jeen.github.io/"/>
  <updated>2013-07-17T20:00:39+09:00</updated>
  <id>http://jeen.github.io/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Released DBIx::Class::InflateColumn::Serializer::Hstore]]></title>
    <link href="http://jeen.github.io/2013/07/07/released-dbix-class-inflatecolumn-serializer-hstore/"/>
    <updated>2013-07-07T19:05:31+09:00</updated>
    <id>http://jeen.github.io/2013/07/07/released-dbix-class-inflatecolumn-serializer-hstore</id>
    <content type="html"><![CDATA[<p> 예전에는 그냥 Pg 를 사용한 만들어진 웹서비스를 유지보수하는 수준에서 밖에 Pg 를 접하지 않았는데&hellip;
 최근의 한 프로젝트에서 Postgres 를 도입하기로 결정이 났습니다.</p>

<p> 이전부터 Pg 의 hstore나 Array 타입이라든가 이런저런 유의미한 기능에 대해서는 기대하고 있었고, 약간 설레임이 있었습니다.</p>

<p> 작업을 하면서 살펴보니 hstore 의 경우는 Postgre Extension 으로 존재하며, DBIx::Class 는 아마도 DB 의 특정 Extension 까지 보살펴주지는 않겠지 하고 생각했습니다.</p>

<p> 결국 기본적으로 DBIx::Class에서 컬럼의 참조/등록시에 Serialization/Deserialization 하면서 쓰고, hstore 에 대해서 참조쿼리를 발생시킬 때는 적절한 스칼라레퍼런스로 사용할 수 밖에 없지 않겠는가 싶었습니다.</p>

<p> 그래서 뭐 결국은 DBIx::Class::InflateColumn::Serializer 모듈에 그냥 끼워넣기로 DBIx::Class::InflateColumn::Serializer::Hstore 라는 모듈을 추가해서 CPAN 에 올렸습니다.</p>

<p> 사용법은 CPAN 문서의 SYNOPSIS 를 참조하면 됩니다. :&ndash;)</p>

<p> DBD::Pg 에서 UTF8 사용을 위해서 <code>pg_enable_utf8</code> 과 <code>Pg::hstore</code> 를 병용할 때 UTF8 표시문제가 있어서 기존 <code>DBIx::Class::InflateColumn::Serializer</code> 에는 없던 옵션인 <code>recursive_encode</code> 를 추가했습니다.</p>

<p> UTF8 을 포함한 hstore 컬럼과 그렇지 않은 것들을 구분해서 사용하면 되지 않을까 싶습니다만&hellip;</p>

<p> 뭐 아무튼 결론은 요 1주일 정도 Pg 로 옮기면서 되던 게 안된다든가, 이런게 된다든가 하는 다양한 문제를 접하며 즐거운 비명을 지르고 있습니다.</p>

<p> <blockquote class="twitter-tweet"><p>Pg::hstore w/ pg_enable_utf8 = oops</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353168251531956225">July 5, 2013</a></blockquote></p>

<script async src="http://jeen.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>




<blockquote class="twitter-tweet"><p>Pg 의 ㅅㅂ함을 만끽하고 있음 :-)</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353050682095443969">July 5, 2013</a></blockquote>




<blockquote class="twitter-tweet"><p>신비함.. 신비함..</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/statuses/353050712432840704">July 5, 2013</a></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MSSQL in Perl(Linux)]]></title>
    <link href="http://jeen.github.io/2013/06/18/using-mssql-in-perl-linux/"/>
    <updated>2013-06-18T22:33:40+09:00</updated>
    <id>http://jeen.github.io/2013/06/18/using-mssql-in-perl-linux</id>
    <content type="html"><![CDATA[<p>오늘은 IRC 상에서 리눅스 환경에서 Perl 로 MS-SQL 에 접속하는 최선의 방법에 대한 이야기가 있었습니다. 그냥 흘리기에는 아쉬운 얘기들이 많아서 긁어서 정리해봅니다.</p>

<script src="http://jeen.github.io//storify.com/jeen_lee/using-mssql-in-perl-linux.js" type="text/javascript" language="javascript"></script>


<p><noscript>[<a href="http://jeen.github.io//storify.com/jeen_lee/using-mssql-in-perl-linux" target="_blank">View the story &ldquo;Using MSSQL in Perl(Linux)&rdquo; on Storify</a>]</noscript></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PullReq on MojoX::Validator]]></title>
    <link href="http://jeen.github.io/2013/06/07/pullreq-on-mojox-validator/"/>
    <updated>2013-06-07T17:53:47+09:00</updated>
    <id>http://jeen.github.io/2013/06/07/pullreq-on-mojox-validator</id>
    <content type="html"><![CDATA[<p> 지난 수요일에 잠깐 이번 서버 구현에 쓸 Validator 를 물색하던 중에 <a href="http://metacpan.org/module/Mojolicious::Plugin::Validator">Mojolicious::Plugin::Validator</a> 를 보고는 참 Validation 코드쓰기 쉽다라는 생각에 덜컥 채용해버렸습니다.</p>

<p> 모듈은 2011년이 마지막으로 업뎃되었구요. 근데 깔아보니까 안깔립니다. 이것도 설마 5.18 의 Hash Randomization 문제때문인가 하면서 실패한 테스트코드를 살펴본 결과 Mojolicious API 가 바뀐 것때문이었습니다. 그러니까 1년 반안에 프레임워크 테스트 모듈의 근간 API 가 바뀌어버리는 바람에 테스트가 실패한 것이지요.</p>

<p> 일단 이 모듈이 맘에 들었고, 이 모듈을 만든 @vtivti 의 여러가지 결과물들을 보고 재미있는 사람이구나 하고 생각하기도 했었죠.</p>

<ul>
<li><a href="https://github.com/vti/mojox-validator/pull/17">https://github.com/vti/mojox-validator/pull/17</a></li>
</ul>


<p> 그래서 그냥 뭐 테스트코드 하나 패치해서 Pull Req 를 보냈습니다. 내용을 보면 알겠지만 정말 별거 없습니다. <code>post_form_ok</code> 가 없어지고, <code>post_ok</code> 의 사용법이 아마 3.x ~ 4.x 버젼으로 넘어오면서 바뀌지 않았나 합니다. 남은 건 서버에 올리는 데 carton 으로 깔면 … 아 물론 cpanm 1.6 부터 git 프로토콜을 지원하기는 해서 그냥 git repo 를 집어넣으면 되니까…. // 하지만 그냥 CPAN 을 통해서 받고싶었기에 빨리 패치된 걸로 CPAN 에 올려달라고 독촉했습니다.</p>

<blockquote class="twitter-tweet" lang="ko"><p>@<a href="https://twitter.com/vtivti">vtivti</a> oh, please release it please. Now it is the only one problem I had to deploy on my servers. @__@</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/342088628903759872">2013년 6월 5일</a></blockquote>


<script async src="http://jeen.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p> 서버에 Deploy 한다는 건 Jenkins 에 올려놓고 빌드할 때 제대로 돌아가지 않으니까요… 뭐 밀린 숙제 같은 것이었습니다.</p>

<p> <blockquote class="twitter-tweet" lang="ko"><p>MojoX-Validator 0.0014 by VTI &ndash; <a href="http://t.co/1rKxxY9yQh" title="http://metacpan.org/release/VTI/MojoX-Validator-0.0014/">metacpan.org/release/VTI/Mo…</a></p>&mdash; CPAN New Modules (@cpan_new) <a href="https://twitter.com/cpan_new/status/342201018127372288">2013년 6월 5일</a></blockquote></p>

<p> 그래서 오늘에서야 6.5일에 업데이트된 것을 확인하고 Jenkins 설정을 하고 제대로 동작하는 것을 확인했습니다.</p>

<ul>
<li><a href="https://metacpan.org/source/VTI/MojoX-Validator-0.0014/Changes">https://metacpan.org/source/VTI/MojoX-Validator-0.0014/Changes</a></li>
</ul>


<p> Changes 날짜는 뭐 다르지만 이름이 콕하고 박혀있는 걸 보니… 뭔가 깨작거렸구나 하는 생각이 들기는 합니다.</p>

<h3>결론</h3>

<p>매번 CPAN Recents 의 내용을 봐도 그렇지만 Mojolicious 의 잦은 업데이트가 반갑기도 합니다. 실제로 Catalyst 에서 테스트코드를 쓸려면 좀 이래저래 손이 많이 가는 부분도 Mojolicious 의 <code>Test::Mojo</code> 를 통해서 뭔가 쉽고 직관적이게 테스트코드를 슥샥슥샥 쓸 수 있습니다. 오히려 감동을 받은 부분입니다.</p>

<p>하지만 너무 잦은 업데이트는 이에 의존한 모듈들이 제대로 따라가주지 못하니 저같은 일반 사용자의 입장에서는 이런 경우처럼 예상이외의 수고가 들어가버릴 수도 있구나 ( 모듈을 만든 사람도 물론이거니와… ) 하는 생각도 듭니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[miyagawa's podcast ep12 - Korean Translation]]></title>
    <link href="http://jeen.github.io/2013/05/27/miyagawas-podcast-ep12/"/>
    <updated>2013-05-27T00:15:00+09:00</updated>
    <id>http://jeen.github.io/2013/05/27/miyagawas-podcast-ep12</id>
    <content type="html"><![CDATA[<p> 자주 챙겨듣는 podcast 중에 개인적으로 존경하는 개발자인 @miyagawa 씨가 운영하는 podcast 가 있습니다.</p>

<ul>
<li><a href="http://podcast.bulknews.net">Tatsuhiko Miyagawa&rsquo;s Podcast</a></li>
</ul>


<p> 주제는 개발이나 각종 기기, 이벤트, 언어, 커뮤니티 등등의 IT와 관련된 다양한 이야기들을 다루고 있습니다.</p>

<p> 항상 사전녹화하는 것을 수정해서 올리곤 했는데 이번에는 Mixlr 라는 서비스를 이용해서 생방송으로 진행되었습니다.</p>

<ul>
<li><a href="http://mixlr.com">Mixlr makes broadcasting live audio simple. Share your sounds live&hellip;</a></li>
</ul>


<p> 시간은 미리 공지된 대로 5.26 저녁 10시. 게스트들과의 대화는 스카이프로 이뤄진 것 같습니다. 대화는 1시간 분량입니다.</p>

<p> 아래의 내용은 IRC 채널 #perl-kr 에서 내용을 들으면서 옮겨적은 것이며, 부분적으로 빼먹은 부분이나 급작스런 컨텍스트 전환이 있습니다.</p>

<h3>Intro</h3>

<ul>
<li>jeen__ : 미역 팟캐스트 12회는 라이브라고 해서 이거 듣고 퇴근해야지&hellip; 퇴근이랄까..</li>
<li>skyloader : 미역이 팟캐스트도 하나요?</li>
<li>skyloader : 주제가 perl?</li>
<li>jeen__ : ㅇㅇ</li>
<li>skyloader : 오올</li>
<li>skyloader : 하지만 일본어겠지..</li>
<li>jeen__ : ㅇㅇ</li>
<li>jeen__ : lestratt, tokuhirom 이 게스트</li>
<li>jeen<em>_ : 처음으로 펄만을 위한 주제인듯 &ndash;</em>&ndash;;</li>
<li>jeen__ : tokuhirom TOEIC 쳤냐고 ㅋㅋ</li>
<li>jeen__ : 쳤는데 점수 안나왔다고</li>
<li>skyloader : 올 진사마의 실시간 통역</li>
<li><p>jeen__ : tokuhirom 이 아마 YAPC::NA 2013 스피커로 나가니까</p>

<ul>
<li><a href="http://www.yapcna.org/yn2013/talk/4635">YAPC::NA 2013 &ndash; June 3-5, Austin, Texas</a></li>
</ul>
</li>
<li><p>jeen__ : 의식을 높이기 위해서 TOEIC 공부하면서 시험쳐봤다고</p></li>
<li>jeen__ : ㅋㅋㅋ</li>
<li>jeen__ : 이번에 NA 스피커로 lestratt 이랑 tokuhirom 이 가니까 그래서 그런가</li>
<li>jeen__ : 호&hellip;</li>
<li>jeen__ : Skype 에 봇이랄까 그런 거 들어가서</li>
<li>jeen__ : Skype 대화내용을 리다이렉트 시키고 있다고</li>
<li>jeen__ : 물론 대화내용은 음성이지만</li>
<li>skyloader : 딱히 perl내용 같지 않..</li>
<li>jeen__ : 뭐 아직은&hellip;</li>
<li>jeen__ : 사담만 있을 뿐</li>
<li>jeen__ : Perl, YAPC 얘기</li>
<li>jeen__ : &hellip;</li>
</ul>


<h3>Perl 5.18 에 대해서</h3>

<ul>
<li>jeen__ : Perl 5.18

<ul>
<li><a href="http://www.nntp.perl.org/group/perl.perl5.porters/2013/05/msg201940.html">perl 5.18.0 is now available!</a></li>
</ul>
</li>
<li>skyloader : 흠</li>
<li>jeen__ : Jesse 에서 RJBS 로 매니저가 바뀌고 나서</li>
<li>jeen__ : 매년 5월에 나오게 되었다고</li>
<li>jeen__ : 하지만 뭔가 매년 서두르고 있는 건 아닌가라는 느낌으로 서둘러 내고 있는 느낌.</li>
<li>skyloader : 아니 그럼 일년에 한번만 release한다는 것?</li>
<li>jeen__ : 매년 이틀씩 늦춰지고 있다고…</li>
<li>jeen__ : 메이저 업데이트는 1년에 한번</li>
<li>skyloader : 음</li>
<li>jeen__ : 5.12->5.14->5.16->5.18</li>
<li>skyloader : 오키</li>
<li>jeen__ : Hash Randomization</li>
<li>jeen__ : 덕분에 테스트 개박살 났다</li>
<li>jeen__ : 미역도 꽤 테스트 실패하는 모듈이 여럿 있었는데</li>
<li>jeen__ : 5.17.x 시절에 고쳐놔서</li>
<li>jeen__ : 그래도 몇개는 아직 그대로 라고</li>
<li>jeen__ : TT2 도 아직 못 고쳤다고</li>
<li>jeen__ : 5.18 용 보고는 누군가 일괄적으로 RT 에 리포트 해주고 있다고</li>
<li>jeen__ : (그래서 나한테도 왔구나&hellip;)</li>
<li>jeen__ : JSON::XS 가 가장 큰 문제</li>
<li>skyloader : Hash randomization이 뭐길래</li>
<li>jeen__ : 메일링 리스트에 지적되었는데</li>
<li>jeen__ : 이런 수정은 의미가 없다고 레만이 지적</li>
<li>jeen__ : 오히려 Perl 문서에 적혀 있는대로 했으니까</li>
<li>jeen__ : 니들이 고쳐라!</li>
<li>jeen__ : 라고 했지만&hellip;</li>
<li>jeen__ : 최근에 관련 수정을 업데이트 ㅋㅋㅋ</li>
<li>jeen__ : 츤데레</li>
<li>jeen__ : 이걸로 얻을 수 있는 시큐리티 메리트는 거의 없다는 게 레만의 의견</li>
<li>jeen__ : 실제 Perl 에 대한 해쉬 공격방법은 제대로 보고되지 않아서</li>
<li>jeen__ : 5.16.2 취약점에서 한번 그런 게 보고 되었지만&hellip;</li>
<li>jeen__ : 보고자의 보고내용으로는 특정값을 넣어서 메모리가 붕붕 먹었던 그런 경우가 있었다고</li>
<li>jeen__ : HTTP Query Parameters 의 경우는 거의 대개 Hash 에 넣어서 하기 때문에</li>
<li>jeen__ : 그런 경우에 해쉬관련 공격의 대상이 될 수 있는데</li>
<li>jeen__ : 하지만 Perl 5 Porters 에 관련 내용이 올라오지 않아서</li>
<li>jeen__ : 그다지 의논되지 않은 내용이라고</li>
<li>jeen__ : 5.16 에서 변경된 패치와 5.18 에서 변경된 내용은&hellip;</li>
<li>jeen__ : 5.16에서는 같은 해쉬를 복사하면 &hellip; 블라블라</li>
<li>skyloader : 제 수준에서는 심오한 내용이라 이해가 안됨 ㅠ</li>
<li>jeen__ : 레만은 5.5 Perldoc 까지 되집어 올라갔는데</li>
<li>jeen__ : 스펙대로 했다고</li>
<li>jeen__ : 그런 내용을&hellip;</li>
<li>jeen__ : perldoc 관련 표현이 애매했다라는 의견도 있고</li>
<li>jeen__ : 5.8 에서 해쉬를 복사해서</li>
<li>jeen__ : 몇번이나 돌려봤을 때</li>
<li>jeen__ : 그 중에 한번은 값의 순서가 바뀌는 경우가 있었다고</li>
<li>jeen__ : given-when, smart match…</li>
<li>jeen__ : experimental 로 격이 내려갔다 라는 것은</li>
<li>jeen__ : 거의 deprecated 라는 상태와 같다고</li>
<li>jeen__ : given-when, smart match 의 경우는 그다지 와닫는 표현과 퍼포먼스도 그다지 좋지 않았다고</li>
<li>jeen__ : 너무 어정쩡한 상태로 5.10 에 넣어버려서</li>
<li>jeen__ : 그게 계속 문제가 되고 해서 5.18 에서 experimental 로</li>
<li>jeen__ : subroutine signature ?</li>
<li>jeen__ : 5.20 대상으로 subroutine signature 를&hellip;</li>
<li>jeen__ : sub asda($&hellip;) { }</li>
<li>jeen__ : 아직 스펙이 정의되지는 않았다고</li>
<li>skyloader : prototype?</li>
<li>jeen__ : MOP 도 5.20 릴리즈 대상으로 &hellip;</li>
<li>jeen<em>_ : 하지만 아직&hellip; &ndash;</em>&ndash;;</li>
<li>jeen__ : XS 방방하지 않아도 적절한 퍼포먼스가 나왔으면..</li>
<li>jeen__ : 5만줄 정도의 코드가 삭제 되었는데</li>
<li>jeen__ : CPANPLUS + 거기에 의존되었던 코드들</li>
<li>jeen__ : (5.19에서)</li>
<li>jeen__ : Module::Build, CGI 를 5.20 에서 deprecated 로 만들려고</li>
<li>jeen__ : 하고 있다고</li>
<li>jeen__ : 옛 버젼에서 빌드시에 문제가 ..</li>
<li>jeen__ : 어차피 Module::Build 가 없어져도 CPAN 클라이언트가 알아서 감지해서 잡아주기 때문에 별 문제가 없을 거라고</li>
<li>jeen__ : CGI.pm 의 경우는 &hellip;.</li>
<li>jeen__ : 표준모듈로 해 줄 필요는 없지 않냐 라고&hellip;</li>
<li>jeen__ : CGI.pm 용 보안패치도 여러번 나오기도 해서</li>
<li>jeen__ : CGI 를 CPAN 에서 넣을려고 하면</li>
<li>jeen__ : FCGI 를 인스톨하려고 하고</li>
<li>jeen__ : 그게 XS 의존이라서 C컴파일 환경이 없는 곳에서는 대개 실패</li>
<li>jeen__ : 그래서 CGI 에서 FCGI 의존을 없애려고</li>
<li>jeen__ : 지금 CGI 가 FCGI 의 경우까지 고려한 코드가 들어가 있어서
jaker has joined (~<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x6a;&#x61;&#107;&#x65;&#x72;&#x40;&#51;&#54;&#46;&#51;&#x39;&#x2e;&#53;&#x30;&#46;&#x33;&#x37;">&#106;&#97;&#107;&#101;&#x72;&#64;&#51;&#54;&#x2e;&#x33;&#x39;&#x2e;&#53;&#48;&#46;&#x33;&#55;</a>)</li>
<li>jeen__ : tokuhirom 은 5.18.1 까지 기다릴 거라고</li>
<li>jeen__ : 아직 상용서버에 넣어 돌리기는 괜히 걱정된다나&hellip;</li>
<li>jeen__ : 특별히 써보고 싶다라는 기능도 없고 해서</li>
<li>jeen__ : 5.16.3 이 가장 좋은 선택지가 아닌가 하고</li>
<li>jeen__ : 10-20% 정도 퍼포먼스 향상은 있다고 하는데</li>
<li>jeen__ : 어떤 경유로 퍼포먼스 향상이 있었는지 그걸 몰라서</li>
<li>jeen__ : taint support 를 없애는 걸로 퍼포먼스가 올라가는 것은 아닌가 하고 생각</li>
</ul>


<h3>plenv</h3>

<ul>
<li>jeen__ : 미역이 perlbrew &ndash;> plenv 로 바꾸</li>
<li><p>jeen__ : plenv 의 차이점은?</p>

<ul>
<li><a href="https://metacpan.org/module/plenv">plenv &ndash; perl binary manager &ndash; metacpan.org</a></li>
</ul>
</li>
<li><p>jeen__ : perlbrew 는 환경변수 PATH 를 열심히 변경하고 있는데</p></li>
<li>jeen__ : plenv 는 중간에 PATH 를 직접건드리지 않고 하고 있다고</li>
<li>jeen__ : perlbrew 에서 너무 많은 펄 버젼을 지원하기 위햇 어런저런 마법같은 구문들을 집어넣어서</li>
<li>jeen__ : 그걸 심플하게 하기 위해서 plenv 를 만들었다고</li>
<li>jeen__ : 테스트를 위해서 perlbrew switch 하지 않고</li>
<li>jeen__ : 좀 더 간단하게 가능하다고</li>
<li>jeen__ : plenv 를 production 에서 쓰는 건 필요이상의 오버헤드가 들어가서 스스로도 권장하지 않는다고</li>
<li><p>jeen__ : travis ci, dotcloud 도 perlbrew 를 사용하고 있</p>

<ul>
<li><a href="https://www.dotcloud.com">dotCloud &ndash; One home for all your apps</a></li>
<li><a href="https://travis-ci.org">Travis CI &ndash; Free Hosted Continuous Integration Platform for the Open Source Community</a></li>
</ul>
</li>
<li><p>jeen__ : .rvmrc 같은 표기처럼 해당 프로젝트 루트에서 버젼표기를 하는 방식으로 하는 게 편리하지 않은가 라든가</p></li>
<li>jeen__ : plenv 는 yapc::na 에서 발표할 예정이라고</li>
<li>jeen__ : perlbrew 쪽이 압도적으로 지명도가 높고, 문서도 별로고</li>
<li>jeen__ : 그래서 사용할 메리트가 별로 없으니</li>
<li>jeen__ : 문서에 집중하는 게 좋지 않겠느냐</li>
<li>jeen__ : plenv 는 이런 부분에서 압도적으로 좋다라는 부분이 없어서</li>
<li>jeen__ : 뭘 강조해야할지 망설이고 있다</li>
</ul>


<h3>YAPC::Asia Tokyo 2013</h3>

<ul>
<li><p>jeen__ : YAPC::Asia 이야기</p>

<ul>
<li><a href="http://yapcasia.org/2013/05/yapcasia-2013-venue.html">YAPC::Asia 2013 会場を紹介します | YAPC::Asia Tokyo 2013</a></li>
</ul>
</li>
<li><p>jaker : 끝났나요?</p></li>
<li>jeen__ : 스피커 모집은 아무 문제가 없으면 내일 시작</li>
<li>jeen__ : 미역 뱅기 티켓 끊어야 되니까 빨리 뭐 해달라고</li>
<li>jeen__ : 4트랙으로 진행한다고 ㄷㄷㄷ</li>
<li>jeen__ : 여태껏 3트랙으로 했는데</li>
<li>jeen__ : 일수는 2일로</li>
<li>jeen__ : 전야제는 여느때처럼 하고</li>
<li>jeen__ : JPA 주최로 이번이 5회째</li>
<li>jeen__ : 흙</li>
<li>jeen__ : 누군가 해준다면 넘겨주고 싶다고</li>
<li>jeen__ : 컨퍼런스 운영자 모임에서 먹거리 얘기가 나와서..</li>
<li>jeen__ : 맥주랑 닭튀김은 있어야 된다고&hellip;</li>
<li>jeen__ : 매년 와인/일본주는 남는데</li>
<li>jeen__ : 맥주는 추가주문해야된다고</li>
<li>jeen__ : 모두들 감자튀김이랑 닭튀김이랑 맥주 정도만 있으면 되는 건 아닌가..</li>
<li>jeen__ : 동공대 스시 가 매우 좋았다고</li>
<li>jeen__ : 결혼식 피로연 하는 그런 공간이 있어서</li>
<li>jeen__ : 300명 정도 들어가고</li>
<li>jeen__ : 컨퍼런스 파티 참가비는 무료</li>
<li>jeen__ : 컨퍼런스 참가자는 1000명 목표</li>
<li>luzluna : 실시간번역 감사..</li>
<li>jeen__ : 작년이 860명이었으니</li>
<li>luzluna : 치맥은 어느나라를 가든 진리&hellip;</li>
<li>jeen__ : 941 가 말하기를 컨퍼런스를 확대하느냐 포커스를 맞춰서 집중하느냐</li>
<li>jeen__ : 하지만 아직 마키는 좀 더 확대노선으로 갔으면 한다고</li>
<li>jeen__ : 지금까지 오지 못한 사람들을 조금 더 오게 하도록</li>
<li>jeen__ : 미역이 미국의 Railsconf 에서는 1500명 정도 왔다고</li>
<li>jeen__ : 장소는 OSCON 과 같은 장소</li>
<li>jeen__ : 실제 사용규모는 절반</li>
<li>jeen__ : 트랙은 3-4 밖에 없어서</li>
<li>jeen__ : 제일 작은 방에 들어가도 한 방에</li>
<li>jeen__ : 200-300 들어가야 되니까</li>
<li>jeen__ : 니치한 이야기를 하기에는 좀 어려웠다고</li>
<li>jeen__ : 모두가 재미있어 하는 토크는 별로 재미있지 않다</li>
<li>jeen__ : 그래서 대상이 20-50명 정도로 하면 굉장히 재미있고 남은 참가자들의 모티베이션도 생긴다고</li>
<li>jeen__ : YAPC::ASIA 는 제일 큰곳은 450명 들어가는 곳이고, 작은 곳이 60명</li>
<li>jeen__ : YAPC::ASIA Closed Talk 같은 공간을 준비한다고</li>
<li>jeen__ : ㅋㅋㅋ</li>
<li>jeen__ : 뒷얘기 위주</li>
<li>jeen__ : 예전에 perl 관련 설문을 했는데</li>
<li>jeen__ : 의외인 부분은 의외로 많은 사람들이 perl6 얘기를 듣고 싶어한다</li>
<li>jeen__ : 그리고 레거시 시스템을 어떻게 끌고 가느냐</li>
<li>jeen__ : 그리고 관련 사례를 소개시켜줬으면 한다 라든가</li>
<li>jeen__ :미국쪽에는 그런 사례소개가 많았는데</li>
<li>jeen__ : 근데 레거시 관련 얘기는 미국에서는 별로 없어서</li>
<li>jeen__ : Big Data</li>
<li>jeen__ : 수치 계산</li>
<li>jeen__ : 이런 거 좀 해줬으면 한다고</li>
<li>jeen__ : 4-5년 전에는 Bio 에서 많이 썼는데</li>
<li>jeen__ : 이런 게 전부 Python 으로 가버린 거 같다고</li>
<li><p>jeen__ : USA Today 가 Perl 로 되어 있다고</p>

<ul>
<li><a href="http://www.usatoday.com">USA TODAY: Latest World and US News  &ndash; USATODAY.com</a></li>
</ul>
</li>
<li><p>jeen__ : 근데 YAPC::NA 라든가 이런 곳에서 사례 소개로 안나온다고</p></li>
<li>jeen__ : RubyKaigi 는 이번주 하는데</li>
<li>jeen__ : 더이상 규모를 확대하지 않고</li>
<li>jeen__ : 좀 더 참가비를 올리고</li>
<li>jeen__ : 진짜 오고 싶어하는 사람들을 오게 하겠다는데&hellip;</li>
<li>jeen__ : 전체 크기를 크게 해버리면 아무래도 예산관리가 힘들다고</li>
<li>jeen__ : 매번 장소 찾는 것도 피똥흘리면서 하고</li>
<li>jeen__ : 일본 국내 첫 영국식 허브 컨퍼런스 회장이라고&hellip;</li>
<li>jeen__ : YAPC::ASIA 는</li>
<li>jeen__ : 작년은 앉을 공간이 별로 없었는데</li>
<li>jeen__ : 올해는 좀 나아질 거 같다고</li>
<li>jeen__ : LTthon 트랙이라고 작년은 하루종일 LT 만 하는 트랙이 있었는데</li>
<li>jeen__ : 올해는 좀 힘들겠다고</li>
<li>skyloader : 앉아 있던 카페가 문닫아서 전 이만 이동..</li>
<li>jeen__ : 모두들 Perl 에 대한 사랑이 없고, Perl 커뮤니티에 대한 사랑만 있는 것인가&hellip;</li>
<li>jeen__ : 그래서 Perl 커뮤니티에서 딴 얘기만 하는 건 아닌가</li>
<li>jeen__ : …</li>
<li>jeen__ : RubyKaigi 에 가는 사람은 정말로 초 Ruby Lover인데</li>
<li>jeen__ : Perl 컨퍼런스는 Perl 아니고도 다른 거 많이 쓰고 그런 경우가 있어서</li>
<li>jeen__ : 거리감이 먼 것은 아닌가
skyloader has left IRC (Remote host closed the connection)</li>
<li>jeen__ : YAPC 말고 좀 더 Core 한 얘기를 하는 컨퍼런스가 좋지 않겠는가 하고</li>
<li>jeen__ : Hackathon 인가..</li>
<li>jeen__ : Official 로는 아직 YAPC Hackathon 은 못하고</li>
<li>jeen__ : 전날에 장소가 정해지거나</li>
<li>jeen__ : 그런 경우가 많아서&hellip;</li>
<li>jeen__ : QA Hackathon 에서는 50명 정도라면 대개 장소 정도는 빌릴 수 있지 않을까</li>
<li>jeen__ : NHN 이라든가, Mixi 라든가, DeNA 라든가 … 라고</li>
<li>jeen__ : Hallaway hackathon</li>
<li>jeen__ : 이라고 트랙에서 얘기듣지 않고</li>
<li>jeen__ : 밖에서 서로 떠들고 하는 게 있어서</li>
<li>jeen__ : 오히려 그런 공간을 마련해주는 것도 좋지 않겠는가 라고</li>
<li>jeen__ : 운영쪽에서 ~~한다가 아니라</li>
<li>jeen__ : 다른쪽에서 오히려 ~~한다!</li>
<li>jeen__ : 라고 정하고 덤벼들었으면 좋겠다고</li>
<li>jeen__ : 작년에는 NA 에서 토크 스트리밍을 했는데 , 작년 유러피언컵 보면서 NA 토크를 봤다고 (미역)</li>
<li>jeen__ : 대만의 OSDCTW 장소는  국제회의장이라서</li>
<li>jeen__ : 자리마다 마이크가 붙어있다고</li>
<li>jeen__ : 질문 있으면 버튼 누르고 마이크로 말하면 된다고&hellip;</li>
<li>jeen__ : 이번 YAPC::Asia 초청스피커인 pjf 는 생각 외로 커뮤니티에서 별로 유명하지 않다고</li>
<li>jeen__ : 그래도 발표는 재미있다나</li>
<li>luzluna : pjf가 누구에요?</li>
<li>jeen__ : <a href="http://yapcasia.org/2013/">http://yapcasia.org/2013/</a></li>
<li>hongbot : [YAPC::Asia Tokyo 2013] &ndash; <a href="http://yapcasia.org/2013/">http://yapcasia.org/2013/</a></li>
<li>jeen__ : autodie 만든사람이요</li>
<li>luzluna : 아..</li>
<li>jeen__ : 작년 White Camel Award</li>
<li>jeen__ : <a href="https://twitter.com/JEEN_LEE/status/338657107895259136">https://twitter.com/JEEN_LEE/status/338657107895259136</a></li>
<li>jeen__ : ㅋㅋㅋ</li>
<li>hongbot : JEEN_LEE: このpodcast、同時翻訳してるんですけど… #bulknews <a href="http://t.co/BGrK6qtBaX">http://t.co/BGrK6qtBaX</a></li>
<li>jeen_ : 방송 도중에 언급 ㅋㅋㅋㅋ</li>
</ul>


<blockquote class="twitter-tweet"><p>このpodcast、同時翻訳してるんですけど… <a href="https://twitter.com/search/%23bulknews">#bulknews</a> <a href="http://t.co/BGrK6qtBaX" title="http://twitter.com/JEEN_LEE/status/338657107895259136/photo/1">twitter.com/JEEN_LEE/statu…</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/338657107895259136">May 26, 2013</a></blockquote>


<script async src="http://jeen.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using DBI Callbacks - Generate a SQLite file automatically]]></title>
    <link href="http://jeen.github.io/2013/05/20/using-dbi-callbacks-generate-sqlite-file-automatically/"/>
    <updated>2013-05-20T11:59:04+09:00</updated>
    <id>http://jeen.github.io/2013/05/20/using-dbi-callbacks-generate-sqlite-file-automatically</id>
    <content type="html"><![CDATA[<p> 이런저런 임시데이터를 주고받고 하는 용도로 SQLite 파일을 덩어리채로 주고받는 경우가 있습니다.</p>

<p>매일매일 그런 일이 일어나니 파일에는 날짜 정도는 집어넣어줘야 되구요.</p>

<p><code>
DROP TABLE IF EXISTS item;
CREATE TABLE item (
  id    INTEGER NOT NULL PRIMARY KEY,
  name  VARCHAR(64),
  price INTEGER,
  maker VARCHAR(64),
  created_at INTEGER
);
...
</code></p>

<p>대충 위와 같은 SQL 문을 이용해서 SQLite 파일안에 테이블도 만들어 줘야되고,</p>

<p>이런저런 데이터들도 넣어줘야 되겠죠.</p>

<p><code>
$ sqlite db/item.db3 &lt; sql/item.sql
</code></p>

<p>일단은 요렇게 SQLite 를 만들고…</p>

<p><code>
$ perl bin/generate_data.pl
</code></p>

<p>뭐 요런 식으로 <code>item.db3</code> 에 있는 테이블들에 데이터를 쑤셔넣고 보내는 식입니다.</p>

<p>```
use MyApp::DB;</p>

<p>my $db = MyApp::DB->new({ connect_info => [</p>

<pre><code>'dbi:SQLite:db/item.db3', "", "", {
    PrintError =&gt; 1,
    RaiseError =&gt; 1,
    Callbacks =&gt; {
        connected =&gt; sub {
            my $conn = shift;
            open my $fh, "&lt;", "sql/item.sql" or die "cannot found a sql file";
            my $sqls = do { local $/; &lt;$fh&gt; };
            for (split /;\s+/, $sqls) {
                $conn-&gt;do($_);
            }
            return;
        },
    },
}
</code></pre>

<p>]})
….
```</p>

<p>SQLite 의 경우는 Connection정보를 지정해서 해당 DB파일이 지정 디렉토리에 위치해있으면 그 파일을 참조하고,
없으면 0바이트의 파일을 만들어버립니다.</p>

<p>이때 DBI Callbacks 를 이용해서 연결되었을 시(connected), <code>sql/item.sql</code> 에 위치한 SQL 문들을 실행합니다.</p>

<p>DBI는 한 액션에 여러 SQL 문을 실행할 수 없기 때문에 &lsquo;;&rsquo; 를 구분자로해서 실행하면 각 쿼리별로 쪼개지게 됩니다.</p>

<p>그렇게 해서 별다른 SQLite 파일 생성에 따른 외부적인 액션이 없이 스크립트 실행시마다 만들어지게 됩니다.
(물론 저 위의 코드는 일부를 발췌해왔기 때문에 뭐 날마다 어쩌고 한다든가, 파일을 옮긴다든가 하는 부분의 코드는 생략했습니다)</p>

<p>위처럼 DBI Callbacks 나 DBI Subclassing 을 이용해서 프로파일링이나 쿼리로그 같은 다양한 모듈들이 존재하니,</p>

<p>그쪽도 한번 참고해보시면 도움이 되지 않을까 생각합니다.</p>

<h3>참고</h3>

<ul>
<li><a href="http://search.cpan.org/~timb/DBI-1.611/DBI.pm#Callbacks_(hash_ref)">http://search.cpan.org/~timb/DBI-1.611/DBI.pm#Callbacks_(hash_ref)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
