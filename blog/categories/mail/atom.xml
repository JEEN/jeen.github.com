<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mail | Jeen's techlog]]></title>
  <link href="http://jeen.github.com/blog/categories/mail/atom.xml" rel="self"/>
  <link href="http://jeen.github.com/"/>
  <updated>2012-12-27T00:29:12+09:00</updated>
  <id>http://jeen.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Perl - Mail Send II]]></title>
    <link href="http://jeen.github.com/blog/2012/01/04/perl-mail-send-ii/"/>
    <updated>2012-01-04T18:26:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/01/04/perl-mail-send-ii</id>
    <content type="html"><![CDATA[<ul>
<li><p><a href="http://jeen.github.com/blog/2011/12/29/perl-email-send/">Perl - Mail Send</a></p>

<p>이전에 Perl 에서 Mail Send 관련해서 한번 깨작거린 적이 있습니다.</p>

<p>오늘은 이에 대해서 추가적인 수정이 필요한 부분이 있어서, <code>MyApp::Mail</code> 을 조금 더 건드려 봤습니다.</p></li>
</ul>


<p>``` perl
package MyApp::Mail;
use Moose;
use Moose::Util::TypeConstraints;
use namespace::autoclean;
use Email::MIME;
use Email::Sender::Simple 'sendmail';
use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>subtype 'MailAddresses' => as 'Str';</p>

<p>coerce 'MailAddresses',</p>

<pre><code>from 'ArrayRef',
    via { join(", ", (map { Encode::encode( "MIME-Header", $_ ) } @{ $_ })) };
 from 'Str',
     via { Encode::encode( "MIME-Header", $_ ) };
</code></pre>

<p>has to => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'MailAddresses',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
coerce    =&gt; 1,
</code></pre>

<p>);</p>

<p>has from => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has subject => (</p>

<pre><code>is      =&gt; 'ro',
isa     =&gt; 'Str',
default =&gt; sub {
    Encode::encode( "MIME-Header", $_[0] );
},
required =&gt; 1,
</code></pre>

<p>);</p>

<p>has body => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'Str',
</code></pre>

<p>);</p>

<p>has transport => (</p>

<pre><code>is  =&gt; 'ro',
isa =&gt; 'HashRef'
</code></pre>

<p>);</p>

<p>has attachments => (</p>

<pre><code>is =&gt; 'ro',
isa =&gt; 'ArrayRef[Path::Class::File]',
default =&gt; sub { [] },
</code></pre>

<p>);</p>

<p>sub _get_parts {</p>

<pre><code>my $self = shift;

my @parts;
push @parts,
    Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; 'text/plain',
            charset      =&gt; 'utf8',
        },
        body =&gt; Encode::encode_utf8($self-&gt;body),
    );
for my $attachment (@{ $self-&gt;attachments }) {
    confess "File Not Found : $attachment" unless -f $attachment;
    my ($mime_type, $encoding) = MIME::Types::by_suffix($attachment-&gt;basename);
    $mime_type ||= 'multipart/mixed';
    my $file_body = $attachment-&gt;slurp;
    push @parts, Email::MIME-&gt;create(
        attributes =&gt; {
            content_type =&gt; $mime_type,
            name         =&gt; $attachment-&gt;basename,
            filename     =&gt; $attachment-&gt;basename,
            encoding     =&gt; 'base64',
            disposition  =&gt; 'attachment',
        },
        body =&gt; $file_body,
    );
}
\@parts;
</code></pre>

<p>}</p>

<p>sub send {</p>

<pre><code>my $self = shift;

my $opt = {};
if ($self-&gt;transport) {
    $opt-&gt;{transport} = Email::Sender::Transport::SMTP-&gt;new( $self-&gt;transport );
}

my $email = Email::MIME-&gt;create(
    header =&gt; [
        From    =&gt; $self-&gt;from,
        To      =&gt; $self-&gt;to,
        Subject =&gt; $self-&gt;subject
    ],
    parts =&gt; $self-&gt;_get_parts,
);
sendmail($email, $opt);
</code></pre>

<p>}</p>

<p><strong>PACKAGE</strong>->meta->make_immutable;</p>

<p>1;
```</p>

<p>  일단 수정을 필요로 한 부분은, 똑같은 메일 내용을 둘 이상에게  보내야 할 경우입니다. 일반적으로 업체에서 보내는 메일의 헤더를 보면 <code>To</code> 에 본인만 들어가 있을 겁니다. 이게 일반적이죠.</p>

<p>  하지만 이번에는 사내 시스템 관련 리포트를 보내는 것이고, 특정 다수에게 보내며, 메일링이 없다는 전제하에서 움직였습니다.</p>

<p>변경된 부분은,</p>

<p>``` diff
package MyApp::Mail;
use Moose;
+use Moose::Util::TypeConstraints;
use namespace::autoclean;
@@ -9, 13 +10, 22 @@ use Email::Sender::Transport::SMTP;
use Encode;
use MIME::Types ();</p>

<p>+subtype 'MailAddresses' => as 'Str';</p>

<p>+coerce 'MailAddresses',
+   from 'ArrayRef',
+        via { join(", ", (map { Encode::encode( "MIME-Header", $<em> ) } @{ $</em> })) };
+     from 'Str',
+         via { Encode::encode( "MIME-Header", $_ ) };
+
has to => (</p>

<pre><code>is      =&gt; 'ro',
</code></pre>

<ul>
<li> isa     => 'Str',</li>
<li> isa     => 'MailAddresses',
default => sub {

<pre><code>Encode::encode( "MIME-Header", $_[0] );
</code></pre>

<p>},
required => 1,</p></li>
<li> coerce    => 1,
);
```</li>
</ul>


<p>  입니다. subtype 을 지정하기 위해서 <code>Moose::Util::TypeConstraints</code> 를 use 할 필요가 있구요. <code>To</code> 헤더의 형식을 <code>MailAddresses</code> 라는 subtype 으로 받도록 합니다. 그냥 문자열 값이 들어오든 Array Reference 가 들어오든 그에 맞춰서 변환해주도록 했구요.</p>

<p>  이전 글에서 간략하게 Mail 테스트 방법에 대해서 소개했는데, 현재 위처럼 수정한 다음에 아래와 같이 테스트코드를 작성해서 문제없이 작동하는 것을 확인할 수 있었습니다.</p>

<p>``` perl send-mail.t
use strict;
use warnings;
use Test::Most;
use_ok 'MyApp::Mail';
use Path::Class::File;</p>

<p>BEGIN {</p>

<pre><code>$ENV{EMAIL_SENDER_TRANSPORT} = 'Test';
</code></pre>

<p>};</p>

<p>my %data_set = (</p>

<pre><code>to      =&gt; 'your@email.com',
from    =&gt; 'my@email.com',
subject =&gt; 'MailSender Test Subject',
body    =&gt; 'MailSender Test Body',
</code></pre>

<p>);</p>

<h1>Send a mail w/ attachments</h1>

<p>my $mailer = MyApp::Mail->new(</p>

<pre><code>%data_set,
attachments =&gt; [ 
    Path::Class::File-&gt;new('somefile.zip'),
    Path::Class::File-&gt;new('somefile.ee')
],
</code></pre>

<p>);</p>

<p>$mailer->send;</p>

<h1>Send a mail without attachments</h1>

<p>my $mailer2 = MyApp::Mail->new(%data_set);</p>

<p>$mailer2->send;</p>

<h1>Send a mail with Multiple Recipients</h1>

<p>my $mailer3 = MyApp::Mail->new(</p>

<pre><code>%data_set,
to =&gt; [ 'your2@email.com', 'anotheremail@gmail.com' ],
</code></pre>

<p>);</p>

<p>$mailer3->send;</p>

<h1>Just string</h1>

<p>my $mailer4 = MyApp::Mail->new(
  %data_set,
  to => 'mail-1@mail.com, mail-2@mail.com, mail-3@mail.com',
);</p>

<p>$mailer4->send;</p>

<p>my $deliveries = Email::Sender::Simple->default_transport->deliveries;
for my $deliv (@{ $deliveries }) {
  my $sent_addresses = join ", ", @{ $deliv->{successes} };
  ok $deliv->{successes}, 'Mail sent to '. $sent_addresses;
}
done_testing();
```</p>

<p>  물론 <code>$deliveries</code> 변수를 덤프해보면 각각의 메일헤더들이 존재하고 좀 더 항목당 세밀하게 테스트를  수행할 수 있겠지만, 여기서는 단순하게 이정도로 그치도록 합니다.</p>

<p>  사실은 뭐 <code>To</code> 안에 여러개의 메일이 들어간다는 전제로 ArrayRef 를 넣었지만, 사실 Str 을 받기에 <code>To</code> 에 대해서는 그냥 문자열로 <code>mail-1@mail.com, mail-2@mail.com, mail-3@mail.com</code> 으로 해도 가능합니다. 하지만 그냥 제 고집상 복수의 데이터셋이 들어갈 때는 왠지 ArrayRef 로 넣고 싶어졌을 뿐입니다. 존중받고 싶은 취향같은 것이죠.</p>
]]></content>
  </entry>
  
</feed>
