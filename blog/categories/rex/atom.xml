<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rex | Jeen - Yet anothere techlog]]></title>
  <link href="http://jeen.github.io/blog/categories/rex/atom.xml" rel="self"/>
  <link href="http://jeen.github.io/"/>
  <updated>2013-07-17T19:50:53+09:00</updated>
  <id>http://jeen.github.io/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rex Common Practice]]></title>
    <link href="http://jeen.github.io/blog/2013/04/28/more-rex/"/>
    <updated>2013-04-28T18:32:00+09:00</updated>
    <id>http://jeen.github.io/blog/2013/04/28/more-rex</id>
    <content type="html"><![CDATA[<h3>Parallelism 설정</h3>

<p> 한 손에 셀 수 있을 정도의 서버규모라면 사실 특별하게 병렬처리를 하느니 하는 것은 별로 고려하지 않아도 되겠습니다만, 그 이상일 경우에는 한 작업을 수행함에 있어서 수십대의 서버에 순차적으로 접속하고 작업하고하는 것을 지켜보는 것은 상당히 고역이죠.
 이럴 경우에는 <code>parallelism</code> 을 지정합니다.</p>

<p> 방법은 <code>Rexfile</code> 에 다음과 같이 설정합니다.</p>

<p><code>
parallelism =&gt; 10;
</code></p>

<p> 이렇게 하면 한번에 10대의 서버에 대해서 병렬로 작업을 수행하게 됩니다. 어차피 작업은 원격지서버에서 하는 것이고, 로컬에서는 SSH 커넥션이 1개로 붙던 것들이 10개로 늘어나며, 물론 시간 또한 parallelism 설정갯수에 비례하게 됩니다. 하지만 로그는 이쁘게 남지는 않을 겁니다.</p>

<p> 애시당초 CLI 옵션에 <code>parallelism</code> 옵션이 있었으면 좋겠는데&hellip;</p>

<h3>Logging</h3>

<p> 일단 작업 기록은 꾸준히 남기는 것이 좋겠다라고 생각하는 바, 매 작업분기마다 로그를 남기도록 합니다. 하지만 매뉴얼에는 마땅히 로그에 관한 설명은 보이지 않는 것 같았습니다.</p>

<p> Rex 에서의 기본적인 로그를 쓰는 방법은 다음과 같습니다.</p>

<p><code>
Rex::Logger::info("MSG"[, "TYPE"]);
</code></p>

<p> 로그 메시지는 당연히 필수이며, TYPE 은 사실 안써도 됩니다만, error/warn 두가지 인수를 넣을 수 있습니다. 에러 상황시 확실하게 눈에 띄게 해주는 정도(노랑색, 빨강색)입니다.</p>

<p> Parallelism 사용시에 병렬로 작업을 수행함으로 인해서 로그가 뒤죽박죽이 되기 마련인데, 이때 로그에 명기해주었으면 하는 것은 역시 각 서버의 호스트/IP입니다.</p>

<ul>
<li><a href="https://metacpan.org/module/Rex::Logger">https://metacpan.org/module/Rex::Logger</a></li>
</ul>


<p> <code>Rex::Logger</code> 에서 다음과 같은 사용법을 통해서 해결할 수 있습니다.</p>

<p>```
$Rex::Logger::format = &lsquo;%h &ndash; %D &ndash; %s&rsquo;;</p>

<h1>srv001 &ndash; 2012-04-12 18:35:12 &ndash; Installing package vim</h1>

<p>```</p>

<p> 각 포맷에 대한 자세한 설명은 위의 Metacpan 링크에서 확인할 수 있습니다.</p>

<h3>CPAN 의존모듈 설치</h3>

<p> 애시당초 처음에 Rex 를 사용하는 이유가 여러대의 서버에 CPAN 모듈을 설치해야할 필요가 있었기 때문이었습니다. 하지만 사용구조상 일일이 모든 서버에 대해서 <code>perlbrew</code> 를 설치한다거나, 하는 호화(?)를 누릴 수는 없었습니다. <code>perlbrew</code> 를 꺼내는 것 자체가 애시당초 핀트에 어긋나버리는 얘기가 되어버리지만… &ndash;_&ndash;;</p>

<p> 뭐 네, 방법은 간단합니다.</p>

<p><code>
run("curl -L http://cpanmin.us | perl - --notest --mirror ftp://cpan.mirror.cdnetworks.com/CPAN/ --mirror-only Test::More LWP::UserAgent JSON Nagios::Plugin");
</code></p>

<p> 애시당초 Rex 의 접근은 <code>root</code> 로 이뤄지기 때문에 이와같은 설정으로 그냥 땜박질 할 수 있었지만, <code>sudo</code> 로 접근한다거나 하는 예외상황에서는 <code>--sudo</code> 옵션을 붙여주면 되겠습니다. 물론 <code>root</code> 로 접근했을 때 <code>--sudo</code> 옵션은 쓰면 오동작의 원인이 됩니다.</p>

<p> <code>--notest</code> 는 물론 수많은 서버가 동일 구성이며, 처음 커맨드로 때려보고 한방에 된다고 했을 때, 테스트가 불필요하다는 판단아래에서 집어넣었구요.</p>

<p> 좀 더 속도개선을 노려본다면 <code>--mirror</code> 옵션을 통해서 <code>CDNetworks</code> 같은 CPAN Mirror 를 이용해보는 것도 괜찮을 것 같습니다. 눈에 띄는 속도향상을 체감할 수 있을 겁니다.</p>

<h3>결론</h3>

<p> 어떤 일을 하기에 필요한 도구를 찾아서 사용하는 것이 일반적인 접근일텐데, 때로는 어떤 도구를 사용하기 위해서 일부러 일을 그쪽방향으로 맞추는 경우를 주변에서 많이 접하게 됩니다. 저는 어떻게해서 Rex 를 알고 사용하게 되었는지 이미 까먹었지만, 하는 일에 대한 최적의 선택이었다고 생각합니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Rex - Environment]]></title>
    <link href="http://jeen.github.io/blog/2013/04/04/using-rex-environment/"/>
    <updated>2013-04-04T12:28:00+09:00</updated>
    <id>http://jeen.github.io/blog/2013/04/04/using-rex-environment</id>
    <content type="html"><![CDATA[<p> 주위 사람들은 Chef나 Fabric 을 많이 쓴다고 하지만 ( 그보다 손으로 여전히 하는 사람들이 더 많은 것 같기도 ), Rex 에 그냥 적응하면서 여전히 <a href="http://rexify.org">Rex</a> 를 사용하고 있습니다. 회사를 옮기고 새로운 작업환경을 둘러보다가 이전의 패턴이 그대로 먹히지 않기에 기존에 사용하던 Rexfile 의 구조도 살며시 바꿔나가야 했습니다.</p>

<h2>Rex 초기 설정</h2>

<p> Rex 가 설치되어 있다면, <code>rexify</code> 커맨드를 사용할 수 있습니다. 이 커맨드를 이용해서 초기 뼈대를 만들어 봅니다.</p>

<p><code>
$ rexify M
</code></p>

<p>그러면 아래와 같은 구성으로 Rex 를 사용하기 위한 기본 구성이 마련됩니다.</p>

<p>```
$ tree
.
├── Rexfile
└── lib</p>

<pre><code>└── M.pm
</code></pre>

<p>```</p>

<p><code>Rexfile</code> 에는 온갖 설정 정보를 넣고, M.pm 에는 각 Task 를 정의해둡니다.</p>

<h2>서버 그룹 위의 또 다른 그룹을 정의한다?</h2>

<p>　지금까지는 서버의 목적, 그러니까 <code>DB</code> 서버 면 <code>DB</code> 그룹에 , <code>Web</code> 서버면 <code>Web</code> 그룹에 묶으면 되었는데요. 하지만 현재의 회사에서는 서비스그룹이 나뉘어져 있기도 하고, 계정정보도 좀 다르기도 하고 그런 게 있습니다. &ndash;_&ndash;;</p>

<p> 그래서 <code>environment</code> 로 각 그룹을 묶어서 별도로 관리하기로 했습니다.</p>

<p> 그런 것을 고려해서 써놓은 Rexfile 은 아래와 같습니다.</p>

<p>```
use Rex -feature => 0.40;</p>

<p>environment sdt => sub {</p>

<pre><code>set user =&gt; "xxxx";
set password =&gt; "xxxxxx";
set -passauth;

set group =&gt; "all" =&gt; qw/1.2.3.51 1.2.3.52 1.2.3.53 1.2.3.54 1.2.3.55 1.2.3.56/;
set group =&gt; "db"  =&gt; qw/1.2.3.53 1.2.3.54/;
set group =&gt; "web" =&gt; qw/1.2.3.51 1.2.3.52 1.2.3.55 1.2.3.56/;
</code></pre>

<p>};</p>

<p>environment pshd => sub {</p>

<pre><code>set user =&gt; "xxxx";
set password =&gt; "xxxxxxxx";
set -passauth;
set group =&gt; "all" =&gt; qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34 1.2.4.35 1.2.4.36/;
set group =&gt; "db"  =&gt; qw/1.2.4.35 1.2.4.36/;
set group =&gt; "web" =&gt; qw/1.2.4.31 1.2.4.32 1.2.4.33 1.2.4.34/;
</code></pre>

<p>};</p>

<p>require M;
```</p>

<p>이렇게 <code>sdt</code> 와 <code>pshd</code> 라는 environment 를 따로 빼놓고 그 안에 각각 전체와 Web, DB 각각을 정의해둡니다.</p>

<p> <code>M.pm</code> 에는 <code>restart-opsview-agent</code>, <code>restart-munin-node</code>, <code>restart-apache</code>, <code>deploy-apps</code> 같은 뭐 이런저런 Task 들이 정의되어 있다고 치고…</p>

<p> 그런 것들을 각 environment 의 그룹단위로 실행시키도록 합니다.</p>

<p><code>
$ rex -E sdt -G all M:restart-opsview-agent
</code></p>

<p> 위처럼 <code>-E</code> 의 인자값으로 environment 를 지정하고 <code>-G</code> 의 인자값으로 all 그룹을 지정해줌으로써, sdt 의 전체 서버에 대해서 <code>opsview-agent</code> 를 재시작하게끔 합니다.</p>

<h2>결론</h2>

<p> 사실은 뭐 각 서버에 SSH Key 를 박아넣고 사용해야 좀 더 안심이 되기도 하지만, 여기에는 뜻모를 어른들의 사정이 숨어져 있는지라 쉽게 그럴수는 없기도 하답니다. &ndash;_&ndash;; 좀 더 시간을 두고 뭐 여러가지 불안요소와 편의성을 도모하기로 하고…</p>

<p> 터미널 사용에 익숙하지 않은 팀원들을 위해서 <code>Rex::WebUI</code> 도 살며시 검토해봤는데, 아직까지는 Task 에 기재된 정보를 기준으로 읽어들이는 것 밖에 되지 않는지라… 위처럼 그룹을 지정하거나 environment 를 지정하거나 하는 것은 불가능하군요. 뭐 어차피 서버 데몬을 아무나 만지게 하고 그러는 것도 조심스러운 지라… &ndash;_&ndash;;; 꼭 모두가 써야하는 것인가 하는 의문이 있어서, 이건 뭐 전제자체가 붕괴되는 군요.</p>

<p> 아무튼 Rex 괜찮습니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rex - Contributor 가 되어 있었습니다]]></title>
    <link href="http://jeen.github.io/blog/2012/06/14/rex-im-a-contributor/"/>
    <updated>2012-06-14T17:28:00+09:00</updated>
    <id>http://jeen.github.io/blog/2012/06/14/rex-im-a-contributor</id>
    <content type="html"><![CDATA[<p><a href="http://jeen.github.com/blog/2012/02/15/rex-pull-request/">http://jeen.github.com/blog/2012/02/15/rex-pull-request/</a></p>

<p> 이전에 이렇게 Rex 에 Pull Request 를 날린 적이 있었는데,</p>

<p><a href="https://metacpan.org/module/Rex">https://metacpan.org/module/Rex</a></p>

<p>의 Contributors 를 확인하니 &ldquo;Jeen Lee&rdquo; 라고 딱 박혀있네요 :&ndash;)</p>

<p>아쉽게도 그 뒤로 Rex 를 사용하고 있지는 않습니다만&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rex Pull Request]]></title>
    <link href="http://jeen.github.io/blog/2012/02/15/rex-pull-request/"/>
    <updated>2012-02-15T23:21:00+09:00</updated>
    <id>http://jeen.github.io/blog/2012/02/15/rex-pull-request</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://rexify.org/">&reg;?ex &ndash; A simple framework to simplify systemadministration</a></li>
</ul>


<p>최근에 여러 서버 일괄 작업을 위해서 <a href="http://metacpan.org/module/Rex">Rex</a> 로 이것저것 해보고 있는 중입니다. Rex 는 Ruby 쪽에서 많이 쓰인다는 Chef 같은 부류의 툴이랄까요, 아무튼 그런 류의 일을 Perl 로 할 수 있게 하는 툴입니다.</p>

<p>Rex 에 속한 네임스페이스를 살펴보면 다양한 OS 의 경우에 상응하는 다양한  케이스를 고려하고 있는 것 같습니다.</p>

<p>오늘 제가 쓴 Rex 의 가벼운 예제로는 다음과 같습니다.</p>

<p>~~~ perl Rexfile
user &lsquo;user&rsquo;;
password &lsquo;password&rsquo;;</p>

<p>pass_auth;</p>

<p>group => &ldquo;sweet-vms&rdquo; => &ldquo;vm[01..10]&rdquo;;</p>

<p>require Rex::Init;</p>

<p>~~~</p>

<p>~~~ perl Rex::Init
package Rex::Init;
use Rex::Commands;
use Rex::Commands::Run;
use Rex::Commands::Pkg;
use Rex::Commands::Iptables;</p>

<p>desc &lsquo;Add yum repo&rsquo;;
task &ldquo;add_yum_repo&rdquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>run("yum -y install http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm");
print "Added RPMForge Repo on /etc/yum.repos.d/\n";

repository add =&gt; "Opsview",
    url =&gt; 'http://downloads.opsera.com/opsview-community/latest/yum/centos/$releasever/$basearch';
print "Added OpsView Repo on /etc/yum.repos.d/\n";

update_package_db;
print "Updated yum package DB\n";
</code></pre>

<p>};</p>

<p>desc &lsquo;Install OpsView-Agent&rsquo;;
task &ldquo;install_opsview_agent&rdquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>install package =&gt; 'opsview-agent';
print "Installed \[opsview-agent\]\n";
</code></pre>

<p>};</p>

<p>desc &lsquo;Open NRPE(5666) Port&rsquo;;
task &lsquo;open_nrpe_port&rsquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>open_port 5666;
</code></pre>

<p>};
~~~</p>

<p>이렇게 <code>Rexfile</code> 에 각 서버 그룹과 SSH 접속 계정, 그리고 <code>Rex::Init</code> 에 그 그룹에 대한 작업(Task) 를 정의합니다.</p>

<p>위처럼 정의한 작업에 대해서,</p>

<p><del> bash
$ rex -T
Tasks
  Init:add_yum_repo              Add yum repo
  Init:install_opsview_agent     Install OpsView-Agent
  Init:open_nrpe_port            Open NRPE(5666) Port
Batches
</del></p>

<p><code>rex -T</code> 를 통해서 작동할 수 있는 Task 의 리스트를 받을 수 있습니다.</p>

<p>그리고,</p>

<p><del> bash
$ rex &lsquo;Init:add_yum_repo&rsquo; &lsquo;Init:install_opsview_agent&rsquo;
</del></p>

<p>이런식으로 동작할 작업들을 지정해줌으로, 위의 <code>sweet-vms</code> 그룹의 vm01 부터 vm10 의 의 열대의 서버에 대해서 <code>RPMForge</code> 와 <code>OpsView</code> <code>yum repo</code> 를 추가하고, <code>opsview-agent</code> 를 설치합니다. <code>opsview-agent</code> 자체는 기본적인 yum package 에 없는 라이브러리를 참조하기에 <code>RPMForge</code> 를 우선 등록한 것입니다.</p>

<p>예, 뭐 아무튼 이런 식입니다. 아직 뭐 본격적으로 이런저런 상황에 부딪히면서 검증하고 있고, Rex 자체에서 어떻게 할 수 없으면 직접 패치를 써나가 볼 까합니다.</p>

<p>그런 의미에서, 오늘 Rex 에 Pull Request 를 하나 보내서 0.25 에 Merge 되었습니다. :&ndash;)</p>

<ul>
<li><a href="https://github.com/JEEN/Rex/commit/1d69a96ba4371dc9e030fab494c887b9126a2c9d">https://github.com/JEEN/Rex/commit/1d69a96ba4371dc9e030fab494c887b9126a2c9d</a></li>
<li><a href="http://github.com/krimdomu/Rex/pull/12">http://github.com/krimdomu/Rex/pull/12</a></li>
</ul>


<p>사실 위에서 <code>opsview-agent</code> 는 제대로 설치되지 않습니다. 이유는 Pull Request 를 보내면서 봉착한 상황과 대처로 적어놨습니다.</p>

<blockquote class="twitter-tweet"><p>Rex 무려 GPL v3 였구나...</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169724680612216832" data-datetime="2012-02-15T10:08:11+00:00">February 15, 2012</a></blockquote>



]]></content>
  </entry>
  
</feed>
