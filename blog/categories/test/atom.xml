<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Jeen's techlog]]></title>
  <link href="http://jeen.github.com/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://jeen.github.com/"/>
  <updated>2013-02-28T11:17:08+09:00</updated>
  <id>http://jeen.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.proverc for less typing]]></title>
    <link href="http://jeen.github.com/blog/2012/11/26/proverc-for-less-typing/"/>
    <updated>2012-11-26T21:44:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/11/26/proverc-for-less-typing</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://jeen.github.com/blog/2012/11/21/using-test-pretty/">http://jeen.github.com/blog/2012/11/21/using-test-pretty/</a></li>
</ul>


<p>그러고보니 앞전에 쓴 글에서</p>

<p><code>bash
$ prove -Ilib -Pretty -v -lr
</code></p>

<p>요렇게 길게 쓰고 있었는데, 문서도 제대로 안보고 이래저래 옵션들을 갖다붙이다보니 돌이켜보면 참 부끄럽기 그지 없습니다.</p>

<ul>
<li><a href="https://metacpan.org/module/prove#OPTIONS">https://metacpan.org/module/prove#OPTIONS</a></li>
</ul>


<p>위의 prove 문서를 참고로해서 제가 무엇을 잘못했는지 다시 한번 돌이켜봤습니다.</p>

<h3>-Ilib 과 -l 은 같다.</h3>

<p> 그러니까 위에서는 <code>-Ilib</code> 과 <code>-lr</code> 로 같이 쓰고 있었는데 -_-;;</p>

<p><code>
-l,  --lib             Add 'lib' to the path for your tests (-Ilib).
</code></p>

<p><code>-l</code> 로 단순히 줄여서 표현할 수 있습니다. 해당 옵션이 무엇인지도 모르고 그냥 붙여쓰고 있었다니...</p>

<h3>타이핑횟수를 줄인다.</h3>

<p>그러니까 매번 테스트할 때마다</p>

<p><code>
$ prove -Pretty -lvr
</code></p>

<p>이렇게 쓰기 참 번거롭지요.</p>

<p>그러고보니 해당 프로젝트 루트아래에 <code>.proverc</code> 를 만들어서 사용하는 방법이 있었습니다.</p>

<p><code>
-l
-v
-r
-Pretty
</code></p>

<p>이렇게 해두면 이제 앞으로는</p>

<p><code>
$ prove
</code></p>

<p>만으로 위의 옵션을 활성화한 채로 테스트를 동작시킬 수 있습니다.</p>

<h3>결론</h3>

<p>똑같은 일을 3번, 4번하다 보면 가끔 내가 뭐하는 짓인가 하는 생각이 들 때가 있는데… 좀 더 빨리 깨달았으면 좋았을 것을 이라는 생각을 그때마다 하게 됩니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Test::Pretty]]></title>
    <link href="http://jeen.github.com/blog/2012/11/21/using-test-pretty/"/>
    <updated>2012-11-21T22:40:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/11/21/using-test-pretty</id>
    <content type="html"><![CDATA[<p> 사실 <code>TAP</code> 의 결과자체는 그렇게 이쁘장하지 않습니다.
  이전에 <code>NHN Deview 2012</code> 에서 <code>Mocha</code> 로 돌렸을 때 나오는 이쁨직한 테스트 결과를 보고,</p>

<blockquote><p>아, 저러면 왠지 테스트코드 쓰고, 돌릴 만하겠다</p></blockquote>

<p> 라는 뻘생각이 들었습니다. 하지만 전 테스트코드를 그렇게 용의주도하게 쓰지 않는 편이어서 그냥 다른 세상 이야기라고 넘겼습니다.</p>

<p> 그러는 와중에 일본의 Perl IRC 채널에서 <code>Test::*</code> 와 <code>TAP</code> 등에 대한 여러가지 회의론(?) 같은 이야기가 들려오다가 <code>BDD</code> 나 테스트 결과 자체가 하나의 <code>Spec</code> 으로 재이용되는 등의 이야기를 듣고는 많이 감화되었죠.</p>

<p> 그러는 중에 @tokuhirom 씨가 최근에 내놓은 <code>Test::Pretty</code> 와 <code>Test::Ika</code> 라는 모듈이 등장했습니다.</p>

<ul>
<li><a href="http://metacpan.org/module/Test::Pretty">Test::Pretty</a></li>
<li><a href="http://metacpan.org/module/Test::Ika">Test::Ika</a></li>
</ul>


<p><code>Test::Ika</code> 의 경우는 Perl5 용 <code>BDD</code> Framework 의 자리를 노리는 그런 모듈입니다만.. 현재의 버젼(<code>0.02</code>)에서는 생각대로 결과가 나와주지 않기에 조금 아쉬웠습니다.</p>

<p>그게 <code>describe</code>, <code>it</code> 등의 <code>BDD</code> 에서 사용하는 구문을 사용하고 있지만, <code>Test::Mojo</code> 처럼 <code>Test::More</code> 를 래핑한 모듈에서 사용할 때라든가… 좀 많이 아쉬운 장면들이 아직 있습니다. 뭐 물론 만든 지 얼마 안되기도 하고 그런 의미에서는 전도유망하다고할까요 :-)</p>

<p><code>Test::Pretty</code> 의 경우는 크게 이를 고려하지 않고도 흔히  사용하는 <code>Test::More</code> 로  테스트코드를 쓰고, <code>prove</code> Plugin 으로 동작합니다. 이름 그대로 결과를 이쁘게 보여준다는 것이죠.</p>

<p>다음처럼 말이죠.</p>

<h3>일반적인 TAP 형식의 출력</h3>

<p><img src="https://lh5.googleusercontent.com/-trTeNFoXQtU/UKzc4yghokI/AAAAAAAACFY/zaEbENGNHOQ/test-pretty-01.png" alt="일반적인 TAP 형식" /></p>

<h3>Test::Pretty 를 이용한 출력</h3>

<p><img src="https://lh3.googleusercontent.com/-okmAPP0EmC8/UKzc74KHsYI/AAAAAAAACFg/rthGC2gQn_E/test-pretty-02.png" alt="Test::Pretty 를 이용한 출력" /></p>

<h3>어떻게 실행을?</h3>

<p>Pretty 형식으로는 단일파일만 나오고, 전체 테스트코드를 한번에 돌렸을 때는 위처럼 나오지 않기에 왜 그럴까 고심해보다가 아래처럼 테스트코드를 실행하면 제대로 동작하는 것을 확인했습니다.</p>

<p><code>
$ prove -Ilib -Pretty -v -lr
</code></p>

<h3>결론</h3>

<p> JS 테스트 프레임워크인 <a href="http://visionmedia.github.com/mocha/">Mocha</a> 를 들여다 봤는데 여러모로 베껴왔으면 하는 그런 세련됨이 있네요. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl and Continuous Integration with Jenkins - II]]></title>
    <link href="http://jeen.github.com/blog/2012/02/02/perl-and-continuous-integration-with-jenkins-2/"/>
    <updated>2012-02-02T07:00:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/02/02/perl-and-continuous-integration-with-jenkins-2</id>
    <content type="html"><![CDATA[<p>  애시당초 블로깅하려던 내용을 발표자료로 엮었습니다.</p>

<script src="http://storify.com/jeen_lee/perl-and-continuous-integration-w-jenkins.js"></script>


<p><noscript>[<a href="http://storify.com/jeen_lee/perl-and-continuous-integration-w-jenkins" target="_blank">View the story "Perl and Continuous Integration w/ Jenkins" on Storify</a>]</noscript></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Test::More - use 'subtest' instead of {} block]]></title>
    <link href="http://jeen.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block/"/>
    <updated>2012-01-05T20:33:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/01/05/test-more-use-subtest-instead-of-block</id>
    <content type="html"><![CDATA[<p>  여태껏 테스트코드를 써나가면서 그냥 {} 블록안에 일정한 흐름의 테스트 코드를 적곤 했었습니다.</p>

<p>``` perl
use Test::More;
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';</p>

<h1>Access /</h1>

<p>{</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>}</p>

<h1>Login</h1>

<p>{</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>}</p>

<h1>some action</h1>

<p>{</p>

<pre><code>...;
</code></pre>

<p>}
```</p>

<p>  일단 뭐 {} 블록으로 각 action 에 대한 접근결과를 테스트하고, <code>#</code> 로 주석표시를 하면서 하나둘 하나둘 각 블록에 <code>$req</code>, <code>$res</code> 를 추가했었습니다. 일단 뭐 {} 블록으로 묶으면서 <code>$req</code>, <code>$res</code> 따위의 변수의 재정의 등에 관한 경고같은 것이 안나와서 좋고, 제대로 분류가 되는 느낌이기도 했습니다.</p>

<h3>그냥 <code>subtest</code> 를 사용하면 어떨까?</h3>

<p>  그러는 도중에 <a href="http://search.cpan.org/perldoc?Test::More">Test::More 매뉴얼</a>을 읽어보다가 <code>subtest</code> 를 사용할 수 있다는 것을 알게 되었습니다.</p>

<p>``` perl
use HTTP::Request::Common;
use Catalyst::Test 'MyApp::Web';
use Test::More;</p>

<p>subtest 'access to /' => sub {</p>

<pre><code>my $res = request('/');
ok($res-&gt;is_success, "Request should be succeed");
ok($res-&gt;header('.......'), 'Header xxxxx exist');
like($res-&gt;content, qr|some sentences|, "Found some sentences")
</code></pre>

<p>};</p>

<p>subtest 'Login' => sub {</p>

<pre><code>my $req = POST('/login', [ 'username' =&gt; 'blahblah', 'password' =&gt; 'blahblah' ]);
my $res = request($req);
ok($res-&gt;is_success, "Request should be suceed");
....
</code></pre>

<p>};
```</p>

<p>  <code>subtest</code> 를 사용하면서 코드는 위처럼 바뀌었습니다. <code>#</code> 로 주석처리를 할 필요도 없고, 해당 <code>subtest</code> 마다 명확하게 무엇을 하는 지 확실하게 의미있는 <code>subtest</code> 의 이름으로 정해줄 수 있었습니다.</p>

<p>  <code>subtest</code> 로 테스트를 썼을 경우는 TAP 결과는 다음과 같습니다.</p>

<p>``` bash
$ prove t/myapp.t
ok 1 - access to /</p>

<pre><code>ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
1..3
</code></pre>

<p>ok 2 - Login</p>

<pre><code>ok 1 - Request should be suceed
...
1..3
</code></pre>

<p>....
1..3
ok
All tests successful.
Files=1, Tests=3, 10 wallclock secs ( 0.07 usr  0.01 sys +  6.16 cusr  0.61 csys =  6.85 CPU)
Result: PASS
```</p>

<p>  전체 테스트 횟수는 <code>subtest</code> 안의 테스트 항목이 아니라, <code>subtest</code> 의 갯수가 되는 것입니다.</p>

<p>  그리고 <code>subtest</code> 를 사용하지 않고 {} 블록을 이용해서 flat 하게 정의했을 때는 아래와 같습니다.</p>

<p><code>bash
...
ok 1 - Request should be succeed
ok 2 - Header xxxxx exist
ok 3 - Found some sentences
ok 4 - Request should be suceed
 ...
</code></p>

<p>  테스트 항목 1,4 번의 메시지가 같기 때문에 매번 달리 지정해줘야 되는 수고가 발생하죠. 그리고 각각의 테스트 항목 하나하나가 테스트 갯수가 되는 것입니다.</p>

<p>  사실은 위의 Jenkins 상의 <code>Test Result Trend</code> 의 그래프가 어느 순간 갑자기 뚝 떨어지길래, 어라 이상하다 싶어서 살펴본 결과, <code>subtest</code> 기준으로 카운트되어있는 것을 확인했습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-TSX-Kd5-fX4/TwWRjvHx2LI/AAAAAAAAA94/pYrEEgHBZic/test-result-trend.png" alt="Jenkins Test Result Trend 의 낙폭" /></p>

<p>  대충 위의 <code>#58</code> 번 빌드가 그 쯤이 되겠네요.</p>

<p>  아무튼 Jenkins 도입이후에 좀 더 테스트코드에 더 신경을 쓰고 있는 요즘입니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl and Continuous Integration with Jenkins - I]]></title>
    <link href="http://jeen.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1/"/>
    <updated>2012-01-03T11:45:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/01/03/perl-and-continuous-integration-with-jenkins-1</id>
    <content type="html"><![CDATA[<h3>Jenkins 를 사용하기 까지</h3>

<p>  사실 지난주에 NHN 에서 주최하는 공개개발자 교육에  갔다왔었습니다. 평소 Jenkins 에 대해서 약간 환상 같은 게 있다고 할까, 필요성이 있다고 할까요. 좀 더 프로젝트의 품질이 나아지고 있다는 환상, 그런 걸 보면서 나름 보람을 느끼고 싶다라는 생각도 있었습니다.</p>

<p>  아무튼 Jenkins 교육은 Java 위주의 프로젝트에 적용하는 얘기였지만, 다른 언어에서도 충분히 지원된다라는 얘기를 익히들어왔기에 대강 실습을 따라하면서 감을 익히고 회사에 와서 본격적으로 Jenkins 를 만지기 시작했습니다.</p>

<h3>Perl &amp; Jenkins</h3>

<p>  Jenkins 교육에서는 Maven 을 위주로 여러가지 옵션(?) 을 추가하는 것으로 간단하게 각종 Report 를 뽑아내기 위한 xml 들을 생성할 수 있었습니다. 아쉽게도 Perl 로는 Maven 만큼 쉽게 그렇게 만들기는 어려웠지요.</p>

<p>  일단 Perl 에는 기본적으로 TAP 형식을 따르고 있기 때문에 Java 류의 JUnit 으로 결과를 뽑아낼 필요가 있었습니다. 그래서 TAP 를 JUnit 으로 쉽게 바꿔줄 수 있는 방법이 필요했죠.</p>

<p><code>bash
$ prove --formatter --timer TAP::Formatter::JUnit t
</code></p>

<p>  위와 같은 형식으로 <code>t</code> 디렉토리 아래의 테스트파일들을 테스트하며 결과는 <code>TAP::Formatter::JUnit</code> 에 의해서 xml 파일로 나오게 됩니다.</p>

<p>``` xml
<testsuites>
  &lt;testsuite failures="0"</p>

<pre><code>         errors="0"
         time="25.6525909900665"
         tests="1"
         name="Catalyst_controller_Admin-Activity_t"&gt;
&lt;testcase time="0"
          name="1 - Request should succeed"&gt;&lt;/testcase&gt;
&lt;system-out&gt;&lt;![CDATA[ok 1 - Request should succeed
</code></pre>

<p>1..1
]]&gt;</system-out></p>

<pre><code>&lt;system-err&gt;&lt;/system-err&gt;
&lt;/testsuite&gt;
</code></pre>

<p></testsuites>
```</p>

<h3>Task::Jenkins</h3>

<p>  사실은 Jenkins 에서 Perl 프로젝트를 올릴 때의 주요한 모듈의 묶음은 <a href="http://search.cpan.org/perldoc?Task::Jenkins">Task::Jenkins</a> 모듈로 제공되고 있습니다. Task::Jenkins 에 있는 모듈들은,</p>

<ul>
<li><a href="http://search.cpan.org/perldoc?TAP::Formatter::JUnit">TAP::Formatter::JUnit</a></li>
<li><a href="http://search.cpan.org/perldoc?App::Prove">App::Prove</a></li>
<li><p><a href="http://search.cpan.org/perldoc?Devel::Cover">Devel::Cover</a></p>

<p>입니다.</p>

<p><code>TAP::Formatter::JUnit</code> 의 경우는 위에서 설명했고, <code>App::Prove</code> 는 위의 테스트코드를 실행하는 커맨드인 <code>prove</code> 를 사용하기 위한 모듈입니다. <code>Devel::Cover</code> 는 Code Coverage 를 확인할 수 있는 모듈이구요.</p>

<p>일단 Jenkins 에서 Perl 프로젝트를 적용하는 준비는 기본적으로 위의 <code>Task::Jenkins</code> 를 설치함으로 어느 정도 끝났다고 볼 수 있습니다.</p></li>
</ul>


<h3>Jenkins 설치</h3>

<p>  회사내의 서버에 Jenkins 를 설치했습니다. Ubuntu 10.10 Server 버젼이며, Jenkins 의 설치는 그렇게 어렵지 않습니다.</p>

<p>  쉽게 Google 에서 <em>Jenkins Ubuntu</em> 로 검색해서 나온 것들 중 첫번째를 골라봤습니다.</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">Installing Jenkins on Ubuntu</a></li>
</ul>


<p>  <code>apt</code> source 추가하고 <code>aptitude</code> 로 설치하고, Apache 에서 Proxy 설정해주고, 이에 대한 자세한 이야기는 위의 링크에 자세히 나와 있으니 참고하시길 바랍니다.</p>

<p>  NHN 공개개발자 교육에서는 보안상의 문제로 Tomcat 위에다가 얹어놓기를 권하셨지만, Jenkins 자체의 Standalone Server 로 충분하지 않나 생각됩니다. 뭐 어차피 사내 네트워크 안에서 사용할 것인데... 라며... =3</p>

<p>  아무튼 이렇게 띄워서 실제로 사내에서 사용하고 있는 Jenkins Top Page 는 아래와 같습니다.</p>

<p><img src="http://lh6.googleusercontent.com/--lGDWehSz5k/TwKGZAtvsUI/AAAAAAAAA9w/tRFttK10-wg/jenkins-top-page.png" alt="Jenkins Top" /></p>

<p>  한번에 적으려니 좀 길고 해서, 일단 밑밥깔기부터 하고 다음 글부터는 좀 더 자세한 Jenkins 에서 Perl 프로젝트 적용에 대해서 상세한 캡쳐와 함께 설명하고자 합니다.</p>
]]></content>
  </entry>
  
</feed>
