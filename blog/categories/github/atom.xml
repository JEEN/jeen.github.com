<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Jeen - Yet anothere techlog]]></title>
  <link href="http://jeen.github.io/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://jeen.github.io/"/>
  <updated>2013-07-17T19:56:54+09:00</updated>
  <id>http://jeen.github.io/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Export Github Issues]]></title>
    <link href="http://jeen.github.io/blog/2012/07/18/export-github-issues/"/>
    <updated>2012-07-18T15:44:00+09:00</updated>
    <id>http://jeen.github.io/blog/2012/07/18/export-github-issues</id>
    <content type="html"><![CDATA[<p>회사에서는 한달에 $20 인가 지불하면서 Github 을 쓰고 있습니다.</p>

<p>$20 플랜에서는 한정적인 Private Repo 밖에 만들지 못합니다. 그래서 완료가 된 프로젝트에 대해서는
Github Repo 를 닫고 사내 Git Repo 로 옮기는 방식으로 사용하고 있습니다.</p>

<p>그럴거면 그냥 사내 Git Repo 를 사용할 것이지 왜 돈내가면서 Github 를 쓰느냐고 물으신다면,
Github 에서 제공해주는 Issue 관리라든가, Wiki 라든가 여러모로 통합이 잘되어 있고 깔끔해서
사용하기 편하다고 그냥 그렇게 말하렵니다.</p>

<p>아무튼 그러면서, 프로젝트 뿐 아니라 회사내에 발생하는 다양한 이슈들은 Bugzilla 에 기록해놓습니다.</p>

<p>다 끝나서 닫아야할 프로젝트들을 사내 Repo 로 옮기는 것은 좋지만, Issues 안에 적어둔 깨알같은 내용들과 코멘트들 등등을 고스란히 다 허공으로 날려버려야 된다는 것은 뼈아픈 일입니다.</p>

<p>그래서 잠깐 시간을 내서 Issues 에 있는 내용(이슈타이틀,내용,코멘트, Git commit, 이슈 참조 등등)을 뽑아서 Bugzilla 에 담아놓기 좋게 코드를 써봤습니다.</p>

<p>~~~ perl export-github-issues.pl
use strict;
use warnings;
use Text::Xslate;
use Data::Section::Simple;
use Net::GitHub::V3;
use Config::Pit;</p>

<p>my $pit = pit_get(&lsquo;github.com&rsquo;, require => {</p>

<pre><code>login =&gt; "Your login",
pass  =&gt; "Your pass",
</code></pre>

<p>});</p>

<p>my $github = Net::GitHub::V3->new(</p>

<pre><code>login =&gt; $pit-&gt;{login},
pass  =&gt; $pit-&gt;{pass},
</code></pre>

<p>);</p>

<p>my ($user, $repo) = @ARGV;
unless ($user &amp;&amp; $repo) {</p>

<pre><code>print "Usage: perl p.pl silexkr Donnenwa\n";
exit;
</code></pre>

<p>}</p>

<p>my $tx  = Text::Xslate->new(</p>

<pre><code>syntax =&gt; 'TTerse',
module =&gt; \[ 'Text::Xslate::Bridge::TT2Like' \],
path =&gt; \[
    Data::Section::Simple-&gt;new()-&gt;get_data_section()
\],
</code></pre>

<p>);</p>

<p>my $issue = $github->issue;
my @issues = $issue->repos_issues($user, $repo, { state => &lsquo;closed&rsquo; });
while($issue->has_next_page) {</p>

<pre><code>push @issues, $issue-&gt;next_page;
</code></pre>

<p>}</p>

<p>for my $iss (@issues) {</p>

<pre><code>my @comments = ();
my @events   = ();
eval { @comments = $issue-&gt;comments('silexkr', $repo, $iss-&gt;{number}) };
eval { @events   = $issue-&gt;events('silexkr', $repo, $iss-&gt;{number}) };
print $tx-&gt;render('text.tx', { %{ $iss }, comments =&gt; \@comments, events =&gt; \@events });
</code></pre>

<p>}</p>

<p><strong>DATA</strong></p>

<p>@@ text.tx</p>

<p>[% number %].[% title %] [% FOREACH label IN labels %][% label.name %] [% END %]
  &ndash; [% user.login %]
  &ndash; [% created_at %] ~ [% closed_at %]
[% IF body %]
 // [% body %]
[% END %]
[% FOREACH comment IN comments %]
\= [% comment.user.login %] @ [% comment.updated_at %]
&mdash; [% comment.body %]
[% END %]
[% FOREACH event IN events %][% NEXT UNLESS event.commit_id %]
\= [% event.commit_id %][% END %]
~~~</p>

<p><a href="http://metacpan.org/module/Net::GitHub">Net::GitHub</a> 모듈에서 뭔가 코멘트를 뽑아내려는 데 없으면 계속 죽어버리는 문제 등등이 있어서 뭐 그냥 <code>eval {}</code> 로 묶어버렸구요.</p>

<p><a href="http://metacpan.org/module/Text::Xslate">Text::Xslate</a> 에서 <code>path</code> 를</p>

<p><del> perl
Data::Section::Simple->new()&ndash;>get_data_section();
</del></p>

<p>으로 해서 쉽게 <code>-&gt;render()</code> 의 첫번째 인수를 템플릿이름으로 지정할 수 있더군요.</p>

<p><code>Net::GitHub</code> 의 <code>-&gt;next_page</code> 가 최근 최근에 사용된 API 기준으로 동작을 하다보니, <code>while()</code> 안에서 <code>events</code>, <code>comments</code> 를 혼용해서 사용해버리면 의도한 대로 동작을 하지 않아서, <code>@issues</code> 안에 일단 전체 이슈를 뽑고서 시작을 했습니다.</p>

<p>아무튼 뭐 얼기설기 그냥 놔두기도 그렇고 혹여나 해서 일단 올려봅니다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rex Pull Request]]></title>
    <link href="http://jeen.github.io/blog/2012/02/15/rex-pull-request/"/>
    <updated>2012-02-15T23:21:00+09:00</updated>
    <id>http://jeen.github.io/blog/2012/02/15/rex-pull-request</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://rexify.org/">&reg;?ex &ndash; A simple framework to simplify systemadministration</a></li>
</ul>


<p>최근에 여러 서버 일괄 작업을 위해서 <a href="http://metacpan.org/module/Rex">Rex</a> 로 이것저것 해보고 있는 중입니다. Rex 는 Ruby 쪽에서 많이 쓰인다는 Chef 같은 부류의 툴이랄까요, 아무튼 그런 류의 일을 Perl 로 할 수 있게 하는 툴입니다.</p>

<p>Rex 에 속한 네임스페이스를 살펴보면 다양한 OS 의 경우에 상응하는 다양한  케이스를 고려하고 있는 것 같습니다.</p>

<p>오늘 제가 쓴 Rex 의 가벼운 예제로는 다음과 같습니다.</p>

<p>~~~ perl Rexfile
user &lsquo;user&rsquo;;
password &lsquo;password&rsquo;;</p>

<p>pass_auth;</p>

<p>group => &ldquo;sweet-vms&rdquo; => &ldquo;vm[01..10]&rdquo;;</p>

<p>require Rex::Init;</p>

<p>~~~</p>

<p>~~~ perl Rex::Init
package Rex::Init;
use Rex::Commands;
use Rex::Commands::Run;
use Rex::Commands::Pkg;
use Rex::Commands::Iptables;</p>

<p>desc &lsquo;Add yum repo&rsquo;;
task &ldquo;add_yum_repo&rdquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>run("yum -y install http://pkgs.repoforge.org/rpmforge-release/rpmforge-release-0.5.2-2.el5.rf.x86_64.rpm");
print "Added RPMForge Repo on /etc/yum.repos.d/\n";

repository add =&gt; "Opsview",
    url =&gt; 'http://downloads.opsera.com/opsview-community/latest/yum/centos/$releasever/$basearch';
print "Added OpsView Repo on /etc/yum.repos.d/\n";

update_package_db;
print "Updated yum package DB\n";
</code></pre>

<p>};</p>

<p>desc &lsquo;Install OpsView-Agent&rsquo;;
task &ldquo;install_opsview_agent&rdquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>install package =&gt; 'opsview-agent';
print "Installed \[opsview-agent\]\n";
</code></pre>

<p>};</p>

<p>desc &lsquo;Open NRPE(5666) Port&rsquo;;
task &lsquo;open_nrpe_port&rsquo;, group => &ldquo;sweet-vms&rdquo;, sub {</p>

<pre><code>open_port 5666;
</code></pre>

<p>};
~~~</p>

<p>이렇게 <code>Rexfile</code> 에 각 서버 그룹과 SSH 접속 계정, 그리고 <code>Rex::Init</code> 에 그 그룹에 대한 작업(Task) 를 정의합니다.</p>

<p>위처럼 정의한 작업에 대해서,</p>

<p><del> bash
$ rex -T
Tasks
  Init:add_yum_repo              Add yum repo
  Init:install_opsview_agent     Install OpsView-Agent
  Init:open_nrpe_port            Open NRPE(5666) Port
Batches
</del></p>

<p><code>rex -T</code> 를 통해서 작동할 수 있는 Task 의 리스트를 받을 수 있습니다.</p>

<p>그리고,</p>

<p><del> bash
$ rex &lsquo;Init:add_yum_repo&rsquo; &lsquo;Init:install_opsview_agent&rsquo;
</del></p>

<p>이런식으로 동작할 작업들을 지정해줌으로, 위의 <code>sweet-vms</code> 그룹의 vm01 부터 vm10 의 의 열대의 서버에 대해서 <code>RPMForge</code> 와 <code>OpsView</code> <code>yum repo</code> 를 추가하고, <code>opsview-agent</code> 를 설치합니다. <code>opsview-agent</code> 자체는 기본적인 yum package 에 없는 라이브러리를 참조하기에 <code>RPMForge</code> 를 우선 등록한 것입니다.</p>

<p>예, 뭐 아무튼 이런 식입니다. 아직 뭐 본격적으로 이런저런 상황에 부딪히면서 검증하고 있고, Rex 자체에서 어떻게 할 수 없으면 직접 패치를 써나가 볼 까합니다.</p>

<p>그런 의미에서, 오늘 Rex 에 Pull Request 를 하나 보내서 0.25 에 Merge 되었습니다. :&ndash;)</p>

<ul>
<li><a href="https://github.com/JEEN/Rex/commit/1d69a96ba4371dc9e030fab494c887b9126a2c9d">https://github.com/JEEN/Rex/commit/1d69a96ba4371dc9e030fab494c887b9126a2c9d</a></li>
<li><a href="http://github.com/krimdomu/Rex/pull/12">http://github.com/krimdomu/Rex/pull/12</a></li>
</ul>


<p>사실 위에서 <code>opsview-agent</code> 는 제대로 설치되지 않습니다. 이유는 Pull Request 를 보내면서 봉착한 상황과 대처로 적어놨습니다.</p>

<blockquote class="twitter-tweet"><p>Rex 무려 GPL v3 였구나...</p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/169724680612216832" data-datetime="2012-02-15T10:08:11+00:00">February 15, 2012</a></blockquote>



]]></content>
  </entry>
  
</feed>
