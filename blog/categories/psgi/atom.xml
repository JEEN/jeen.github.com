<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: psgi | Jeen's techlog]]></title>
  <link href="http://JEEN.github.com/blog/categories/psgi/atom.xml" rel="self"/>
  <link href="http://JEEN.github.com/"/>
  <updated>2012-01-05T23:22:04+09:00</updated>
  <id>http://JEEN.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Plack::Middleware::OAuth]]></title>
    <link href="http://JEEN.github.com/blog/2011/12/27/using-plack-middleware-oauth/"/>
    <updated>2011-12-27T13:24:00+09:00</updated>
    <id>http://JEEN.github.com/blog/2011/12/27/using-plack-middleware-oauth</id>
    <content type="html"><![CDATA[<h3>Before Using Plack::Middleware::OAuth</h3>

<p>  사실은 <a href="http://search.cpan.org/perldoc?Plack::Middleware::OAuth">Plack::Middleware::OAuth</a> 를 사용하기 이전에는 OAuth 관련 callback 처리등을 직접 파라메터를 확인해가면서 해당 액션을 처리했었습니다. 그게 P::M::OAuth 를 사용해서 각 OAuth Provider 들을 좀 더 유연하게 다룰 수 있게 되지 않았나 합니다.</p>

<p>``` perl</p>

<pre><code>sub redirect_to_foursquare {
    my $self = shift;

    # redirect to foursquare authentication url
    $self-&gt;response-&gt;redirect("https://foursquare.com/oauth2/authenticate?client_id=$client_id&amp;response_type=code&amp;redirect_uri=$callback_url");
}
</code></pre>

<p>  sub receive_token_foursquare {</p>

<pre><code>  my $self = shift;

  my $res = Furl-&gt;new-&gt;get("https://foursquare.com/oauth2/access_token?client_id=$client_id&amp;client_secret=$client_secret&amp;grant_type=authorization_code&amp;redirect_uri=$redirect_url&amp;code=".$self-&gt;request-&gt;param('code'));
  ...
</code></pre>

<p>  }
```</p>

<p>  예, 뭐 위처럼 OAuth 인증시에 <code>client_id</code> 랑 <code>client_secret</code> 그리고 <code>grant_type</code> 등 여러가지 파라메터의 지정이나 인증 URL 등등이 Provider 마다 다르고 이러니 뭐 일일이 Provider 마다 매번 어플리케이션 단에서 코드를 써나가는 것이 참 불쾌하기 마련이었습니다.
  나름 플러거블하게 만든다고 해봤지만 역시 이런 부분은 Middleware 단에서 처리하는 게 좋지 않을까 생각하고 있었지요.
  그런의미에서 P::M::OAuth 를 사용하게 되었습니다.</p>

<h3>Custom Provider</h3>

<p>  P::M::OAuth 는 OAuth v1/v2 를 지원합니다. OAuth 버젼마다 파라메터가 바뀌기 때문에 사용하고자 하는 OAuth Provider 가 어떤 버젼을 지원하는 지 확인해봐야 합니다.
   P::M::OAuth 는 기본적으로 <em>Github</em>, <em>Twitter</em>, <em>Facebook</em>, <em>Live</em>, <em>Google</em> 의 다섯가지 OAuth Provider 를 지원합니다.</p>

<p>  저는 <em>FourSquare</em> 의 OAuth 를 사용하려고 하는 데, 기본적으로 제공해주지 않으니, 약간 손질을 해줘야 되겠죠.</p>

<p>``` perl
package Plack::Middleware::OAuth::Foursquare;
use strict;
use warnings;</p>

<p>sub config {</p>

<pre><code>+{
    version          =&gt; 2,
    authorize_url    =&gt; 'https://foursquare.com/oauth2/authenticate',
    access_token_url =&gt; 'https://foursquare.com/oauth2/access_token',
    response_type    =&gt; 'code',
    grant_type       =&gt; 'authorization_code',
};
</code></pre>

<p>}</p>

<p>1;
```</p>

<p>  위처럼 <code>Plack::Middleware::OAuth::Foursquare</code> 와,</p>

<p>``` perl
package Plack::Middleware::OAuth::UserInfo::Foursquare;
use strict;
use warnings;
use parent qw(Plack::Middleware::OAuth::UserInfo);
use LWP::UserAgent;
use JSON;</p>

<p>sub create_handle {}</p>

<p>sub query {</p>

<pre><code>my $self = shift;

my $uri = URI-&gt;new('https://api.foursquare.com/v2/users/self');
$uri-&gt;query_form( oauth_token =&gt; $self-&gt;token-&gt;access_token );
my $res = LWP::UserAgent-&gt;new-&gt;get($uri);
my $body = $res-&gt;decoded_content;
return unless $body;

my $obj = decode_json($body) || {};
return $obj-&gt;{response}-&gt;{user};
</code></pre>

<p>}</p>

<p>1;
```</p>

<p>  <code>Plack::Middleware::OAuth::UserInfo::Foursquare</code> 를 추가합니다.</p>

<p>  이렇게 쉽게 OAuth Provider 마다 해당 네임스페이스 맞는 모듈을 추가해줍니다.</p>

<h3>MyApp</h3>

<p>``` perl</p>

<h1>...</h1>

<p>my $app = MyApp->psgi_app;
builder {</p>

<pre><code>mount '/oauth' =&gt; builder {
    enable 'OAuth',
        on_success =&gt; sub {
            my ($mw, $token) = @_;

            # get Foursquare's UserInfo
            my $info = Plack::Middleware::OAuth::UserInfo-&gt;new( config =&gt; $mw-&gt;config, token =&gt; $token );

            if ($token-&gt;is_provider('Foursquare')) {
            return $mw-&gt;redirect('/');  
          }
          on_error =&gt; sub { #... },
          providers =&gt; {
              'Foursquare' =&gt; {
                  client_id =&gt; 'YOUR CLIENT_ID',
                  client_secret =&gt; 'YOUR CLIENT_SECRET',
              },
          };
        }
};
mount '/' =&gt; $app;
</code></pre>

<p>};
```</p>

<p>  대충 위처럼 사용을 합니다.
  좀 더 자세한 예제는 <a href="https://github.com/c9s/Plack-Middleware-OAuth/blob/develop/eg/app.psgi">P::M::OAuth 모듈의 예제 psgi 파일</a> 또는 , 이 모듈을 사용한 제 프로젝트 <a href="https://github.com/JEEN/Bobby-Akawa/blob/develop/lib/Bobby.pm#L46">Bobby-Akawa 의 특정 모듈</a>에서 찾아볼 수 있습니다.</p>

<h3>Conclusion</h3>

<p>  이로써 간략하게나마 Plack::Middleware::OAuth 를 이용해서 OAuth 인증을 Plack Middleware 단에서 구현할 수 있게 되었습니다. 조금 설명이 빈약해서 차후에 좀 더 구현단으로 들어가서 좀 더 깊게 파고들어가 볼까 합니다.</p>
]]></content>
  </entry>
  
</feed>
