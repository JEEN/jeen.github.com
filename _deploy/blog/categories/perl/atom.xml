<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perl | Jeen's techlog]]></title>
  <link href="http://jeen.github.com/blog/categories/perl/atom.xml" rel="self"/>
  <link href="http://jeen.github.com/"/>
  <updated>2012-09-09T20:56:07+09:00</updated>
  <id>http://jeen.github.com/</id>
  <author>
    <name><![CDATA[Jeen Lee]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a perl project on Travis CI]]></title>
    <link href="http://jeen.github.com/blog/2012/08/28/building-a-perl-project-on-travis-ci/"/>
    <updated>2012-08-28T14:25:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/08/28/building-a-perl-project-on-travis-ci</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://travis-ci.org/">Travis CI - Distributed build platform for the open source community</a></li>
</ul>


<p><code>Travis CI</code>은 이전에 얘기를 들었을 때는 별  관심이 없었는데(처음에는 확실히 Perl 을 지원하지 않아서), 언제부턴가 Perl 을 지원한다는 얘기를 듣고 Perl 커뮤니티에서 움직임이 조금씩 있더라구요. <code>Dist::Zilla::TravisCI</code> 같은 모듈들도 나오는 걸로 봐서…</p>

<p>사용하는 방법은 아주 간단합니다. <code>Github</code> 계정에 연결되고, 그리고 Github 의 Public 상태의 프로젝트를 고르고… 그 프로젝트에 <code>.travis.yml</code> 파일을 놓아주면 됩니다.</p>

<ul>
<li><a href="http://about.travis-ci.org/docs/user/languages/perl/">Travis CI - Building a Perl Project</a></li>
</ul>


<p>자세한 건 위의 설명페이지를 참고해서 이전에 살짝 만들어 놓은 <code>Zamakist</code> 를 <code>Travis CI</code> 에서 돌려보게 해봤습니다.</p>

<p><img src="https://lh5.googleusercontent.com/-EUnpasmILzs/UDxYWf7j2WI/AAAAAAAACBg/y1EdG7zFKopng" alt="img-failed" /></p>

<p> 처음에야 뭐 물론 <code>.travis.yml</code> 파일이 없어서 실패했다는 메일이 날라왔구요.</p>

<p> <code>.travis.yml</code> 을 추가해준 결과로는 다시 이렇게 제대로 돌아간다는 메일이 옵니다.</p>

<p><img src="https://lh5.googleusercontent.com/-ub5BrJZrXPw/UDxYT_Xl7JI/AAAAAAAACBY/CtHCGYNaJcpng" alt="Img1" /></p>

<p> <code>Travis CI</code> 에서 출력되는 빌드 내용은 아래와 같습니다.</p>

<p>``` bash
Using worker: ppp3.worker.travis-ci.org:php-1</p>

<p>$ cd ~/builds
$ git clone --depth=100 --quiet git://github.com/JEEN/p5-App-Zamakist.git JEEN/p5-App-Zamakist
$ cd JEEN/p5-App-Zamakist
$ git checkout -qf df10bdfea286c9933c345c84206eaa90b8f298a6
$ perlbrew use 5.16
$ perl --version</p>

<p>This is perl 5, version 16, subversion 0 (v5.16.0) built for i686-linux</p>

<p>Copyright 1987-2012, Larry Wall</p>

<p>Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.</p>

<p>Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.</p>

<p>$ cpanm --version
cpanm (App::cpanminus) version 1.5017
$ cpanm --quiet --installdeps --notest .
Successfully installed Text-CharWidth-0.04
Successfully installed Text-UnicodeBox-0.03
Successfully installed XML-XPathEngine-0.13
Successfully installed HTML-Tree-5.02
Successfully installed HTML-TreeBuilder-XPath-0.14
Successfully installed HTML-Selector-XPath-0.14
Successfully installed Web-Query-0.08
Successfully installed Term-ReadLine-Zoid-0.07
8 distributions installed
$ perl Makefile.PL &amp;&amp; make test
include /home/travis/builds/JEEN/p5-App-Zamakist/inc/Module/Install.pm
include inc/Module/Install/Metadata.pm
include inc/Module/Install/Base.pm
include inc/Module/Install/Makefile.pm
Cannot determine perl version info from lib/App/Zamakist.pm
include inc/Module/Install/Scripts.pm
include inc/Module/Install/Include.pm
include inc/Test/More.pm
include inc/Module/Install/WriteAll.pm
include inc/Module/Install/Win32.pm
include inc/Module/Install/Can.pm
include inc/Module/Install/Fetch.pm
Writing Makefile for App::Zamakist
Writing MYMETA.yml and MYMETA.json
Writing META.yml
cp lib/App/Zamakist/Media.pm blib/lib/App/Zamakist/Media.pm
cp lib/App/Zamakist.pm blib/lib/App/Zamakist.pm
cp lib/App/Zamakist/Role/Reportable.pm blib/lib/App/Zamakist/Role/Reportable.pm
cp lib/App/Zamakist/Handler/GOM.pm blib/lib/App/Zamakist/Handler/GOM.pm
cp bin/zamakist blib/script/zamakist
/home/travis/perl5/perlbrew/perls/5.16/bin/perl "-Iinc" -MExtUtils::MY -e 'MY->fixin(shift)' -- blib/script/zamakist
PERL_DL_NONLAZY=1 /home/travis/perl5/perlbrew/perls/5.16/bin/perl "-MExtUtils::Command::MM" "-e" "test_harness(0, 'inc', 'blib/lib', 'blib/arch')" t/*.t
t/00_compile.t ......... ok
t/01_find_permalink.t .. 5/7 # http://search.gomtv.com/searchjm.gom?key=The.Mentalist.S04E01.HDTV.XviD-ASAP.%5BVTV%5D.Scarlet.Ribbons&amp;preface=0</p>

<h1>http://gom.gomtv.com/jmdb/view.html?intSeq=808364&amp;preface=0&amp;spage=1</h1>

<p>Wide character in print at /home/travis/perl5/perlbrew/perls/5.16/lib/5.16.0/Test/Builder.pm line 1759.</p>

<h1>[통합] The.Mentalist.S04E01.HDTV.XviD-ASAP</h1>

<p>t/01_find_permalink.t .. ok
All tests successful.
Files=2, Tests=8, 10 wallclock secs ( 0.03 usr  0.01 sys +  1.79 cusr  0.10 csys =  1.93 CPU)
Result: PASS</p>

<p>Done. Build script exited with: 0
```</p>

<p>좀 더 뭐 욕심이 있다면 Jenkins 에서 처럼 정적분석이나 테스트 케이스에 대해서 좀 더 자세한 내용이 나와줬으면 좋겠다 싶지만… 사실 그건 뽀대의 문제라…</p>

<p>위의 빌드 내용에 대한 자세한 내용은 아래의 링크를 참고하세요.</p>

<ul>
<li><a href="http://travis-ci.org/#!/JEEN/p5-App-Zamakist/builds/2257622">Travis CI : p5-App-Zamakist</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBIx::Class and JSON]]></title>
    <link href="http://jeen.github.com/blog/2012/08/25/dbix-class-and-json/"/>
    <updated>2012-08-25T12:44:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/08/25/dbix-class-and-json</id>
    <content type="html"><![CDATA[<p> 흔한 웹서비스의 흔한 AJAX 나 흔한 RESTful API 를 제공하기 위해서, 대개 JSON 포맷의 데이터를 서버에서 뿜어내고는 합니다.</p>

<p> 하지만 누구나가 Catalyst + DBIx::Class 조합에서 이렇게 하면 되는 게 아닐까 하고 접근했다가…</p>

<blockquote><p>… encountered object '..', but neither allow_blessed nor convert_blessed settings are enabled …</p></blockquote>

<p> 라는 에러를 접하게 됩니다. bless 된 오브젝트를 어떻게든 JSON 인코딩을 시도하려고 했을 때는 위와 같은 에러를 쉬이 접할 수 있습니다.</p>

<p> 이것을 푸는 방법은 사실 여러가지가 있습니다.</p>

<p> 이것저것 신경쓰지 말고 한번에 가자고 할 때는 Catalyst::View::JSON 에서 인코딩하게 되는 stash 된 값들을 전부 ArrayRef 나 HashRef 로 변환해서 넘기는 방법입니다.</p>

<p>``` perl
   my @data;
   my $rs = $c->model('DB')->resultset('User')->search();
   while(my $row = $rs->next) {</p>

<pre><code>   push @data, {
       id =&gt; $row-&gt;id,
       name =&gt; $row-&gt;name,
       created_at =&gt; $row-&gt;created_at,
   };
</code></pre>

<p>   }
   $c->stash->{people} = \@data;
```</p>

<p> 위처럼 특정컬럼을 선별해서 넣어주는 방법이 있겠지요. 좀 더 단순화한다면, 각  스키마테이블 별로 HashRef 를 반환하는 메소드를 넣어두는 것도 좋습니다.</p>

<p>``` perl  lib/MyApp/Schema/Result/User.pm
sub to_hashref {</p>

<pre><code>my $self = shift;
return {
    id =&gt; $self-&gt;id,
    name =&gt; $self-&gt;name,
    created_at =&gt; $self-&gt;created_at,
};
</code></pre>

<p>}</p>

<p>   # Controller
   my @data;
   my $rs = $c->model('DB')->resultset('User')->search();
   while(my $row = $rs->next) {</p>

<pre><code>   push @data, $row-&gt;to_hashref;
</code></pre>

<p>   }
   $c->stash->{people} = \@data;
```</p>

<p>``` perl
  my $person = $c->model('DB')->resultset('User')->search($cond, {</p>

<pre><code>  result_class =&gt; 'DBIx::Class::ResultClass::HashRefInflator',
</code></pre>

<p>  })->first;
  $c->stash->{person} = $person;
```</p>

<p> 그럴 필요가 없다면 위처럼 <code>result_class</code> 를 지정해줌으로써 결과를 무조건 HashRef 로 반환하게끔 합니다.</p>

<p> 사실 <code>DBIx::Class::ResultClass::HashRefInflator</code> 를 적용하면 일일이 오브젝트를 만들어내지 않기 때문에 퍼포먼스 측면에서 매우 좋습니다만, 그냥 HashRef 일 따름인지라Resultset 에서 정의한 각종 메소드를 참조할 수 없습니다.
 그러니 이런저런 경우에는 가려서 사용하는 것이 좋습니다.</p>

<p> 이제 본질적으로 좀 더 접근해보면…
 JSON::XS 는 인코딩할 시에, 오브젝트가 대상인 경우에는 해당 오브젝트의 TO_JSON 메소드를 참조하여 결과를 뽑아낼 수 있습니다. 물론 <code>allow_blessed</code>, <code>convert_blessed</code> 플래그를 지정할 필요가 있지요.</p>

<p>``` perl</p>

<h1>lib/MyApp/View/JSON.pm</h1>

<p>package MyApp::View::JSON;
use JSON::XS ();</p>

<p>use parent qw(Catalyst::View::JSON);</p>

<p>my $encoder = JSON::XS->new</p>

<pre><code>          -&gt;utf8
                      -&gt;pretty(0)
                      -&gt;indent(0)
                      -&gt;allow_blessed(1)
                      -&gt;convert_blessed(1);
</code></pre>

<p>sub encode_json {</p>

<pre><code>my ($self, $c, $data) = @_;
$encoder-&gt;encode($data);
</code></pre>

<p>}</p>

<p>1;
```</p>

<p> 그러면 위처럼 <code>encode_json</code> 을 오버라이드 합니다. <code>allow_blessed</code> 와 <code>convert_blessed</code>  플래그를 켜주는 것이죠.</p>

<p>``` perl</p>

<h1>lib/MyApp/Schema/Result/User.pm</h1>

<p>..
sub TO_JSON {</p>

<pre><code>return { $_[0]-&gt;get_inflated_columns };
</code></pre>

<p>}
..
```</p>

<p>그리고 위처럼 User Result 에 대해서 TO_JSON 를 지정합니다.</p>

<p><code>perl
   $c-&gt;stash-&gt;{people} = [  $c-&gt;model('DB')-&gt;resultset('User')-&gt;search()-&gt;all ];
</code></p>

<p>그러면 이제는 아무런 걱정없이 그냥 생짜 DBIC Resultset 을 날려버려도 이제는 알아서 문제해결이 됩니다. :-)</p>

<p> 각 Resultset 마다 <code>TO_JSON</code> 을 지정하기가 벅차다면…</p>

<ul>
<li><a href="http://advent.perl.kr/2011/2011-12-17.html">Seoul.pm Advent Calendar 2011 - 열일곱번째 날 : DBIx::Class로 스키마 관리하기</a></li>
</ul>


<p>위의 글에서 <code>ResultBase</code> 를 참고해주세요.</p>

<p> <code>MyApp::Schema::ResultBase</code> 를 상속받은 각 Result 테이블들은 <code>TO_JSON</code> 을 오버라이드 해서 빼놓고 싶은 컬럼(예를 들어 <code>password</code> 같은 컬럼) 을 배제해서 출력할 수 있지 않을까요?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App::Zamakist...]]></title>
    <link href="http://jeen.github.com/blog/2012/08/09/app-zamakist-dot-dot-dot/"/>
    <updated>2012-08-09T13:33:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/08/09/app-zamakist-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>취미라고 할 것이 있다면 잠, 책, 드라마감상 정도라고 할까요.</p>

<p>걔중에 몇몇 미드들을 아직까지 꾸준하게 시간을 내면서 보고 있습니다.</p>

<p>걔중에는 가끔보면 자막이 없어서 일일이 자막찾으러 들어가고 받고 해야하는 지루한 클릭이 필요한 경우도 있습니다.</p>

<p>윈도라면 <code>곰플레이어</code> 로 이런 부분의 수고가 조금 줄어들기는 하지만 Mac 에서 <code>Movist</code> 를 통해서 주로 영상을 감상하려면 심히 신경쓰이지 않을리 없습니다.</p>

<blockquote class="twitter-tweet" lang="ko"><p>멘탈리스트 4기를 볼려고 했는데, 자막이 없네... 그래서 자막을 세팅하는 스크립트를 깨작거려서 만들어봤다. 좀 더 브러쉬 업해야 되지만서도... <a href="https://t.co/jeXVNTnI" title="https://gist.github.com/3150026">gist.github.com/3150026</a></p>&mdash; JEEN (@JEEN_LEE) <a href="https://twitter.com/JEEN_LEE/status/226260944597180417" data-datetime="2012-07-20T10:23:07+00:00">7월 20, 2012</a></blockquote>


<p>그러니까 7월 20일경에 일단 이런 문제를 겪어서 잠깐 깨작거려서 만들어보기는 했지만 대놓고 앞에 내놓기도 그렇고해서 그냥 보류했었는데요. 뭐 물론 여전히 앞에 내놓는 게 좀 그렇기는 합니다.</p>

<ul>
<li><a href="https://github.com/JEEN/p5-App-Zamakist">https://github.com/JEEN/p5-App-Zamakist</a></li>
</ul>


<p>일련의 과정을 말하자면…</p>

<p><code>bash
$ ls -la  
total 0
drwxr-xr-x  12 jeen  staff   408  8  9 13:45 .
drwxr-xr-x+ 52 jeen  staff  1768  8  9 13:45 ..
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E01.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E02.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E03.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E04.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E05.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E06.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E07.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 13:45 NCIS.Los.Angeles.S03E08.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 11:44 NCIS.Los.Angeles.S03E09.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff     0  8  9 09:29 NCIS.Los.Angeles.S03E10.720p.HDTV.X264-DIMENSION.avi
</code>
이렇게 뭐 디렉토리에 영상자료들이 널부러져 있습니다. 하지만 자막은 없죠.</p>

<p><code>
$ zamakist --dir .
Found 10 subscriptions
┌────┬──────────────────────────────────────────────────────┐
│ id │ filename                                             │
├────┼──────────────────────────────────────────────────────┤
│  1 │ NCIS.Los.Angeles.S03E01.720p.HDTV.X264-DIMENSION.avi │
│  2 │ NCIS.Los.Angeles.S03E02.720p.HDTV.X264-DIMENSION.avi │
│  3 │ NCIS.Los.Angeles.S03E03.720p.HDTV.X264-DIMENSION.avi │
│  4 │ NCIS.Los.Angeles.S03E04.720p.HDTV.X264-DIMENSION.avi │
│  5 │ NCIS.Los.Angeles.S03E05.720p.HDTV.X264-DIMENSION.avi │
│  6 │ NCIS.Los.Angeles.S03E06.720p.HDTV.X264-DIMENSION.avi │
│  7 │ NCIS.Los.Angeles.S03E07.720p.HDTV.X264-DIMENSION.avi │
│  8 │ NCIS.Los.Angeles.S03E08.720p.HDTV.X264-DIMENSION.avi │
│  9 │ NCIS.Los.Angeles.S03E09.720p.HDTV.X264-DIMENSION.avi │
│ 10 │ NCIS.Los.Angeles.S03E10.720p.HDTV.X264-DIMENSION.avi │
└────┴──────────────────────────────────────────────────────┘
Continue to download? [y/n] y
Downloaded 10 subscriptions
</code></p>

<p>그래서 뭐 <code>App::Zamakist</code> 라는 모듈을 사용하면 뭐 이렇게 자막을 한꺼번에 다운받을 수 있다 뭐 이런 거죠.</p>

<p><code>bash
$ ls -la
total 1592
drwxr-xr-x  22 jeen  staff    748  8  9 13:46 .
drwxr-xr-x+ 52 jeen  staff   1768  8  9 13:46 ..
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E01.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  63779  8  9 13:46 NCIS.Los.Angeles.S03E01.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E02.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  75041  8  9 13:46 NCIS.Los.Angeles.S03E02.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E03.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  84915  8  9 13:46 NCIS.Los.Angeles.S03E03.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E04.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  78550  8  9 13:46 NCIS.Los.Angeles.S03E04.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E05.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  94809  8  9 13:46 NCIS.Los.Angeles.S03E05.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E06.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  98759  8  9 13:46 NCIS.Los.Angeles.S03E06.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E07.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  76016  8  9 13:46 NCIS.Los.Angeles.S03E07.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 13:45 NCIS.Los.Angeles.S03E08.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  94320  8  9 13:46 NCIS.Los.Angeles.S03E08.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 11:44 NCIS.Los.Angeles.S03E09.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  69537  8  9 13:46 NCIS.Los.Angeles.S03E09.720p.HDTV.X264-DIMENSION.smi
-rw-r--r--   1 jeen  staff      0  8  9 09:29 NCIS.Los.Angeles.S03E10.720p.HDTV.X264-DIMENSION.avi
-rw-r--r--   1 jeen  staff  55905  8  9 13:46 NCIS.Los.Angeles.S03E10.720p.HDTV.X264-DIMENSION.smi
</code></p>

<p>뭐 일단 CPAN 에 올릴 생각도 없는 토이모듈 겸 생활용품 모듈이라서…</p>

<p>아 물론 자막검색은 GOM 자막을 애용하고 있습니다.</p>

<p>검색방식은 뭐 파일이름에서 확장자만 떼서 검색날려서 뭐 여차저차해서 파일다운로드 하는 링크 빼서 일괄 다운로드 하는 것이죠.</p>

<p>이제 시작하려는 미드가 있는데 자막이 없다면 이거 한번만 돌려주면 앞으로 자막찾는 수고없어지겠습니다. :-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export Facebook Event Attending List - perl-kr TeaTime]]></title>
    <link href="http://jeen.github.com/blog/2012/07/26/export-facebook-event-attending-list-perl-kr-teatime/"/>
    <updated>2012-07-26T14:22:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/07/26/export-facebook-event-attending-list-perl-kr-teatime</id>
    <content type="html"><![CDATA[<p> 지난번 1회 티타임때의 문제가 제대로 참가비 징수를 못해서 비용정산에 어려움이 있었는데,
이 문제를 해결하기 위해서 간단하게 참가자 리스트를 A4 용지로 뽑아내서 체크하도록 하는 건 어떨까 하는 생각이 있었습니다.</p>

<p> <a href="http://jeen.tistory.com/entry/perlkr-%ED%8B%B0%ED%83%80%EC%9E%84-2-%EC%84%B1%ED%99%A9%EB%A6%AC%EC%97%90-%EB%81%9D%EB%82%AC%EC%8A%B5%EB%8B%88%EB%8B%A4">#perl-kr 티타임 Vol.2</a></p>

<p> 아무튼 그런 생각을 잠깐 했다가 해볼까 해서 아래처럼 코드를 써넣었습니다.</p>

<p>``` perl
use strict;
use warnings;
use Text::Xslate;
use Data::Section::Simple;
use Facebook::Graph;</p>

<p>my $fb = Facebook::Graph->new;
$fb->access_token("YOUR ACCESS TOKEN");
my $r = $fb->fetch('466164950078338/attending');
my @attendees;
for my $person (@{ $r->{data} }) {</p>

<pre><code>my $f = $fb-&gt;fetch($person-&gt;{id});
$f-&gt;{profile_image} = $fb-&gt;picture($person-&gt;{id})-&gt;get_large-&gt;uri_as_string;  
push @attendees, $f;
</code></pre>

<p>}
push @attendees, {} for (1..3);</p>

<p>my $tx  = Text::Xslate->new(</p>

<pre><code>syntax =&gt; 'TTerse',
module =&gt; [ 'Text::Xslate::Bridge::TT2Like' ],
path =&gt; [
    Data::Section::Simple-&gt;new()-&gt;get_data_section()
],
</code></pre>

<p>);</p>

<p>print $tx->render('template.tx', { attendees => \@attendees });</p>

<p><strong>DATA</strong></p>

<p>@@ template.tx
<html>
 <head>
   <title>#perl-kr 티타임 #2</title>
   <style></p>

<pre><code> [% INCLUDE "css.tx" %]
</code></pre>

<p>   </style>
 </head>
 <body>
   <h1>※ #perl-kr 티타임 #2</h1>
   <table class="table table-striped table-bordered" style="width:50%"></p>

<pre><code> &lt;thead&gt;
   &lt;tr&gt;
     &lt;th class="span1"&gt;&amp;nbsp;&lt;/th&gt;
     &lt;th class="span1"&gt;&amp;nbsp;&lt;/th&gt;
     &lt;th class="span2"&gt;Name&lt;/th&gt; 
     &lt;th class="span1"&gt;Attend?&lt;/th&gt;
   &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
   [% FOREACH p IN attendees %]
   &lt;tr&gt;
     &lt;td&gt;[% loop.count %]&lt;/td&gt;
     &lt;td&gt;&lt;img src="[% p.profile_image %]" width="30" height="30" /&gt;&lt;/td&gt;
     &lt;td&gt;[% p.name %][% IF p.username %]([% p.username %])[% END %]&lt;/td&gt; 
     &lt;td&gt;&lt;/td&gt;
   &lt;/tr&gt;
   [% END %] 
 &lt;/tbody&gt;
</code></pre>

<p>   </table>
 </body>
</html></p>

<p>@@ css.tx
table {
  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
}</p>

<p>.table {
  width: 100%;
  margin-bottom: 18px;
}
.table th, .table td {
  padding: 8px;
  line-height: 18px;
  text-align: left;
  vertical-align: top;
  border-top: 1px solid #ddd;
}
.table th {
  font-weight: bold;
}
.table thead th {
  vertical-align: bottom;
}
.table thead:first-child tr th, .table thead:first-child tr td {
  border-top: 0;
}
.table tbody + tbody {
  border-top: 2px solid #ddd;
}
.table-condensed th, .table-condensed td {
  padding: 4px 5px;
}</p>

<p>.table-bordered {
  border: 1px solid #ddd;
  border-collapse: separate;
  <em>border-collapse: collapsed;
  -webkit-border-radius: 4px;
  -moz-border-radius: 4px;
  border-radius: 4px;
}
.table-bordered th + th, .table-bordered td + td, .table-bordered th + td, .table-bordered td + th {
  border-left: 1px solid #ddd;
}
.table-bordered thead:first-child tr:first-child th, .table-bordered tbody:first-child tr:first-child th, .table-bordered tbody:first-child tr:first-child td {
  border-top: 0;
}
/</em> line 75, ../../../../../../.rvm/gems/ruby-1.9.2-p290/gems/bootstrap-sass-2.0.1/vendor/assets/stylesheets/bootstrap/_tables.scss */
.table-bordered thead:first-child tr:first-child th:first-child, .table-bordered tbody:first-child tr:first-child td:first-child {
  -webkit-border-radius: 4px 0 0 0;
  -moz-border-radius: 4px 0 0 0;
  border-radius: 4px 0 0 0;
}
.table-bordered thead:first-child tr:first-child th:last-child, .table-bordered tbody:first-child tr:first-child td:last-child {
  -webkit-border-radius: 0 4px 0 0;
  -moz-border-radius: 0 4px 0 0;
  border-radius: 0 4px 0 0;
}
.table-bordered thead:last-child tr:last-child th:first-child, .table-bordered tbody:last-child tr:last-child td:first-child {
  -webkit-border-radius: 0 0 0 4px;
  -moz-border-radius: 0 0 0 4px;
  border-radius: 0 0 0 4px;
}
.table-bordered thead:last-child tr:last-child th:last-child, .table-bordered tbody:last-child tr:last-child td:last-child {
  -webkit-border-radius: 0 0 4px 0;
  -moz-border-radius: 0 0 4px 0;
  border-radius: 0 0 4px 0;
}
.table-striped tbody tr:nth-child(odd) td, .table-striped tbody tr:nth-child(odd) th {
  background-color: #f9f9f9;
}</p>

<p>.table tbody tr:hover td, .table tbody tr:hover th {
  background-color: #f5f5f5;
}</p>

<p>table .span1 {
  float: none;
  width: 44px;
  margin-left: 0;
}
table .span2 {
  float: none;
  width: 124px;
  margin-left: 0;
}
table .span3 {
  float: none;
  width: 204px;
  margin-left: 0;
}
table .span4 {
  float: none;
  width: 284px;
  margin-left: 0;
}
table .span5 {
  float: none;
  width: 364px;
  margin-left: 0;
}
table .span6 {
  float: none;
  width: 444px;
  margin-left: 0;
}
table .span7 {
  float: none;
  width: 524px;
  margin-left: 0;
}
table .span8 {
  float: none;
  width: 604px;
  margin-left: 0;
}
table .span9 {
  float: none;
  width: 684px;
  margin-left: 0;
}
table .span10 {
  float: none;
  width: 764px;
  margin-left: 0;
}
table .span11 {
  float: none;
  width: 844px;
  margin-left: 0;
}</p>

<p>table .span12 {
  float: none;
  width: 924px;
  margin-left: 0;
}</p>

<p>```</p>

<p> 급작스레 한 작업이라 그냥 간단히 HTML 로 뽑아버렸지만... 사실 꿈은 좀 더 아름다운 레이아웃으로 뙇하고 나와줬으면                                                                 했었지요.</p>

<p> 일단 예정 참가자 이외에 예상치못한 참가자가 있을 것을 염두해서 3개정도의 행을 더 추가해주었구요;;</p>

<p> <code>Text::Xslate</code> + <code>Data::Section::Simple</code> 의 조합은 파일하나에 우걱우걱 템플릿까지 끼워넣고 이럴 경우에는 아주 좋았습니다.</p>

<p> CSS 도 그냥 별도의 섹션으로 나눠서 <code>INCLUDE</code> 해버릴 수도 있으니 :-)</p>

<p> <code>Facebook::Graph</code> 모듈은 생각보다 좀 변태같습니다. 그 이유는 Facebook Graph API 도 변태같다는 근본적인 .... 그리고 Access Token 은 뭐 적당하게 Developer 페이지 가서 줏어서 넣었습니다. :-)</p>

<p><img src="https://lh6.googleusercontent.com/-GrgEvhNP0d0/UBDW9W-YzLI/AAAAAAAACAQ/5G48cMzvryY/w389-h521-k/list.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL::Diff - A vs B]]></title>
    <link href="http://jeen.github.com/blog/2012/07/18/mysql-diff-a-vs-b/"/>
    <updated>2012-07-18T18:30:00+09:00</updated>
    <id>http://jeen.github.com/blog/2012/07/18/mysql-diff-a-vs-b</id>
    <content type="html"><![CDATA[<p> 최근에 유지보수 관련 일로 골머리를 싸고 있다가 겨우겨우 마무리하고 있는 일이 하나 있었습니다.</p>

<p> PHP 프로젝트였는데, 유지보수 관련해서 여러가지 이슈들이 나오기 마련이고, 그 때문에 잘 움직이던 기존의 DB구조를
변경해줄 필요가 있었습니다.</p>

<p> 뭐 테이블을 추가하거나, 어떤 컬럼의 형식을 변경하거나, 혹은 인덱스를 추가하거나 하는 뭐 이런 경우 말이죠.</p>

<p> 처음에는 개발환경아래에서 기존의 product 환경에서 운용중인 DB를 dump 떠와서 진행하고, 프로젝트를 진행하면서
변경되는 SQL 내용들을 일일이 적어주었습니다. 그러다가 뭐 이사람 저사람 손을 옮겨타다가 결국 최종 마무리단계에서
어떤 컬럼이 변경되었는지, 어떤 테이블이 추가되었는지에 대한 확신을 할 수 없었습니다.</p>

<p> 그래서 기록된 SQL 을 기반으로 눈과 손으로 검수를 해야하는 지경에서 결국 실수가 생기기 마련이죠. 그리고 클레임이 발생했습니다.</p>

<p> 자, 그럼 어떻게 하면 이런 상황에서 사태를 수습하느냐... 고심했습니다.</p>

<p> 그 결과 혹시 이거라면 해서 찔러본 것이 빙고 였던 것이 <a href="http://metacpan.org/module/MySQL::Diff">MySQL::Diff</a> 였습니다.</p>

<p> 맨처음 덤프떠온 DB 를 <code>DB_A</code> 로 지정하고, 최종적으로 개발이 종료된 DB 를 <code>DB_B</code> 라고 놓습니다.</p>

<p> 이 <code>DB_A</code> 와 <code>DB_B</code> 를 서로 비교하는 것이죠. 그걸을 위해서 <code>MySQL::Diff</code> 모듈이 사용됩니다.</p>

<p>``` bash
$ mysqldiff --host1 localhost --user1 root --password1 whatthehell --host2 localhost --user2 root --password2 whatthehell bto bto_test</p>

<h2>mysqldiff 0.43</h2>

<h2></h2>

<h2>Run on Wed Jul 18 18:26:39 2012</h2>

<h2>Options: password2=whatthehell, password1=whatthehell, user1=root, host2=localhost, debug=0, host1=localhost, user2=root</h2>

<h1>#</h1>

<h2>---   db: bto (host=localhost user=root)</h2>

<h2>+++   db: bto_test (host=localhost user=root)</h2>

<p>ALTER TABLE auth DROP COLUMN updated_on; # was datetime NOT NULL DEFAULT '0000-00-00 00:00:00'
ALTER TABLE auth DROP COLUMN created_on; # was datetime NOT NULL DEFAULT '0000-00-00 00:00:00'
ALTER TABLE auth ADD UNIQUE passwd (passwd);
CREATE TABLE test1 (
  test1 int(11) NOT NULL
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
```</p>

<p>위처럼 컬럼의 삭제, 인덱스의 추가, 테이블의 추가 등 모든 변경 내역들이 나오게 됩니다.</p>

<p>다음부터는 이처럼 좀 더 간단하고 확실하게 할 수 있는 방법을 취해야 되겠습니다.</p>
]]></content>
  </entry>
  
</feed>
